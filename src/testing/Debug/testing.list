
testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000be8c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  0800c03c  0800c03c  0001c03c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c0b8  0800c0b8  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  0800c0b8  0800c0b8  0001c0b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c0c0  0800c0c0  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c0c0  0800c0c0  0001c0c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c0c4  0800c0c4  0001c0c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0800c0c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020094  2**0
                  CONTENTS
 10 .bss          00008b18  20000094  20000094  00020094  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20008bac  20008bac  00020094  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002b0fd  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005a6b  00000000  00000000  0004b1c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002290  00000000  00000000  00050c30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002060  00000000  00000000  00052ec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002b484  00000000  00000000  00054f20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002a903  00000000  00000000  000803a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f4f65  00000000  00000000  000aaca7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0019fc0c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009524  00000000  00000000  0019fc5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000094 	.word	0x20000094
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800c024 	.word	0x0800c024

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000098 	.word	0x20000098
 80001ec:	0800c024 	.word	0x0800c024

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b974 	b.w	80004f0 <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9d08      	ldr	r5, [sp, #32]
 8000226:	4604      	mov	r4, r0
 8000228:	468e      	mov	lr, r1
 800022a:	2b00      	cmp	r3, #0
 800022c:	d14d      	bne.n	80002ca <__udivmoddi4+0xaa>
 800022e:	428a      	cmp	r2, r1
 8000230:	4694      	mov	ip, r2
 8000232:	d969      	bls.n	8000308 <__udivmoddi4+0xe8>
 8000234:	fab2 f282 	clz	r2, r2
 8000238:	b152      	cbz	r2, 8000250 <__udivmoddi4+0x30>
 800023a:	fa01 f302 	lsl.w	r3, r1, r2
 800023e:	f1c2 0120 	rsb	r1, r2, #32
 8000242:	fa20 f101 	lsr.w	r1, r0, r1
 8000246:	fa0c fc02 	lsl.w	ip, ip, r2
 800024a:	ea41 0e03 	orr.w	lr, r1, r3
 800024e:	4094      	lsls	r4, r2
 8000250:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000254:	0c21      	lsrs	r1, r4, #16
 8000256:	fbbe f6f8 	udiv	r6, lr, r8
 800025a:	fa1f f78c 	uxth.w	r7, ip
 800025e:	fb08 e316 	mls	r3, r8, r6, lr
 8000262:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000266:	fb06 f107 	mul.w	r1, r6, r7
 800026a:	4299      	cmp	r1, r3
 800026c:	d90a      	bls.n	8000284 <__udivmoddi4+0x64>
 800026e:	eb1c 0303 	adds.w	r3, ip, r3
 8000272:	f106 30ff 	add.w	r0, r6, #4294967295
 8000276:	f080 811f 	bcs.w	80004b8 <__udivmoddi4+0x298>
 800027a:	4299      	cmp	r1, r3
 800027c:	f240 811c 	bls.w	80004b8 <__udivmoddi4+0x298>
 8000280:	3e02      	subs	r6, #2
 8000282:	4463      	add	r3, ip
 8000284:	1a5b      	subs	r3, r3, r1
 8000286:	b2a4      	uxth	r4, r4
 8000288:	fbb3 f0f8 	udiv	r0, r3, r8
 800028c:	fb08 3310 	mls	r3, r8, r0, r3
 8000290:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000294:	fb00 f707 	mul.w	r7, r0, r7
 8000298:	42a7      	cmp	r7, r4
 800029a:	d90a      	bls.n	80002b2 <__udivmoddi4+0x92>
 800029c:	eb1c 0404 	adds.w	r4, ip, r4
 80002a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a4:	f080 810a 	bcs.w	80004bc <__udivmoddi4+0x29c>
 80002a8:	42a7      	cmp	r7, r4
 80002aa:	f240 8107 	bls.w	80004bc <__udivmoddi4+0x29c>
 80002ae:	4464      	add	r4, ip
 80002b0:	3802      	subs	r0, #2
 80002b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b6:	1be4      	subs	r4, r4, r7
 80002b8:	2600      	movs	r6, #0
 80002ba:	b11d      	cbz	r5, 80002c4 <__udivmoddi4+0xa4>
 80002bc:	40d4      	lsrs	r4, r2
 80002be:	2300      	movs	r3, #0
 80002c0:	e9c5 4300 	strd	r4, r3, [r5]
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d909      	bls.n	80002e2 <__udivmoddi4+0xc2>
 80002ce:	2d00      	cmp	r5, #0
 80002d0:	f000 80ef 	beq.w	80004b2 <__udivmoddi4+0x292>
 80002d4:	2600      	movs	r6, #0
 80002d6:	e9c5 0100 	strd	r0, r1, [r5]
 80002da:	4630      	mov	r0, r6
 80002dc:	4631      	mov	r1, r6
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	fab3 f683 	clz	r6, r3
 80002e6:	2e00      	cmp	r6, #0
 80002e8:	d14a      	bne.n	8000380 <__udivmoddi4+0x160>
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d302      	bcc.n	80002f4 <__udivmoddi4+0xd4>
 80002ee:	4282      	cmp	r2, r0
 80002f0:	f200 80f9 	bhi.w	80004e6 <__udivmoddi4+0x2c6>
 80002f4:	1a84      	subs	r4, r0, r2
 80002f6:	eb61 0303 	sbc.w	r3, r1, r3
 80002fa:	2001      	movs	r0, #1
 80002fc:	469e      	mov	lr, r3
 80002fe:	2d00      	cmp	r5, #0
 8000300:	d0e0      	beq.n	80002c4 <__udivmoddi4+0xa4>
 8000302:	e9c5 4e00 	strd	r4, lr, [r5]
 8000306:	e7dd      	b.n	80002c4 <__udivmoddi4+0xa4>
 8000308:	b902      	cbnz	r2, 800030c <__udivmoddi4+0xec>
 800030a:	deff      	udf	#255	; 0xff
 800030c:	fab2 f282 	clz	r2, r2
 8000310:	2a00      	cmp	r2, #0
 8000312:	f040 8092 	bne.w	800043a <__udivmoddi4+0x21a>
 8000316:	eba1 010c 	sub.w	r1, r1, ip
 800031a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031e:	fa1f fe8c 	uxth.w	lr, ip
 8000322:	2601      	movs	r6, #1
 8000324:	0c20      	lsrs	r0, r4, #16
 8000326:	fbb1 f3f7 	udiv	r3, r1, r7
 800032a:	fb07 1113 	mls	r1, r7, r3, r1
 800032e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000332:	fb0e f003 	mul.w	r0, lr, r3
 8000336:	4288      	cmp	r0, r1
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x12c>
 800033a:	eb1c 0101 	adds.w	r1, ip, r1
 800033e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x12a>
 8000344:	4288      	cmp	r0, r1
 8000346:	f200 80cb 	bhi.w	80004e0 <__udivmoddi4+0x2c0>
 800034a:	4643      	mov	r3, r8
 800034c:	1a09      	subs	r1, r1, r0
 800034e:	b2a4      	uxth	r4, r4
 8000350:	fbb1 f0f7 	udiv	r0, r1, r7
 8000354:	fb07 1110 	mls	r1, r7, r0, r1
 8000358:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800035c:	fb0e fe00 	mul.w	lr, lr, r0
 8000360:	45a6      	cmp	lr, r4
 8000362:	d908      	bls.n	8000376 <__udivmoddi4+0x156>
 8000364:	eb1c 0404 	adds.w	r4, ip, r4
 8000368:	f100 31ff 	add.w	r1, r0, #4294967295
 800036c:	d202      	bcs.n	8000374 <__udivmoddi4+0x154>
 800036e:	45a6      	cmp	lr, r4
 8000370:	f200 80bb 	bhi.w	80004ea <__udivmoddi4+0x2ca>
 8000374:	4608      	mov	r0, r1
 8000376:	eba4 040e 	sub.w	r4, r4, lr
 800037a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037e:	e79c      	b.n	80002ba <__udivmoddi4+0x9a>
 8000380:	f1c6 0720 	rsb	r7, r6, #32
 8000384:	40b3      	lsls	r3, r6
 8000386:	fa22 fc07 	lsr.w	ip, r2, r7
 800038a:	ea4c 0c03 	orr.w	ip, ip, r3
 800038e:	fa20 f407 	lsr.w	r4, r0, r7
 8000392:	fa01 f306 	lsl.w	r3, r1, r6
 8000396:	431c      	orrs	r4, r3
 8000398:	40f9      	lsrs	r1, r7
 800039a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039e:	fa00 f306 	lsl.w	r3, r0, r6
 80003a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a6:	0c20      	lsrs	r0, r4, #16
 80003a8:	fa1f fe8c 	uxth.w	lr, ip
 80003ac:	fb09 1118 	mls	r1, r9, r8, r1
 80003b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b4:	fb08 f00e 	mul.w	r0, r8, lr
 80003b8:	4288      	cmp	r0, r1
 80003ba:	fa02 f206 	lsl.w	r2, r2, r6
 80003be:	d90b      	bls.n	80003d8 <__udivmoddi4+0x1b8>
 80003c0:	eb1c 0101 	adds.w	r1, ip, r1
 80003c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c8:	f080 8088 	bcs.w	80004dc <__udivmoddi4+0x2bc>
 80003cc:	4288      	cmp	r0, r1
 80003ce:	f240 8085 	bls.w	80004dc <__udivmoddi4+0x2bc>
 80003d2:	f1a8 0802 	sub.w	r8, r8, #2
 80003d6:	4461      	add	r1, ip
 80003d8:	1a09      	subs	r1, r1, r0
 80003da:	b2a4      	uxth	r4, r4
 80003dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003e0:	fb09 1110 	mls	r1, r9, r0, r1
 80003e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003ec:	458e      	cmp	lr, r1
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x1e2>
 80003f0:	eb1c 0101 	adds.w	r1, ip, r1
 80003f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f8:	d26c      	bcs.n	80004d4 <__udivmoddi4+0x2b4>
 80003fa:	458e      	cmp	lr, r1
 80003fc:	d96a      	bls.n	80004d4 <__udivmoddi4+0x2b4>
 80003fe:	3802      	subs	r0, #2
 8000400:	4461      	add	r1, ip
 8000402:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000406:	fba0 9402 	umull	r9, r4, r0, r2
 800040a:	eba1 010e 	sub.w	r1, r1, lr
 800040e:	42a1      	cmp	r1, r4
 8000410:	46c8      	mov	r8, r9
 8000412:	46a6      	mov	lr, r4
 8000414:	d356      	bcc.n	80004c4 <__udivmoddi4+0x2a4>
 8000416:	d053      	beq.n	80004c0 <__udivmoddi4+0x2a0>
 8000418:	b15d      	cbz	r5, 8000432 <__udivmoddi4+0x212>
 800041a:	ebb3 0208 	subs.w	r2, r3, r8
 800041e:	eb61 010e 	sbc.w	r1, r1, lr
 8000422:	fa01 f707 	lsl.w	r7, r1, r7
 8000426:	fa22 f306 	lsr.w	r3, r2, r6
 800042a:	40f1      	lsrs	r1, r6
 800042c:	431f      	orrs	r7, r3
 800042e:	e9c5 7100 	strd	r7, r1, [r5]
 8000432:	2600      	movs	r6, #0
 8000434:	4631      	mov	r1, r6
 8000436:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043a:	f1c2 0320 	rsb	r3, r2, #32
 800043e:	40d8      	lsrs	r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa21 f303 	lsr.w	r3, r1, r3
 8000448:	4091      	lsls	r1, r2
 800044a:	4301      	orrs	r1, r0
 800044c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000450:	fa1f fe8c 	uxth.w	lr, ip
 8000454:	fbb3 f0f7 	udiv	r0, r3, r7
 8000458:	fb07 3610 	mls	r6, r7, r0, r3
 800045c:	0c0b      	lsrs	r3, r1, #16
 800045e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000462:	fb00 f60e 	mul.w	r6, r0, lr
 8000466:	429e      	cmp	r6, r3
 8000468:	fa04 f402 	lsl.w	r4, r4, r2
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x260>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 38ff 	add.w	r8, r0, #4294967295
 8000476:	d22f      	bcs.n	80004d8 <__udivmoddi4+0x2b8>
 8000478:	429e      	cmp	r6, r3
 800047a:	d92d      	bls.n	80004d8 <__udivmoddi4+0x2b8>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1b9b      	subs	r3, r3, r6
 8000482:	b289      	uxth	r1, r1
 8000484:	fbb3 f6f7 	udiv	r6, r3, r7
 8000488:	fb07 3316 	mls	r3, r7, r6, r3
 800048c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000490:	fb06 f30e 	mul.w	r3, r6, lr
 8000494:	428b      	cmp	r3, r1
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x28a>
 8000498:	eb1c 0101 	adds.w	r1, ip, r1
 800049c:	f106 38ff 	add.w	r8, r6, #4294967295
 80004a0:	d216      	bcs.n	80004d0 <__udivmoddi4+0x2b0>
 80004a2:	428b      	cmp	r3, r1
 80004a4:	d914      	bls.n	80004d0 <__udivmoddi4+0x2b0>
 80004a6:	3e02      	subs	r6, #2
 80004a8:	4461      	add	r1, ip
 80004aa:	1ac9      	subs	r1, r1, r3
 80004ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004b0:	e738      	b.n	8000324 <__udivmoddi4+0x104>
 80004b2:	462e      	mov	r6, r5
 80004b4:	4628      	mov	r0, r5
 80004b6:	e705      	b.n	80002c4 <__udivmoddi4+0xa4>
 80004b8:	4606      	mov	r6, r0
 80004ba:	e6e3      	b.n	8000284 <__udivmoddi4+0x64>
 80004bc:	4618      	mov	r0, r3
 80004be:	e6f8      	b.n	80002b2 <__udivmoddi4+0x92>
 80004c0:	454b      	cmp	r3, r9
 80004c2:	d2a9      	bcs.n	8000418 <__udivmoddi4+0x1f8>
 80004c4:	ebb9 0802 	subs.w	r8, r9, r2
 80004c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004cc:	3801      	subs	r0, #1
 80004ce:	e7a3      	b.n	8000418 <__udivmoddi4+0x1f8>
 80004d0:	4646      	mov	r6, r8
 80004d2:	e7ea      	b.n	80004aa <__udivmoddi4+0x28a>
 80004d4:	4620      	mov	r0, r4
 80004d6:	e794      	b.n	8000402 <__udivmoddi4+0x1e2>
 80004d8:	4640      	mov	r0, r8
 80004da:	e7d1      	b.n	8000480 <__udivmoddi4+0x260>
 80004dc:	46d0      	mov	r8, sl
 80004de:	e77b      	b.n	80003d8 <__udivmoddi4+0x1b8>
 80004e0:	3b02      	subs	r3, #2
 80004e2:	4461      	add	r1, ip
 80004e4:	e732      	b.n	800034c <__udivmoddi4+0x12c>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e709      	b.n	80002fe <__udivmoddi4+0xde>
 80004ea:	4464      	add	r4, ip
 80004ec:	3802      	subs	r0, #2
 80004ee:	e742      	b.n	8000376 <__udivmoddi4+0x156>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <vApplicationStackOverflowHook>:
}
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80004f4:	b480      	push	{r7}
 80004f6:	b083      	sub	sp, #12
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
 80004fc:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80004fe:	bf00      	nop
 8000500:	370c      	adds	r7, #12
 8000502:	46bd      	mov	sp, r7
 8000504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000508:	4770      	bx	lr

0800050a <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 800050a:	b480      	push	{r7}
 800050c:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 800050e:	bf00      	nop
 8000510:	46bd      	mov	sp, r7
 8000512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000516:	4770      	bx	lr

08000518 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000518:	b5b0      	push	{r4, r5, r7, lr}
 800051a:	b088      	sub	sp, #32
 800051c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051e:	f001 f86d 	bl	80015fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000522:	f000 f83f 	bl	80005a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000526:	f000 faad 	bl	8000a84 <MX_GPIO_Init>
  MX_CRC_Init();
 800052a:	f000 f8a5 	bl	8000678 <MX_CRC_Init>
  MX_DMA2D_Init();
 800052e:	f000 f8b7 	bl	80006a0 <MX_DMA2D_Init>
  MX_FMC_Init();
 8000532:	f000 fa57 	bl	80009e4 <MX_FMC_Init>
  MX_I2C3_Init();
 8000536:	f000 f8e5 	bl	8000704 <MX_I2C3_Init>
  MX_LTDC_Init();
 800053a:	f000 f923 	bl	8000784 <MX_LTDC_Init>
  MX_SPI5_Init();
 800053e:	f000 f9a1 	bl	8000884 <MX_SPI5_Init>
  MX_TIM1_Init();
 8000542:	f000 f9d5 	bl	80008f0 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000546:	f000 fa23 	bl	8000990 <MX_USART1_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 800054a:	4b13      	ldr	r3, [pc, #76]	; (8000598 <main+0x80>)
 800054c:	1d3c      	adds	r4, r7, #4
 800054e:	461d      	mov	r5, r3
 8000550:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000552:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000554:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000558:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800055c:	1d3b      	adds	r3, r7, #4
 800055e:	2100      	movs	r1, #0
 8000560:	4618      	mov	r0, r3
 8000562:	f009 f855 	bl	8009610 <osThreadCreate>
 8000566:	4603      	mov	r3, r0
 8000568:	4a0c      	ldr	r2, [pc, #48]	; (800059c <main+0x84>)
 800056a:	6013      	str	r3, [r2, #0]
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_13)==1){
 800056c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000570:	480b      	ldr	r0, [pc, #44]	; (80005a0 <main+0x88>)
 8000572:	f001 fd3f 	bl	8001ff4 <HAL_GPIO_ReadPin>
 8000576:	4603      	mov	r3, r0
 8000578:	2b01      	cmp	r3, #1
 800057a:	d106      	bne.n	800058a <main+0x72>
		  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_12, GPIO_PIN_RESET);
 800057c:	2200      	movs	r2, #0
 800057e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000582:	4807      	ldr	r0, [pc, #28]	; (80005a0 <main+0x88>)
 8000584:	f001 fd4e 	bl	8002024 <HAL_GPIO_WritePin>
 8000588:	e7f0      	b.n	800056c <main+0x54>
	  }
	  else
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 800058a:	2201      	movs	r2, #1
 800058c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000590:	4803      	ldr	r0, [pc, #12]	; (80005a0 <main+0x88>)
 8000592:	f001 fd47 	bl	8002024 <HAL_GPIO_WritePin>
	  if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_13)==1){
 8000596:	e7e9      	b.n	800056c <main+0x54>
 8000598:	0800c048 	.word	0x0800c048
 800059c:	2000030c 	.word	0x2000030c
 80005a0:	40020c00 	.word	0x40020c00

080005a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b094      	sub	sp, #80	; 0x50
 80005a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005aa:	f107 0320 	add.w	r3, r7, #32
 80005ae:	2230      	movs	r2, #48	; 0x30
 80005b0:	2100      	movs	r1, #0
 80005b2:	4618      	mov	r0, r3
 80005b4:	f00b fc30 	bl	800be18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b8:	f107 030c 	add.w	r3, r7, #12
 80005bc:	2200      	movs	r2, #0
 80005be:	601a      	str	r2, [r3, #0]
 80005c0:	605a      	str	r2, [r3, #4]
 80005c2:	609a      	str	r2, [r3, #8]
 80005c4:	60da      	str	r2, [r3, #12]
 80005c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c8:	2300      	movs	r3, #0
 80005ca:	60bb      	str	r3, [r7, #8]
 80005cc:	4b28      	ldr	r3, [pc, #160]	; (8000670 <SystemClock_Config+0xcc>)
 80005ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d0:	4a27      	ldr	r2, [pc, #156]	; (8000670 <SystemClock_Config+0xcc>)
 80005d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005d6:	6413      	str	r3, [r2, #64]	; 0x40
 80005d8:	4b25      	ldr	r3, [pc, #148]	; (8000670 <SystemClock_Config+0xcc>)
 80005da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005e0:	60bb      	str	r3, [r7, #8]
 80005e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005e4:	2300      	movs	r3, #0
 80005e6:	607b      	str	r3, [r7, #4]
 80005e8:	4b22      	ldr	r3, [pc, #136]	; (8000674 <SystemClock_Config+0xd0>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005f0:	4a20      	ldr	r2, [pc, #128]	; (8000674 <SystemClock_Config+0xd0>)
 80005f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005f6:	6013      	str	r3, [r2, #0]
 80005f8:	4b1e      	ldr	r3, [pc, #120]	; (8000674 <SystemClock_Config+0xd0>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000600:	607b      	str	r3, [r7, #4]
 8000602:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000604:	2301      	movs	r3, #1
 8000606:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000608:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800060c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800060e:	2302      	movs	r3, #2
 8000610:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000612:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000616:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000618:	2304      	movs	r3, #4
 800061a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 800061c:	2348      	movs	r3, #72	; 0x48
 800061e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000620:	2302      	movs	r3, #2
 8000622:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000624:	2303      	movs	r3, #3
 8000626:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000628:	f107 0320 	add.w	r3, r7, #32
 800062c:	4618      	mov	r0, r3
 800062e:	f003 fe45 	bl	80042bc <HAL_RCC_OscConfig>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000638:	f000 fb50 	bl	8000cdc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800063c:	230f      	movs	r3, #15
 800063e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000640:	2302      	movs	r3, #2
 8000642:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000644:	2300      	movs	r3, #0
 8000646:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000648:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800064c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800064e:	2300      	movs	r3, #0
 8000650:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000652:	f107 030c 	add.w	r3, r7, #12
 8000656:	2102      	movs	r1, #2
 8000658:	4618      	mov	r0, r3
 800065a:	f004 f8a7 	bl	80047ac <HAL_RCC_ClockConfig>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000664:	f000 fb3a 	bl	8000cdc <Error_Handler>
  }
}
 8000668:	bf00      	nop
 800066a:	3750      	adds	r7, #80	; 0x50
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	40023800 	.word	0x40023800
 8000674:	40007000 	.word	0x40007000

08000678 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800067c:	4b06      	ldr	r3, [pc, #24]	; (8000698 <MX_CRC_Init+0x20>)
 800067e:	4a07      	ldr	r2, [pc, #28]	; (800069c <MX_CRC_Init+0x24>)
 8000680:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000682:	4805      	ldr	r0, [pc, #20]	; (8000698 <MX_CRC_Init+0x20>)
 8000684:	f001 f902 	bl	800188c <HAL_CRC_Init>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800068e:	f000 fb25 	bl	8000cdc <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000692:	bf00      	nop
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	200000b0 	.word	0x200000b0
 800069c:	40023000 	.word	0x40023000

080006a0 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80006a4:	4b15      	ldr	r3, [pc, #84]	; (80006fc <MX_DMA2D_Init+0x5c>)
 80006a6:	4a16      	ldr	r2, [pc, #88]	; (8000700 <MX_DMA2D_Init+0x60>)
 80006a8:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80006aa:	4b14      	ldr	r3, [pc, #80]	; (80006fc <MX_DMA2D_Init+0x5c>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80006b0:	4b12      	ldr	r3, [pc, #72]	; (80006fc <MX_DMA2D_Init+0x5c>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80006b6:	4b11      	ldr	r3, [pc, #68]	; (80006fc <MX_DMA2D_Init+0x5c>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80006bc:	4b0f      	ldr	r3, [pc, #60]	; (80006fc <MX_DMA2D_Init+0x5c>)
 80006be:	2200      	movs	r2, #0
 80006c0:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80006c2:	4b0e      	ldr	r3, [pc, #56]	; (80006fc <MX_DMA2D_Init+0x5c>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80006c8:	4b0c      	ldr	r3, [pc, #48]	; (80006fc <MX_DMA2D_Init+0x5c>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80006ce:	4b0b      	ldr	r3, [pc, #44]	; (80006fc <MX_DMA2D_Init+0x5c>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80006d4:	4809      	ldr	r0, [pc, #36]	; (80006fc <MX_DMA2D_Init+0x5c>)
 80006d6:	f001 f8f5 	bl	80018c4 <HAL_DMA2D_Init>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80006e0:	f000 fafc 	bl	8000cdc <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80006e4:	2101      	movs	r1, #1
 80006e6:	4805      	ldr	r0, [pc, #20]	; (80006fc <MX_DMA2D_Init+0x5c>)
 80006e8:	f001 fa46 	bl	8001b78 <HAL_DMA2D_ConfigLayer>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80006f2:	f000 faf3 	bl	8000cdc <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80006f6:	bf00      	nop
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	200000b8 	.word	0x200000b8
 8000700:	4002b000 	.word	0x4002b000

08000704 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000708:	4b1b      	ldr	r3, [pc, #108]	; (8000778 <MX_I2C3_Init+0x74>)
 800070a:	4a1c      	ldr	r2, [pc, #112]	; (800077c <MX_I2C3_Init+0x78>)
 800070c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800070e:	4b1a      	ldr	r3, [pc, #104]	; (8000778 <MX_I2C3_Init+0x74>)
 8000710:	4a1b      	ldr	r2, [pc, #108]	; (8000780 <MX_I2C3_Init+0x7c>)
 8000712:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000714:	4b18      	ldr	r3, [pc, #96]	; (8000778 <MX_I2C3_Init+0x74>)
 8000716:	2200      	movs	r2, #0
 8000718:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800071a:	4b17      	ldr	r3, [pc, #92]	; (8000778 <MX_I2C3_Init+0x74>)
 800071c:	2200      	movs	r2, #0
 800071e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000720:	4b15      	ldr	r3, [pc, #84]	; (8000778 <MX_I2C3_Init+0x74>)
 8000722:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000726:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000728:	4b13      	ldr	r3, [pc, #76]	; (8000778 <MX_I2C3_Init+0x74>)
 800072a:	2200      	movs	r2, #0
 800072c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800072e:	4b12      	ldr	r3, [pc, #72]	; (8000778 <MX_I2C3_Init+0x74>)
 8000730:	2200      	movs	r2, #0
 8000732:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000734:	4b10      	ldr	r3, [pc, #64]	; (8000778 <MX_I2C3_Init+0x74>)
 8000736:	2200      	movs	r2, #0
 8000738:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800073a:	4b0f      	ldr	r3, [pc, #60]	; (8000778 <MX_I2C3_Init+0x74>)
 800073c:	2200      	movs	r2, #0
 800073e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000740:	480d      	ldr	r0, [pc, #52]	; (8000778 <MX_I2C3_Init+0x74>)
 8000742:	f003 f893 	bl	800386c <HAL_I2C_Init>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800074c:	f000 fac6 	bl	8000cdc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000750:	2100      	movs	r1, #0
 8000752:	4809      	ldr	r0, [pc, #36]	; (8000778 <MX_I2C3_Init+0x74>)
 8000754:	f003 f9ce 	bl	8003af4 <HAL_I2CEx_ConfigAnalogFilter>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 800075e:	f000 fabd 	bl	8000cdc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000762:	2100      	movs	r1, #0
 8000764:	4804      	ldr	r0, [pc, #16]	; (8000778 <MX_I2C3_Init+0x74>)
 8000766:	f003 fa01 	bl	8003b6c <HAL_I2CEx_ConfigDigitalFilter>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8000770:	f000 fab4 	bl	8000cdc <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000774:	bf00      	nop
 8000776:	bd80      	pop	{r7, pc}
 8000778:	200000f8 	.word	0x200000f8
 800077c:	40005c00 	.word	0x40005c00
 8000780:	000186a0 	.word	0x000186a0

08000784 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b08e      	sub	sp, #56	; 0x38
 8000788:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800078a:	1d3b      	adds	r3, r7, #4
 800078c:	2234      	movs	r2, #52	; 0x34
 800078e:	2100      	movs	r1, #0
 8000790:	4618      	mov	r0, r3
 8000792:	f00b fb41 	bl	800be18 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000796:	4b39      	ldr	r3, [pc, #228]	; (800087c <MX_LTDC_Init+0xf8>)
 8000798:	4a39      	ldr	r2, [pc, #228]	; (8000880 <MX_LTDC_Init+0xfc>)
 800079a:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800079c:	4b37      	ldr	r3, [pc, #220]	; (800087c <MX_LTDC_Init+0xf8>)
 800079e:	2200      	movs	r2, #0
 80007a0:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80007a2:	4b36      	ldr	r3, [pc, #216]	; (800087c <MX_LTDC_Init+0xf8>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80007a8:	4b34      	ldr	r3, [pc, #208]	; (800087c <MX_LTDC_Init+0xf8>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80007ae:	4b33      	ldr	r3, [pc, #204]	; (800087c <MX_LTDC_Init+0xf8>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 80007b4:	4b31      	ldr	r3, [pc, #196]	; (800087c <MX_LTDC_Init+0xf8>)
 80007b6:	2209      	movs	r2, #9
 80007b8:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 80007ba:	4b30      	ldr	r3, [pc, #192]	; (800087c <MX_LTDC_Init+0xf8>)
 80007bc:	2201      	movs	r2, #1
 80007be:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 80007c0:	4b2e      	ldr	r3, [pc, #184]	; (800087c <MX_LTDC_Init+0xf8>)
 80007c2:	221d      	movs	r2, #29
 80007c4:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 80007c6:	4b2d      	ldr	r3, [pc, #180]	; (800087c <MX_LTDC_Init+0xf8>)
 80007c8:	2203      	movs	r2, #3
 80007ca:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 80007cc:	4b2b      	ldr	r3, [pc, #172]	; (800087c <MX_LTDC_Init+0xf8>)
 80007ce:	f240 120d 	movw	r2, #269	; 0x10d
 80007d2:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 80007d4:	4b29      	ldr	r3, [pc, #164]	; (800087c <MX_LTDC_Init+0xf8>)
 80007d6:	f240 1243 	movw	r2, #323	; 0x143
 80007da:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 80007dc:	4b27      	ldr	r3, [pc, #156]	; (800087c <MX_LTDC_Init+0xf8>)
 80007de:	f240 1217 	movw	r2, #279	; 0x117
 80007e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 80007e4:	4b25      	ldr	r3, [pc, #148]	; (800087c <MX_LTDC_Init+0xf8>)
 80007e6:	f240 1247 	movw	r2, #327	; 0x147
 80007ea:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80007ec:	4b23      	ldr	r3, [pc, #140]	; (800087c <MX_LTDC_Init+0xf8>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80007f4:	4b21      	ldr	r3, [pc, #132]	; (800087c <MX_LTDC_Init+0xf8>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80007fc:	4b1f      	ldr	r3, [pc, #124]	; (800087c <MX_LTDC_Init+0xf8>)
 80007fe:	2200      	movs	r2, #0
 8000800:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000804:	481d      	ldr	r0, [pc, #116]	; (800087c <MX_LTDC_Init+0xf8>)
 8000806:	f003 f9f1 	bl	8003bec <HAL_LTDC_Init>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000810:	f000 fa64 	bl	8000cdc <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000814:	2300      	movs	r3, #0
 8000816:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 8000818:	23f0      	movs	r3, #240	; 0xf0
 800081a:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 800081c:	2300      	movs	r3, #0
 800081e:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 8000820:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000824:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000826:	2302      	movs	r3, #2
 8000828:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 800082a:	23ff      	movs	r3, #255	; 0xff
 800082c:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 800082e:	2300      	movs	r3, #0
 8000830:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000832:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000836:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000838:	2307      	movs	r3, #7
 800083a:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 800083c:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8000840:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 8000842:	23f0      	movs	r3, #240	; 0xf0
 8000844:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 8000846:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800084a:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 800084c:	2300      	movs	r3, #0
 800084e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000852:	2300      	movs	r3, #0
 8000854:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000858:	2300      	movs	r3, #0
 800085a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800085e:	1d3b      	adds	r3, r7, #4
 8000860:	2200      	movs	r2, #0
 8000862:	4619      	mov	r1, r3
 8000864:	4805      	ldr	r0, [pc, #20]	; (800087c <MX_LTDC_Init+0xf8>)
 8000866:	f003 fb53 	bl	8003f10 <HAL_LTDC_ConfigLayer>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 8000870:	f000 fa34 	bl	8000cdc <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000874:	bf00      	nop
 8000876:	3738      	adds	r7, #56	; 0x38
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	2000014c 	.word	0x2000014c
 8000880:	40016800 	.word	0x40016800

08000884 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8000888:	4b17      	ldr	r3, [pc, #92]	; (80008e8 <MX_SPI5_Init+0x64>)
 800088a:	4a18      	ldr	r2, [pc, #96]	; (80008ec <MX_SPI5_Init+0x68>)
 800088c:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800088e:	4b16      	ldr	r3, [pc, #88]	; (80008e8 <MX_SPI5_Init+0x64>)
 8000890:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000894:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8000896:	4b14      	ldr	r3, [pc, #80]	; (80008e8 <MX_SPI5_Init+0x64>)
 8000898:	2200      	movs	r2, #0
 800089a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 800089c:	4b12      	ldr	r3, [pc, #72]	; (80008e8 <MX_SPI5_Init+0x64>)
 800089e:	2200      	movs	r2, #0
 80008a0:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008a2:	4b11      	ldr	r3, [pc, #68]	; (80008e8 <MX_SPI5_Init+0x64>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008a8:	4b0f      	ldr	r3, [pc, #60]	; (80008e8 <MX_SPI5_Init+0x64>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80008ae:	4b0e      	ldr	r3, [pc, #56]	; (80008e8 <MX_SPI5_Init+0x64>)
 80008b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008b4:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80008b6:	4b0c      	ldr	r3, [pc, #48]	; (80008e8 <MX_SPI5_Init+0x64>)
 80008b8:	2218      	movs	r2, #24
 80008ba:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008bc:	4b0a      	ldr	r3, [pc, #40]	; (80008e8 <MX_SPI5_Init+0x64>)
 80008be:	2200      	movs	r2, #0
 80008c0:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80008c2:	4b09      	ldr	r3, [pc, #36]	; (80008e8 <MX_SPI5_Init+0x64>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008c8:	4b07      	ldr	r3, [pc, #28]	; (80008e8 <MX_SPI5_Init+0x64>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 80008ce:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <MX_SPI5_Init+0x64>)
 80008d0:	220a      	movs	r2, #10
 80008d2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80008d4:	4804      	ldr	r0, [pc, #16]	; (80008e8 <MX_SPI5_Init+0x64>)
 80008d6:	f004 fbaf 	bl	8005038 <HAL_SPI_Init>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 80008e0:	f000 f9fc 	bl	8000cdc <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80008e4:	bf00      	nop
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	200001f4 	.word	0x200001f4
 80008ec:	40015000 	.word	0x40015000

080008f0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b086      	sub	sp, #24
 80008f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008f6:	f107 0308 	add.w	r3, r7, #8
 80008fa:	2200      	movs	r2, #0
 80008fc:	601a      	str	r2, [r3, #0]
 80008fe:	605a      	str	r2, [r3, #4]
 8000900:	609a      	str	r2, [r3, #8]
 8000902:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000904:	463b      	mov	r3, r7
 8000906:	2200      	movs	r2, #0
 8000908:	601a      	str	r2, [r3, #0]
 800090a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800090c:	4b1e      	ldr	r3, [pc, #120]	; (8000988 <MX_TIM1_Init+0x98>)
 800090e:	4a1f      	ldr	r2, [pc, #124]	; (800098c <MX_TIM1_Init+0x9c>)
 8000910:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000912:	4b1d      	ldr	r3, [pc, #116]	; (8000988 <MX_TIM1_Init+0x98>)
 8000914:	2200      	movs	r2, #0
 8000916:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000918:	4b1b      	ldr	r3, [pc, #108]	; (8000988 <MX_TIM1_Init+0x98>)
 800091a:	2200      	movs	r2, #0
 800091c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800091e:	4b1a      	ldr	r3, [pc, #104]	; (8000988 <MX_TIM1_Init+0x98>)
 8000920:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000924:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000926:	4b18      	ldr	r3, [pc, #96]	; (8000988 <MX_TIM1_Init+0x98>)
 8000928:	2200      	movs	r2, #0
 800092a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800092c:	4b16      	ldr	r3, [pc, #88]	; (8000988 <MX_TIM1_Init+0x98>)
 800092e:	2200      	movs	r2, #0
 8000930:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000932:	4b15      	ldr	r3, [pc, #84]	; (8000988 <MX_TIM1_Init+0x98>)
 8000934:	2200      	movs	r2, #0
 8000936:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000938:	4813      	ldr	r0, [pc, #76]	; (8000988 <MX_TIM1_Init+0x98>)
 800093a:	f004 fc06 	bl	800514a <HAL_TIM_Base_Init>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000944:	f000 f9ca 	bl	8000cdc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000948:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800094c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800094e:	f107 0308 	add.w	r3, r7, #8
 8000952:	4619      	mov	r1, r3
 8000954:	480c      	ldr	r0, [pc, #48]	; (8000988 <MX_TIM1_Init+0x98>)
 8000956:	f004 fdbf 	bl	80054d8 <HAL_TIM_ConfigClockSource>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000960:	f000 f9bc 	bl	8000cdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000964:	2300      	movs	r3, #0
 8000966:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000968:	2300      	movs	r3, #0
 800096a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800096c:	463b      	mov	r3, r7
 800096e:	4619      	mov	r1, r3
 8000970:	4805      	ldr	r0, [pc, #20]	; (8000988 <MX_TIM1_Init+0x98>)
 8000972:	f004 ffdb 	bl	800592c <HAL_TIMEx_MasterConfigSynchronization>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800097c:	f000 f9ae 	bl	8000cdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000980:	bf00      	nop
 8000982:	3718      	adds	r7, #24
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	2000024c 	.word	0x2000024c
 800098c:	40010000 	.word	0x40010000

08000990 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000994:	4b11      	ldr	r3, [pc, #68]	; (80009dc <MX_USART1_UART_Init+0x4c>)
 8000996:	4a12      	ldr	r2, [pc, #72]	; (80009e0 <MX_USART1_UART_Init+0x50>)
 8000998:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800099a:	4b10      	ldr	r3, [pc, #64]	; (80009dc <MX_USART1_UART_Init+0x4c>)
 800099c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009a2:	4b0e      	ldr	r3, [pc, #56]	; (80009dc <MX_USART1_UART_Init+0x4c>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009a8:	4b0c      	ldr	r3, [pc, #48]	; (80009dc <MX_USART1_UART_Init+0x4c>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009ae:	4b0b      	ldr	r3, [pc, #44]	; (80009dc <MX_USART1_UART_Init+0x4c>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009b4:	4b09      	ldr	r3, [pc, #36]	; (80009dc <MX_USART1_UART_Init+0x4c>)
 80009b6:	220c      	movs	r2, #12
 80009b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ba:	4b08      	ldr	r3, [pc, #32]	; (80009dc <MX_USART1_UART_Init+0x4c>)
 80009bc:	2200      	movs	r2, #0
 80009be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009c0:	4b06      	ldr	r3, [pc, #24]	; (80009dc <MX_USART1_UART_Init+0x4c>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009c6:	4805      	ldr	r0, [pc, #20]	; (80009dc <MX_USART1_UART_Init+0x4c>)
 80009c8:	f005 f840 	bl	8005a4c <HAL_UART_Init>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80009d2:	f000 f983 	bl	8000cdc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009d6:	bf00      	nop
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	20000294 	.word	0x20000294
 80009e0:	40011000 	.word	0x40011000

080009e4 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b088      	sub	sp, #32
 80009e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80009ea:	1d3b      	adds	r3, r7, #4
 80009ec:	2200      	movs	r2, #0
 80009ee:	601a      	str	r2, [r3, #0]
 80009f0:	605a      	str	r2, [r3, #4]
 80009f2:	609a      	str	r2, [r3, #8]
 80009f4:	60da      	str	r2, [r3, #12]
 80009f6:	611a      	str	r2, [r3, #16]
 80009f8:	615a      	str	r2, [r3, #20]
 80009fa:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80009fc:	4b1f      	ldr	r3, [pc, #124]	; (8000a7c <MX_FMC_Init+0x98>)
 80009fe:	4a20      	ldr	r2, [pc, #128]	; (8000a80 <MX_FMC_Init+0x9c>)
 8000a00:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000a02:	4b1e      	ldr	r3, [pc, #120]	; (8000a7c <MX_FMC_Init+0x98>)
 8000a04:	2201      	movs	r2, #1
 8000a06:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000a08:	4b1c      	ldr	r3, [pc, #112]	; (8000a7c <MX_FMC_Init+0x98>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000a0e:	4b1b      	ldr	r3, [pc, #108]	; (8000a7c <MX_FMC_Init+0x98>)
 8000a10:	2204      	movs	r2, #4
 8000a12:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000a14:	4b19      	ldr	r3, [pc, #100]	; (8000a7c <MX_FMC_Init+0x98>)
 8000a16:	2210      	movs	r2, #16
 8000a18:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000a1a:	4b18      	ldr	r3, [pc, #96]	; (8000a7c <MX_FMC_Init+0x98>)
 8000a1c:	2240      	movs	r2, #64	; 0x40
 8000a1e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000a20:	4b16      	ldr	r3, [pc, #88]	; (8000a7c <MX_FMC_Init+0x98>)
 8000a22:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000a26:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000a28:	4b14      	ldr	r3, [pc, #80]	; (8000a7c <MX_FMC_Init+0x98>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000a2e:	4b13      	ldr	r3, [pc, #76]	; (8000a7c <MX_FMC_Init+0x98>)
 8000a30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a34:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000a36:	4b11      	ldr	r3, [pc, #68]	; (8000a7c <MX_FMC_Init+0x98>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000a3c:	4b0f      	ldr	r3, [pc, #60]	; (8000a7c <MX_FMC_Init+0x98>)
 8000a3e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a42:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000a44:	2302      	movs	r3, #2
 8000a46:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000a48:	2307      	movs	r3, #7
 8000a4a:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000a4c:	2304      	movs	r3, #4
 8000a4e:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000a50:	2307      	movs	r3, #7
 8000a52:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000a54:	2303      	movs	r3, #3
 8000a56:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000a58:	2302      	movs	r3, #2
 8000a5a:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000a5c:	2302      	movs	r3, #2
 8000a5e:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000a60:	1d3b      	adds	r3, r7, #4
 8000a62:	4619      	mov	r1, r3
 8000a64:	4805      	ldr	r0, [pc, #20]	; (8000a7c <MX_FMC_Init+0x98>)
 8000a66:	f004 fab3 	bl	8004fd0 <HAL_SDRAM_Init>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000a70:	f000 f934 	bl	8000cdc <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000a74:	bf00      	nop
 8000a76:	3720      	adds	r7, #32
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	200002d8 	.word	0x200002d8
 8000a80:	a0000140 	.word	0xa0000140

08000a84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b08e      	sub	sp, #56	; 0x38
 8000a88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a8e:	2200      	movs	r2, #0
 8000a90:	601a      	str	r2, [r3, #0]
 8000a92:	605a      	str	r2, [r3, #4]
 8000a94:	609a      	str	r2, [r3, #8]
 8000a96:	60da      	str	r2, [r3, #12]
 8000a98:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	623b      	str	r3, [r7, #32]
 8000a9e:	4b7b      	ldr	r3, [pc, #492]	; (8000c8c <MX_GPIO_Init+0x208>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	4a7a      	ldr	r2, [pc, #488]	; (8000c8c <MX_GPIO_Init+0x208>)
 8000aa4:	f043 0304 	orr.w	r3, r3, #4
 8000aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aaa:	4b78      	ldr	r3, [pc, #480]	; (8000c8c <MX_GPIO_Init+0x208>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	f003 0304 	and.w	r3, r3, #4
 8000ab2:	623b      	str	r3, [r7, #32]
 8000ab4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	61fb      	str	r3, [r7, #28]
 8000aba:	4b74      	ldr	r3, [pc, #464]	; (8000c8c <MX_GPIO_Init+0x208>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	4a73      	ldr	r2, [pc, #460]	; (8000c8c <MX_GPIO_Init+0x208>)
 8000ac0:	f043 0320 	orr.w	r3, r3, #32
 8000ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac6:	4b71      	ldr	r3, [pc, #452]	; (8000c8c <MX_GPIO_Init+0x208>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	f003 0320 	and.w	r3, r3, #32
 8000ace:	61fb      	str	r3, [r7, #28]
 8000ad0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	61bb      	str	r3, [r7, #24]
 8000ad6:	4b6d      	ldr	r3, [pc, #436]	; (8000c8c <MX_GPIO_Init+0x208>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	4a6c      	ldr	r2, [pc, #432]	; (8000c8c <MX_GPIO_Init+0x208>)
 8000adc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae2:	4b6a      	ldr	r3, [pc, #424]	; (8000c8c <MX_GPIO_Init+0x208>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000aea:	61bb      	str	r3, [r7, #24]
 8000aec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	617b      	str	r3, [r7, #20]
 8000af2:	4b66      	ldr	r3, [pc, #408]	; (8000c8c <MX_GPIO_Init+0x208>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	4a65      	ldr	r2, [pc, #404]	; (8000c8c <MX_GPIO_Init+0x208>)
 8000af8:	f043 0301 	orr.w	r3, r3, #1
 8000afc:	6313      	str	r3, [r2, #48]	; 0x30
 8000afe:	4b63      	ldr	r3, [pc, #396]	; (8000c8c <MX_GPIO_Init+0x208>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	f003 0301 	and.w	r3, r3, #1
 8000b06:	617b      	str	r3, [r7, #20]
 8000b08:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	613b      	str	r3, [r7, #16]
 8000b0e:	4b5f      	ldr	r3, [pc, #380]	; (8000c8c <MX_GPIO_Init+0x208>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b12:	4a5e      	ldr	r2, [pc, #376]	; (8000c8c <MX_GPIO_Init+0x208>)
 8000b14:	f043 0302 	orr.w	r3, r3, #2
 8000b18:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1a:	4b5c      	ldr	r3, [pc, #368]	; (8000c8c <MX_GPIO_Init+0x208>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	f003 0302 	and.w	r3, r3, #2
 8000b22:	613b      	str	r3, [r7, #16]
 8000b24:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b26:	2300      	movs	r3, #0
 8000b28:	60fb      	str	r3, [r7, #12]
 8000b2a:	4b58      	ldr	r3, [pc, #352]	; (8000c8c <MX_GPIO_Init+0x208>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	4a57      	ldr	r2, [pc, #348]	; (8000c8c <MX_GPIO_Init+0x208>)
 8000b30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b34:	6313      	str	r3, [r2, #48]	; 0x30
 8000b36:	4b55      	ldr	r3, [pc, #340]	; (8000c8c <MX_GPIO_Init+0x208>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b3e:	60fb      	str	r3, [r7, #12]
 8000b40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b42:	2300      	movs	r3, #0
 8000b44:	60bb      	str	r3, [r7, #8]
 8000b46:	4b51      	ldr	r3, [pc, #324]	; (8000c8c <MX_GPIO_Init+0x208>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	4a50      	ldr	r2, [pc, #320]	; (8000c8c <MX_GPIO_Init+0x208>)
 8000b4c:	f043 0310 	orr.w	r3, r3, #16
 8000b50:	6313      	str	r3, [r2, #48]	; 0x30
 8000b52:	4b4e      	ldr	r3, [pc, #312]	; (8000c8c <MX_GPIO_Init+0x208>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	f003 0310 	and.w	r3, r3, #16
 8000b5a:	60bb      	str	r3, [r7, #8]
 8000b5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b5e:	2300      	movs	r3, #0
 8000b60:	607b      	str	r3, [r7, #4]
 8000b62:	4b4a      	ldr	r3, [pc, #296]	; (8000c8c <MX_GPIO_Init+0x208>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	4a49      	ldr	r2, [pc, #292]	; (8000c8c <MX_GPIO_Init+0x208>)
 8000b68:	f043 0308 	orr.w	r3, r3, #8
 8000b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6e:	4b47      	ldr	r3, [pc, #284]	; (8000c8c <MX_GPIO_Init+0x208>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	f003 0308 	and.w	r3, r3, #8
 8000b76:	607b      	str	r3, [r7, #4]
 8000b78:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	2116      	movs	r1, #22
 8000b7e:	4844      	ldr	r0, [pc, #272]	; (8000c90 <MX_GPIO_Init+0x20c>)
 8000b80:	f001 fa50 	bl	8002024 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000b84:	2200      	movs	r2, #0
 8000b86:	2180      	movs	r1, #128	; 0x80
 8000b88:	4842      	ldr	r0, [pc, #264]	; (8000c94 <MX_GPIO_Init+0x210>)
 8000b8a:	f001 fa4b 	bl	8002024 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000b8e:	2200      	movs	r2, #0
 8000b90:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b94:	4840      	ldr	r0, [pc, #256]	; (8000c98 <MX_GPIO_Init+0x214>)
 8000b96:	f001 fa45 	bl	8002024 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000ba0:	483e      	ldr	r0, [pc, #248]	; (8000c9c <MX_GPIO_Init+0x218>)
 8000ba2:	f001 fa3f 	bl	8002024 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8000ba6:	2316      	movs	r3, #22
 8000ba8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000baa:	2301      	movs	r3, #1
 8000bac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bba:	4619      	mov	r1, r3
 8000bbc:	4834      	ldr	r0, [pc, #208]	; (8000c90 <MX_GPIO_Init+0x20c>)
 8000bbe:	f001 f86d 	bl	8001c9c <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000bc2:	f248 0307 	movw	r3, #32775	; 0x8007
 8000bc6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000bc8:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000bcc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	482e      	ldr	r0, [pc, #184]	; (8000c94 <MX_GPIO_Init+0x210>)
 8000bda:	f001 f85f 	bl	8001c9c <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000bde:	2380      	movs	r3, #128	; 0x80
 8000be0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be2:	2301      	movs	r3, #1
 8000be4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be6:	2300      	movs	r3, #0
 8000be8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bea:	2300      	movs	r3, #0
 8000bec:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000bee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	4827      	ldr	r0, [pc, #156]	; (8000c94 <MX_GPIO_Init+0x210>)
 8000bf6:	f001 f851 	bl	8001c9c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000bfa:	2320      	movs	r3, #32
 8000bfc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000bfe:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000c02:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c04:	2300      	movs	r3, #0
 8000c06:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000c08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	4820      	ldr	r0, [pc, #128]	; (8000c90 <MX_GPIO_Init+0x20c>)
 8000c10:	f001 f844 	bl	8001c9c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000c14:	2304      	movs	r3, #4
 8000c16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000c20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c24:	4619      	mov	r1, r3
 8000c26:	481e      	ldr	r0, [pc, #120]	; (8000ca0 <MX_GPIO_Init+0x21c>)
 8000c28:	f001 f838 	bl	8001c9c <HAL_GPIO_Init>

  /*Configure GPIO pins : TE_Pin PD13 */
  GPIO_InitStruct.Pin = TE_Pin|GPIO_PIN_13;
 8000c2c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000c30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c32:	2300      	movs	r3, #0
 8000c34:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c36:	2300      	movs	r3, #0
 8000c38:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c3e:	4619      	mov	r1, r3
 8000c40:	4815      	ldr	r0, [pc, #84]	; (8000c98 <MX_GPIO_Init+0x214>)
 8000c42:	f001 f82b 	bl	8001c9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000c46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c4a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c50:	2300      	movs	r3, #0
 8000c52:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c54:	2300      	movs	r3, #0
 8000c56:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	480e      	ldr	r0, [pc, #56]	; (8000c98 <MX_GPIO_Init+0x214>)
 8000c60:	f001 f81c 	bl	8001c9c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000c64:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000c68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c72:	2300      	movs	r3, #0
 8000c74:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	4807      	ldr	r0, [pc, #28]	; (8000c9c <MX_GPIO_Init+0x218>)
 8000c7e:	f001 f80d 	bl	8001c9c <HAL_GPIO_Init>

}
 8000c82:	bf00      	nop
 8000c84:	3738      	adds	r7, #56	; 0x38
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	40023800 	.word	0x40023800
 8000c90:	40020800 	.word	0x40020800
 8000c94:	40020000 	.word	0x40020000
 8000c98:	40020c00 	.word	0x40020c00
 8000c9c:	40021800 	.word	0x40021800
 8000ca0:	40020400 	.word	0x40020400

08000ca4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8000cac:	f00a fd64 	bl	800b778 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000cb0:	2001      	movs	r0, #1
 8000cb2:	f008 fcf9 	bl	80096a8 <osDelay>
 8000cb6:	e7fb      	b.n	8000cb0 <StartDefaultTask+0xc>

08000cb8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a04      	ldr	r2, [pc, #16]	; (8000cd8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d101      	bne.n	8000cce <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000cca:	f000 fcb9 	bl	8001640 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000cce:	bf00      	nop
 8000cd0:	3708      	adds	r7, #8
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	40001000 	.word	0x40001000

08000cdc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ce0:	b672      	cpsid	i
}
 8000ce2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ce4:	e7fe      	b.n	8000ce4 <Error_Handler+0x8>
	...

08000ce8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cee:	2300      	movs	r3, #0
 8000cf0:	607b      	str	r3, [r7, #4]
 8000cf2:	4b12      	ldr	r3, [pc, #72]	; (8000d3c <HAL_MspInit+0x54>)
 8000cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cf6:	4a11      	ldr	r2, [pc, #68]	; (8000d3c <HAL_MspInit+0x54>)
 8000cf8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cfc:	6453      	str	r3, [r2, #68]	; 0x44
 8000cfe:	4b0f      	ldr	r3, [pc, #60]	; (8000d3c <HAL_MspInit+0x54>)
 8000d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d06:	607b      	str	r3, [r7, #4]
 8000d08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	603b      	str	r3, [r7, #0]
 8000d0e:	4b0b      	ldr	r3, [pc, #44]	; (8000d3c <HAL_MspInit+0x54>)
 8000d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d12:	4a0a      	ldr	r2, [pc, #40]	; (8000d3c <HAL_MspInit+0x54>)
 8000d14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d18:	6413      	str	r3, [r2, #64]	; 0x40
 8000d1a:	4b08      	ldr	r3, [pc, #32]	; (8000d3c <HAL_MspInit+0x54>)
 8000d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d22:	603b      	str	r3, [r7, #0]
 8000d24:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d26:	2200      	movs	r2, #0
 8000d28:	210f      	movs	r1, #15
 8000d2a:	f06f 0001 	mvn.w	r0, #1
 8000d2e:	f000 fd83 	bl	8001838 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d32:	bf00      	nop
 8000d34:	3708      	adds	r7, #8
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	40023800 	.word	0x40023800

08000d40 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b085      	sub	sp, #20
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a0b      	ldr	r2, [pc, #44]	; (8000d7c <HAL_CRC_MspInit+0x3c>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d10d      	bne.n	8000d6e <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000d52:	2300      	movs	r3, #0
 8000d54:	60fb      	str	r3, [r7, #12]
 8000d56:	4b0a      	ldr	r3, [pc, #40]	; (8000d80 <HAL_CRC_MspInit+0x40>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5a:	4a09      	ldr	r2, [pc, #36]	; (8000d80 <HAL_CRC_MspInit+0x40>)
 8000d5c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d60:	6313      	str	r3, [r2, #48]	; 0x30
 8000d62:	4b07      	ldr	r3, [pc, #28]	; (8000d80 <HAL_CRC_MspInit+0x40>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d66:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d6a:	60fb      	str	r3, [r7, #12]
 8000d6c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000d6e:	bf00      	nop
 8000d70:	3714      	adds	r7, #20
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	40023000 	.word	0x40023000
 8000d80:	40023800 	.word	0x40023800

08000d84 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b084      	sub	sp, #16
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a0e      	ldr	r2, [pc, #56]	; (8000dcc <HAL_DMA2D_MspInit+0x48>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d115      	bne.n	8000dc2 <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000d96:	2300      	movs	r3, #0
 8000d98:	60fb      	str	r3, [r7, #12]
 8000d9a:	4b0d      	ldr	r3, [pc, #52]	; (8000dd0 <HAL_DMA2D_MspInit+0x4c>)
 8000d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9e:	4a0c      	ldr	r2, [pc, #48]	; (8000dd0 <HAL_DMA2D_MspInit+0x4c>)
 8000da0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000da4:	6313      	str	r3, [r2, #48]	; 0x30
 8000da6:	4b0a      	ldr	r3, [pc, #40]	; (8000dd0 <HAL_DMA2D_MspInit+0x4c>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000daa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000dae:	60fb      	str	r3, [r7, #12]
 8000db0:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000db2:	2200      	movs	r2, #0
 8000db4:	2105      	movs	r1, #5
 8000db6:	205a      	movs	r0, #90	; 0x5a
 8000db8:	f000 fd3e 	bl	8001838 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000dbc:	205a      	movs	r0, #90	; 0x5a
 8000dbe:	f000 fd57 	bl	8001870 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8000dc2:	bf00      	nop
 8000dc4:	3710      	adds	r7, #16
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	4002b000 	.word	0x4002b000
 8000dd0:	40023800 	.word	0x40023800

08000dd4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b08a      	sub	sp, #40	; 0x28
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ddc:	f107 0314 	add.w	r3, r7, #20
 8000de0:	2200      	movs	r2, #0
 8000de2:	601a      	str	r2, [r3, #0]
 8000de4:	605a      	str	r2, [r3, #4]
 8000de6:	609a      	str	r2, [r3, #8]
 8000de8:	60da      	str	r2, [r3, #12]
 8000dea:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a29      	ldr	r2, [pc, #164]	; (8000e98 <HAL_I2C_MspInit+0xc4>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d14b      	bne.n	8000e8e <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000df6:	2300      	movs	r3, #0
 8000df8:	613b      	str	r3, [r7, #16]
 8000dfa:	4b28      	ldr	r3, [pc, #160]	; (8000e9c <HAL_I2C_MspInit+0xc8>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfe:	4a27      	ldr	r2, [pc, #156]	; (8000e9c <HAL_I2C_MspInit+0xc8>)
 8000e00:	f043 0304 	orr.w	r3, r3, #4
 8000e04:	6313      	str	r3, [r2, #48]	; 0x30
 8000e06:	4b25      	ldr	r3, [pc, #148]	; (8000e9c <HAL_I2C_MspInit+0xc8>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0a:	f003 0304 	and.w	r3, r3, #4
 8000e0e:	613b      	str	r3, [r7, #16]
 8000e10:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e12:	2300      	movs	r3, #0
 8000e14:	60fb      	str	r3, [r7, #12]
 8000e16:	4b21      	ldr	r3, [pc, #132]	; (8000e9c <HAL_I2C_MspInit+0xc8>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1a:	4a20      	ldr	r2, [pc, #128]	; (8000e9c <HAL_I2C_MspInit+0xc8>)
 8000e1c:	f043 0301 	orr.w	r3, r3, #1
 8000e20:	6313      	str	r3, [r2, #48]	; 0x30
 8000e22:	4b1e      	ldr	r3, [pc, #120]	; (8000e9c <HAL_I2C_MspInit+0xc8>)
 8000e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e26:	f003 0301 	and.w	r3, r3, #1
 8000e2a:	60fb      	str	r3, [r7, #12]
 8000e2c:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000e2e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e34:	2312      	movs	r3, #18
 8000e36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e38:	2301      	movs	r3, #1
 8000e3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000e40:	2304      	movs	r3, #4
 8000e42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000e44:	f107 0314 	add.w	r3, r7, #20
 8000e48:	4619      	mov	r1, r3
 8000e4a:	4815      	ldr	r0, [pc, #84]	; (8000ea0 <HAL_I2C_MspInit+0xcc>)
 8000e4c:	f000 ff26 	bl	8001c9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000e50:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e56:	2312      	movs	r3, #18
 8000e58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000e62:	2304      	movs	r3, #4
 8000e64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000e66:	f107 0314 	add.w	r3, r7, #20
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	480d      	ldr	r0, [pc, #52]	; (8000ea4 <HAL_I2C_MspInit+0xd0>)
 8000e6e:	f000 ff15 	bl	8001c9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000e72:	2300      	movs	r3, #0
 8000e74:	60bb      	str	r3, [r7, #8]
 8000e76:	4b09      	ldr	r3, [pc, #36]	; (8000e9c <HAL_I2C_MspInit+0xc8>)
 8000e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e7a:	4a08      	ldr	r2, [pc, #32]	; (8000e9c <HAL_I2C_MspInit+0xc8>)
 8000e7c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000e80:	6413      	str	r3, [r2, #64]	; 0x40
 8000e82:	4b06      	ldr	r3, [pc, #24]	; (8000e9c <HAL_I2C_MspInit+0xc8>)
 8000e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e86:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000e8a:	60bb      	str	r3, [r7, #8]
 8000e8c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000e8e:	bf00      	nop
 8000e90:	3728      	adds	r7, #40	; 0x28
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	40005c00 	.word	0x40005c00
 8000e9c:	40023800 	.word	0x40023800
 8000ea0:	40020800 	.word	0x40020800
 8000ea4:	40020000 	.word	0x40020000

08000ea8 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b09a      	sub	sp, #104	; 0x68
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	601a      	str	r2, [r3, #0]
 8000eb8:	605a      	str	r2, [r3, #4]
 8000eba:	609a      	str	r2, [r3, #8]
 8000ebc:	60da      	str	r2, [r3, #12]
 8000ebe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ec0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ec4:	2230      	movs	r2, #48	; 0x30
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f00a ffa5 	bl	800be18 <memset>
  if(hltdc->Instance==LTDC)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4a85      	ldr	r2, [pc, #532]	; (80010e8 <HAL_LTDC_MspInit+0x240>)
 8000ed4:	4293      	cmp	r3, r2
 8000ed6:	f040 8102 	bne.w	80010de <HAL_LTDC_MspInit+0x236>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000eda:	2308      	movs	r3, #8
 8000edc:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8000ede:	2332      	movs	r3, #50	; 0x32
 8000ee0:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8000ee2:	2302      	movs	r3, #2
 8000ee4:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000eea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f003 feae 	bl	8004c50 <HAL_RCCEx_PeriphCLKConfig>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 8000efa:	f7ff feef 	bl	8000cdc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000efe:	2300      	movs	r3, #0
 8000f00:	623b      	str	r3, [r7, #32]
 8000f02:	4b7a      	ldr	r3, [pc, #488]	; (80010ec <HAL_LTDC_MspInit+0x244>)
 8000f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f06:	4a79      	ldr	r2, [pc, #484]	; (80010ec <HAL_LTDC_MspInit+0x244>)
 8000f08:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000f0c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f0e:	4b77      	ldr	r3, [pc, #476]	; (80010ec <HAL_LTDC_MspInit+0x244>)
 8000f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f12:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000f16:	623b      	str	r3, [r7, #32]
 8000f18:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	61fb      	str	r3, [r7, #28]
 8000f1e:	4b73      	ldr	r3, [pc, #460]	; (80010ec <HAL_LTDC_MspInit+0x244>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f22:	4a72      	ldr	r2, [pc, #456]	; (80010ec <HAL_LTDC_MspInit+0x244>)
 8000f24:	f043 0320 	orr.w	r3, r3, #32
 8000f28:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2a:	4b70      	ldr	r3, [pc, #448]	; (80010ec <HAL_LTDC_MspInit+0x244>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2e:	f003 0320 	and.w	r3, r3, #32
 8000f32:	61fb      	str	r3, [r7, #28]
 8000f34:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f36:	2300      	movs	r3, #0
 8000f38:	61bb      	str	r3, [r7, #24]
 8000f3a:	4b6c      	ldr	r3, [pc, #432]	; (80010ec <HAL_LTDC_MspInit+0x244>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	4a6b      	ldr	r2, [pc, #428]	; (80010ec <HAL_LTDC_MspInit+0x244>)
 8000f40:	f043 0301 	orr.w	r3, r3, #1
 8000f44:	6313      	str	r3, [r2, #48]	; 0x30
 8000f46:	4b69      	ldr	r3, [pc, #420]	; (80010ec <HAL_LTDC_MspInit+0x244>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4a:	f003 0301 	and.w	r3, r3, #1
 8000f4e:	61bb      	str	r3, [r7, #24]
 8000f50:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f52:	2300      	movs	r3, #0
 8000f54:	617b      	str	r3, [r7, #20]
 8000f56:	4b65      	ldr	r3, [pc, #404]	; (80010ec <HAL_LTDC_MspInit+0x244>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5a:	4a64      	ldr	r2, [pc, #400]	; (80010ec <HAL_LTDC_MspInit+0x244>)
 8000f5c:	f043 0302 	orr.w	r3, r3, #2
 8000f60:	6313      	str	r3, [r2, #48]	; 0x30
 8000f62:	4b62      	ldr	r3, [pc, #392]	; (80010ec <HAL_LTDC_MspInit+0x244>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f66:	f003 0302 	and.w	r3, r3, #2
 8000f6a:	617b      	str	r3, [r7, #20]
 8000f6c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f6e:	2300      	movs	r3, #0
 8000f70:	613b      	str	r3, [r7, #16]
 8000f72:	4b5e      	ldr	r3, [pc, #376]	; (80010ec <HAL_LTDC_MspInit+0x244>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f76:	4a5d      	ldr	r2, [pc, #372]	; (80010ec <HAL_LTDC_MspInit+0x244>)
 8000f78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f7e:	4b5b      	ldr	r3, [pc, #364]	; (80010ec <HAL_LTDC_MspInit+0x244>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f86:	613b      	str	r3, [r7, #16]
 8000f88:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	60fb      	str	r3, [r7, #12]
 8000f8e:	4b57      	ldr	r3, [pc, #348]	; (80010ec <HAL_LTDC_MspInit+0x244>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f92:	4a56      	ldr	r2, [pc, #344]	; (80010ec <HAL_LTDC_MspInit+0x244>)
 8000f94:	f043 0304 	orr.w	r3, r3, #4
 8000f98:	6313      	str	r3, [r2, #48]	; 0x30
 8000f9a:	4b54      	ldr	r3, [pc, #336]	; (80010ec <HAL_LTDC_MspInit+0x244>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9e:	f003 0304 	and.w	r3, r3, #4
 8000fa2:	60fb      	str	r3, [r7, #12]
 8000fa4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	60bb      	str	r3, [r7, #8]
 8000faa:	4b50      	ldr	r3, [pc, #320]	; (80010ec <HAL_LTDC_MspInit+0x244>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fae:	4a4f      	ldr	r2, [pc, #316]	; (80010ec <HAL_LTDC_MspInit+0x244>)
 8000fb0:	f043 0308 	orr.w	r3, r3, #8
 8000fb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fb6:	4b4d      	ldr	r3, [pc, #308]	; (80010ec <HAL_LTDC_MspInit+0x244>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fba:	f003 0308 	and.w	r3, r3, #8
 8000fbe:	60bb      	str	r3, [r7, #8]
 8000fc0:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8000fc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fc6:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc8:	2302      	movs	r3, #2
 8000fca:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000fd4:	230e      	movs	r3, #14
 8000fd6:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000fd8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000fdc:	4619      	mov	r1, r3
 8000fde:	4844      	ldr	r0, [pc, #272]	; (80010f0 <HAL_LTDC_MspInit+0x248>)
 8000fe0:	f000 fe5c 	bl	8001c9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8000fe4:	f641 0358 	movw	r3, #6232	; 0x1858
 8000fe8:	657b      	str	r3, [r7, #84]	; 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fea:	2302      	movs	r3, #2
 8000fec:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000ff6:	230e      	movs	r3, #14
 8000ff8:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ffa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000ffe:	4619      	mov	r1, r3
 8001000:	483c      	ldr	r0, [pc, #240]	; (80010f4 <HAL_LTDC_MspInit+0x24c>)
 8001002:	f000 fe4b 	bl	8001c9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8001006:	2303      	movs	r3, #3
 8001008:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800100a:	2302      	movs	r3, #2
 800100c:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100e:	2300      	movs	r3, #0
 8001010:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001012:	2300      	movs	r3, #0
 8001014:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001016:	2309      	movs	r3, #9
 8001018:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800101a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800101e:	4619      	mov	r1, r3
 8001020:	4835      	ldr	r0, [pc, #212]	; (80010f8 <HAL_LTDC_MspInit+0x250>)
 8001022:	f000 fe3b 	bl	8001c9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8001026:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800102a:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102c:	2302      	movs	r3, #2
 800102e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001030:	2300      	movs	r3, #0
 8001032:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001034:	2300      	movs	r3, #0
 8001036:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001038:	230e      	movs	r3, #14
 800103a:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800103c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001040:	4619      	mov	r1, r3
 8001042:	482d      	ldr	r0, [pc, #180]	; (80010f8 <HAL_LTDC_MspInit+0x250>)
 8001044:	f000 fe2a 	bl	8001c9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8001048:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 800104c:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800104e:	2302      	movs	r3, #2
 8001050:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001052:	2300      	movs	r3, #0
 8001054:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001056:	2300      	movs	r3, #0
 8001058:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800105a:	230e      	movs	r3, #14
 800105c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800105e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001062:	4619      	mov	r1, r3
 8001064:	4825      	ldr	r0, [pc, #148]	; (80010fc <HAL_LTDC_MspInit+0x254>)
 8001066:	f000 fe19 	bl	8001c9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 800106a:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 800106e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001070:	2302      	movs	r3, #2
 8001072:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001074:	2300      	movs	r3, #0
 8001076:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001078:	2300      	movs	r3, #0
 800107a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800107c:	230e      	movs	r3, #14
 800107e:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001080:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001084:	4619      	mov	r1, r3
 8001086:	481e      	ldr	r0, [pc, #120]	; (8001100 <HAL_LTDC_MspInit+0x258>)
 8001088:	f000 fe08 	bl	8001c9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 800108c:	2348      	movs	r3, #72	; 0x48
 800108e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001090:	2302      	movs	r3, #2
 8001092:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001094:	2300      	movs	r3, #0
 8001096:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001098:	2300      	movs	r3, #0
 800109a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800109c:	230e      	movs	r3, #14
 800109e:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010a0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80010a4:	4619      	mov	r1, r3
 80010a6:	4817      	ldr	r0, [pc, #92]	; (8001104 <HAL_LTDC_MspInit+0x25c>)
 80010a8:	f000 fdf8 	bl	8001c9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 80010ac:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80010b0:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b2:	2302      	movs	r3, #2
 80010b4:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b6:	2300      	movs	r3, #0
 80010b8:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ba:	2300      	movs	r3, #0
 80010bc:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80010be:	2309      	movs	r3, #9
 80010c0:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010c2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80010c6:	4619      	mov	r1, r3
 80010c8:	480c      	ldr	r0, [pc, #48]	; (80010fc <HAL_LTDC_MspInit+0x254>)
 80010ca:	f000 fde7 	bl	8001c9c <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 80010ce:	2200      	movs	r2, #0
 80010d0:	2105      	movs	r1, #5
 80010d2:	2058      	movs	r0, #88	; 0x58
 80010d4:	f000 fbb0 	bl	8001838 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80010d8:	2058      	movs	r0, #88	; 0x58
 80010da:	f000 fbc9 	bl	8001870 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80010de:	bf00      	nop
 80010e0:	3768      	adds	r7, #104	; 0x68
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	40016800 	.word	0x40016800
 80010ec:	40023800 	.word	0x40023800
 80010f0:	40021400 	.word	0x40021400
 80010f4:	40020000 	.word	0x40020000
 80010f8:	40020400 	.word	0x40020400
 80010fc:	40021800 	.word	0x40021800
 8001100:	40020800 	.word	0x40020800
 8001104:	40020c00 	.word	0x40020c00

08001108 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b08a      	sub	sp, #40	; 0x28
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001110:	f107 0314 	add.w	r3, r7, #20
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	60da      	str	r2, [r3, #12]
 800111e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a19      	ldr	r2, [pc, #100]	; (800118c <HAL_SPI_MspInit+0x84>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d12c      	bne.n	8001184 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 800112a:	2300      	movs	r3, #0
 800112c:	613b      	str	r3, [r7, #16]
 800112e:	4b18      	ldr	r3, [pc, #96]	; (8001190 <HAL_SPI_MspInit+0x88>)
 8001130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001132:	4a17      	ldr	r2, [pc, #92]	; (8001190 <HAL_SPI_MspInit+0x88>)
 8001134:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001138:	6453      	str	r3, [r2, #68]	; 0x44
 800113a:	4b15      	ldr	r3, [pc, #84]	; (8001190 <HAL_SPI_MspInit+0x88>)
 800113c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800113e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001142:	613b      	str	r3, [r7, #16]
 8001144:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001146:	2300      	movs	r3, #0
 8001148:	60fb      	str	r3, [r7, #12]
 800114a:	4b11      	ldr	r3, [pc, #68]	; (8001190 <HAL_SPI_MspInit+0x88>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114e:	4a10      	ldr	r2, [pc, #64]	; (8001190 <HAL_SPI_MspInit+0x88>)
 8001150:	f043 0320 	orr.w	r3, r3, #32
 8001154:	6313      	str	r3, [r2, #48]	; 0x30
 8001156:	4b0e      	ldr	r3, [pc, #56]	; (8001190 <HAL_SPI_MspInit+0x88>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115a:	f003 0320 	and.w	r3, r3, #32
 800115e:	60fb      	str	r3, [r7, #12]
 8001160:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8001162:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001166:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001168:	2302      	movs	r3, #2
 800116a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116c:	2300      	movs	r3, #0
 800116e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001170:	2300      	movs	r3, #0
 8001172:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001174:	2305      	movs	r3, #5
 8001176:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001178:	f107 0314 	add.w	r3, r7, #20
 800117c:	4619      	mov	r1, r3
 800117e:	4805      	ldr	r0, [pc, #20]	; (8001194 <HAL_SPI_MspInit+0x8c>)
 8001180:	f000 fd8c 	bl	8001c9c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8001184:	bf00      	nop
 8001186:	3728      	adds	r7, #40	; 0x28
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	40015000 	.word	0x40015000
 8001190:	40023800 	.word	0x40023800
 8001194:	40021400 	.word	0x40021400

08001198 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001198:	b480      	push	{r7}
 800119a:	b085      	sub	sp, #20
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a0b      	ldr	r2, [pc, #44]	; (80011d4 <HAL_TIM_Base_MspInit+0x3c>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d10d      	bne.n	80011c6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80011aa:	2300      	movs	r3, #0
 80011ac:	60fb      	str	r3, [r7, #12]
 80011ae:	4b0a      	ldr	r3, [pc, #40]	; (80011d8 <HAL_TIM_Base_MspInit+0x40>)
 80011b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011b2:	4a09      	ldr	r2, [pc, #36]	; (80011d8 <HAL_TIM_Base_MspInit+0x40>)
 80011b4:	f043 0301 	orr.w	r3, r3, #1
 80011b8:	6453      	str	r3, [r2, #68]	; 0x44
 80011ba:	4b07      	ldr	r3, [pc, #28]	; (80011d8 <HAL_TIM_Base_MspInit+0x40>)
 80011bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011be:	f003 0301 	and.w	r3, r3, #1
 80011c2:	60fb      	str	r3, [r7, #12]
 80011c4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80011c6:	bf00      	nop
 80011c8:	3714      	adds	r7, #20
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	40010000 	.word	0x40010000
 80011d8:	40023800 	.word	0x40023800

080011dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b08a      	sub	sp, #40	; 0x28
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e4:	f107 0314 	add.w	r3, r7, #20
 80011e8:	2200      	movs	r2, #0
 80011ea:	601a      	str	r2, [r3, #0]
 80011ec:	605a      	str	r2, [r3, #4]
 80011ee:	609a      	str	r2, [r3, #8]
 80011f0:	60da      	str	r2, [r3, #12]
 80011f2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a19      	ldr	r2, [pc, #100]	; (8001260 <HAL_UART_MspInit+0x84>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d12c      	bne.n	8001258 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80011fe:	2300      	movs	r3, #0
 8001200:	613b      	str	r3, [r7, #16]
 8001202:	4b18      	ldr	r3, [pc, #96]	; (8001264 <HAL_UART_MspInit+0x88>)
 8001204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001206:	4a17      	ldr	r2, [pc, #92]	; (8001264 <HAL_UART_MspInit+0x88>)
 8001208:	f043 0310 	orr.w	r3, r3, #16
 800120c:	6453      	str	r3, [r2, #68]	; 0x44
 800120e:	4b15      	ldr	r3, [pc, #84]	; (8001264 <HAL_UART_MspInit+0x88>)
 8001210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001212:	f003 0310 	and.w	r3, r3, #16
 8001216:	613b      	str	r3, [r7, #16]
 8001218:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800121a:	2300      	movs	r3, #0
 800121c:	60fb      	str	r3, [r7, #12]
 800121e:	4b11      	ldr	r3, [pc, #68]	; (8001264 <HAL_UART_MspInit+0x88>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001222:	4a10      	ldr	r2, [pc, #64]	; (8001264 <HAL_UART_MspInit+0x88>)
 8001224:	f043 0301 	orr.w	r3, r3, #1
 8001228:	6313      	str	r3, [r2, #48]	; 0x30
 800122a:	4b0e      	ldr	r3, [pc, #56]	; (8001264 <HAL_UART_MspInit+0x88>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122e:	f003 0301 	and.w	r3, r3, #1
 8001232:	60fb      	str	r3, [r7, #12]
 8001234:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001236:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800123a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800123c:	2302      	movs	r3, #2
 800123e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001240:	2300      	movs	r3, #0
 8001242:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001244:	2303      	movs	r3, #3
 8001246:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001248:	2307      	movs	r3, #7
 800124a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800124c:	f107 0314 	add.w	r3, r7, #20
 8001250:	4619      	mov	r1, r3
 8001252:	4805      	ldr	r0, [pc, #20]	; (8001268 <HAL_UART_MspInit+0x8c>)
 8001254:	f000 fd22 	bl	8001c9c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001258:	bf00      	nop
 800125a:	3728      	adds	r7, #40	; 0x28
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	40011000 	.word	0x40011000
 8001264:	40023800 	.word	0x40023800
 8001268:	40020000 	.word	0x40020000

0800126c <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800126c:	b580      	push	{r7, lr}
 800126e:	b086      	sub	sp, #24
 8001270:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001272:	1d3b      	adds	r3, r7, #4
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]
 8001278:	605a      	str	r2, [r3, #4]
 800127a:	609a      	str	r2, [r3, #8]
 800127c:	60da      	str	r2, [r3, #12]
 800127e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001280:	4b3b      	ldr	r3, [pc, #236]	; (8001370 <HAL_FMC_MspInit+0x104>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d16f      	bne.n	8001368 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8001288:	4b39      	ldr	r3, [pc, #228]	; (8001370 <HAL_FMC_MspInit+0x104>)
 800128a:	2201      	movs	r2, #1
 800128c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800128e:	2300      	movs	r3, #0
 8001290:	603b      	str	r3, [r7, #0]
 8001292:	4b38      	ldr	r3, [pc, #224]	; (8001374 <HAL_FMC_MspInit+0x108>)
 8001294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001296:	4a37      	ldr	r2, [pc, #220]	; (8001374 <HAL_FMC_MspInit+0x108>)
 8001298:	f043 0301 	orr.w	r3, r3, #1
 800129c:	6393      	str	r3, [r2, #56]	; 0x38
 800129e:	4b35      	ldr	r3, [pc, #212]	; (8001374 <HAL_FMC_MspInit+0x108>)
 80012a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012a2:	f003 0301 	and.w	r3, r3, #1
 80012a6:	603b      	str	r3, [r7, #0]
 80012a8:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 80012aa:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80012ae:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b0:	2302      	movs	r3, #2
 80012b2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b4:	2300      	movs	r3, #0
 80012b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012b8:	2303      	movs	r3, #3
 80012ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80012bc:	230c      	movs	r3, #12
 80012be:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80012c0:	1d3b      	adds	r3, r7, #4
 80012c2:	4619      	mov	r1, r3
 80012c4:	482c      	ldr	r0, [pc, #176]	; (8001378 <HAL_FMC_MspInit+0x10c>)
 80012c6:	f000 fce9 	bl	8001c9c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 80012ca:	2301      	movs	r3, #1
 80012cc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ce:	2302      	movs	r3, #2
 80012d0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d2:	2300      	movs	r3, #0
 80012d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012d6:	2303      	movs	r3, #3
 80012d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80012da:	230c      	movs	r3, #12
 80012dc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 80012de:	1d3b      	adds	r3, r7, #4
 80012e0:	4619      	mov	r1, r3
 80012e2:	4826      	ldr	r0, [pc, #152]	; (800137c <HAL_FMC_MspInit+0x110>)
 80012e4:	f000 fcda 	bl	8001c9c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 80012e8:	f248 1333 	movw	r3, #33075	; 0x8133
 80012ec:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ee:	2302      	movs	r3, #2
 80012f0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f2:	2300      	movs	r3, #0
 80012f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012f6:	2303      	movs	r3, #3
 80012f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80012fa:	230c      	movs	r3, #12
 80012fc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012fe:	1d3b      	adds	r3, r7, #4
 8001300:	4619      	mov	r1, r3
 8001302:	481f      	ldr	r0, [pc, #124]	; (8001380 <HAL_FMC_MspInit+0x114>)
 8001304:	f000 fcca 	bl	8001c9c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8001308:	f64f 7383 	movw	r3, #65411	; 0xff83
 800130c:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800130e:	2302      	movs	r3, #2
 8001310:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001312:	2300      	movs	r3, #0
 8001314:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001316:	2303      	movs	r3, #3
 8001318:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800131a:	230c      	movs	r3, #12
 800131c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800131e:	1d3b      	adds	r3, r7, #4
 8001320:	4619      	mov	r1, r3
 8001322:	4818      	ldr	r0, [pc, #96]	; (8001384 <HAL_FMC_MspInit+0x118>)
 8001324:	f000 fcba 	bl	8001c9c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8001328:	f24c 7303 	movw	r3, #50947	; 0xc703
 800132c:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800132e:	2302      	movs	r3, #2
 8001330:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001332:	2300      	movs	r3, #0
 8001334:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001336:	2303      	movs	r3, #3
 8001338:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800133a:	230c      	movs	r3, #12
 800133c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800133e:	1d3b      	adds	r3, r7, #4
 8001340:	4619      	mov	r1, r3
 8001342:	4811      	ldr	r0, [pc, #68]	; (8001388 <HAL_FMC_MspInit+0x11c>)
 8001344:	f000 fcaa 	bl	8001c9c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8001348:	2360      	movs	r3, #96	; 0x60
 800134a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134c:	2302      	movs	r3, #2
 800134e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001350:	2300      	movs	r3, #0
 8001352:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001354:	2303      	movs	r3, #3
 8001356:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001358:	230c      	movs	r3, #12
 800135a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800135c:	1d3b      	adds	r3, r7, #4
 800135e:	4619      	mov	r1, r3
 8001360:	480a      	ldr	r0, [pc, #40]	; (800138c <HAL_FMC_MspInit+0x120>)
 8001362:	f000 fc9b 	bl	8001c9c <HAL_GPIO_Init>
 8001366:	e000      	b.n	800136a <HAL_FMC_MspInit+0xfe>
    return;
 8001368:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800136a:	3718      	adds	r7, #24
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	20000310 	.word	0x20000310
 8001374:	40023800 	.word	0x40023800
 8001378:	40021400 	.word	0x40021400
 800137c:	40020800 	.word	0x40020800
 8001380:	40021800 	.word	0x40021800
 8001384:	40021000 	.word	0x40021000
 8001388:	40020c00 	.word	0x40020c00
 800138c:	40020400 	.word	0x40020400

08001390 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001398:	f7ff ff68 	bl	800126c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800139c:	bf00      	nop
 800139e:	3708      	adds	r7, #8
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}

080013a4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b08e      	sub	sp, #56	; 0x38
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80013ac:	2300      	movs	r3, #0
 80013ae:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80013b0:	2300      	movs	r3, #0
 80013b2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80013b4:	2300      	movs	r3, #0
 80013b6:	60fb      	str	r3, [r7, #12]
 80013b8:	4b33      	ldr	r3, [pc, #204]	; (8001488 <HAL_InitTick+0xe4>)
 80013ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013bc:	4a32      	ldr	r2, [pc, #200]	; (8001488 <HAL_InitTick+0xe4>)
 80013be:	f043 0310 	orr.w	r3, r3, #16
 80013c2:	6413      	str	r3, [r2, #64]	; 0x40
 80013c4:	4b30      	ldr	r3, [pc, #192]	; (8001488 <HAL_InitTick+0xe4>)
 80013c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c8:	f003 0310 	and.w	r3, r3, #16
 80013cc:	60fb      	str	r3, [r7, #12]
 80013ce:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80013d0:	f107 0210 	add.w	r2, r7, #16
 80013d4:	f107 0314 	add.w	r3, r7, #20
 80013d8:	4611      	mov	r1, r2
 80013da:	4618      	mov	r0, r3
 80013dc:	f003 fc06 	bl	8004bec <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80013e0:	6a3b      	ldr	r3, [r7, #32]
 80013e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80013e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d103      	bne.n	80013f2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80013ea:	f003 fbd7 	bl	8004b9c <HAL_RCC_GetPCLK1Freq>
 80013ee:	6378      	str	r0, [r7, #52]	; 0x34
 80013f0:	e004      	b.n	80013fc <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80013f2:	f003 fbd3 	bl	8004b9c <HAL_RCC_GetPCLK1Freq>
 80013f6:	4603      	mov	r3, r0
 80013f8:	005b      	lsls	r3, r3, #1
 80013fa:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80013fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013fe:	4a23      	ldr	r2, [pc, #140]	; (800148c <HAL_InitTick+0xe8>)
 8001400:	fba2 2303 	umull	r2, r3, r2, r3
 8001404:	0c9b      	lsrs	r3, r3, #18
 8001406:	3b01      	subs	r3, #1
 8001408:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800140a:	4b21      	ldr	r3, [pc, #132]	; (8001490 <HAL_InitTick+0xec>)
 800140c:	4a21      	ldr	r2, [pc, #132]	; (8001494 <HAL_InitTick+0xf0>)
 800140e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001410:	4b1f      	ldr	r3, [pc, #124]	; (8001490 <HAL_InitTick+0xec>)
 8001412:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001416:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001418:	4a1d      	ldr	r2, [pc, #116]	; (8001490 <HAL_InitTick+0xec>)
 800141a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800141c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800141e:	4b1c      	ldr	r3, [pc, #112]	; (8001490 <HAL_InitTick+0xec>)
 8001420:	2200      	movs	r2, #0
 8001422:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001424:	4b1a      	ldr	r3, [pc, #104]	; (8001490 <HAL_InitTick+0xec>)
 8001426:	2200      	movs	r2, #0
 8001428:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800142a:	4b19      	ldr	r3, [pc, #100]	; (8001490 <HAL_InitTick+0xec>)
 800142c:	2200      	movs	r2, #0
 800142e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001430:	4817      	ldr	r0, [pc, #92]	; (8001490 <HAL_InitTick+0xec>)
 8001432:	f003 fe8a 	bl	800514a <HAL_TIM_Base_Init>
 8001436:	4603      	mov	r3, r0
 8001438:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800143c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001440:	2b00      	cmp	r3, #0
 8001442:	d11b      	bne.n	800147c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001444:	4812      	ldr	r0, [pc, #72]	; (8001490 <HAL_InitTick+0xec>)
 8001446:	f003 fecf 	bl	80051e8 <HAL_TIM_Base_Start_IT>
 800144a:	4603      	mov	r3, r0
 800144c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001450:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001454:	2b00      	cmp	r3, #0
 8001456:	d111      	bne.n	800147c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001458:	2036      	movs	r0, #54	; 0x36
 800145a:	f000 fa09 	bl	8001870 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2b0f      	cmp	r3, #15
 8001462:	d808      	bhi.n	8001476 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001464:	2200      	movs	r2, #0
 8001466:	6879      	ldr	r1, [r7, #4]
 8001468:	2036      	movs	r0, #54	; 0x36
 800146a:	f000 f9e5 	bl	8001838 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800146e:	4a0a      	ldr	r2, [pc, #40]	; (8001498 <HAL_InitTick+0xf4>)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6013      	str	r3, [r2, #0]
 8001474:	e002      	b.n	800147c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001476:	2301      	movs	r3, #1
 8001478:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800147c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001480:	4618      	mov	r0, r3
 8001482:	3738      	adds	r7, #56	; 0x38
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	40023800 	.word	0x40023800
 800148c:	431bde83 	.word	0x431bde83
 8001490:	20000314 	.word	0x20000314
 8001494:	40001000 	.word	0x40001000
 8001498:	20000004 	.word	0x20000004

0800149c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014a0:	e7fe      	b.n	80014a0 <NMI_Handler+0x4>

080014a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014a2:	b480      	push	{r7}
 80014a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014a6:	e7fe      	b.n	80014a6 <HardFault_Handler+0x4>

080014a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014ac:	e7fe      	b.n	80014ac <MemManage_Handler+0x4>

080014ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014ae:	b480      	push	{r7}
 80014b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014b2:	e7fe      	b.n	80014b2 <BusFault_Handler+0x4>

080014b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014b8:	e7fe      	b.n	80014b8 <UsageFault_Handler+0x4>

080014ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014ba:	b480      	push	{r7}
 80014bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014be:	bf00      	nop
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr

080014c8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80014cc:	4802      	ldr	r0, [pc, #8]	; (80014d8 <TIM6_DAC_IRQHandler+0x10>)
 80014ce:	f003 fefb 	bl	80052c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80014d2:	bf00      	nop
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	20000314 	.word	0x20000314

080014dc <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 80014e0:	4802      	ldr	r0, [pc, #8]	; (80014ec <OTG_HS_IRQHandler+0x10>)
 80014e2:	f001 f823 	bl	800252c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80014e6:	bf00      	nop
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	20008898 	.word	0x20008898

080014f0 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80014f4:	4802      	ldr	r0, [pc, #8]	; (8001500 <LTDC_IRQHandler+0x10>)
 80014f6:	f002 fc49 	bl	8003d8c <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80014fa:	bf00      	nop
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	2000014c 	.word	0x2000014c

08001504 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001508:	4802      	ldr	r0, [pc, #8]	; (8001514 <DMA2D_IRQHandler+0x10>)
 800150a:	f000 fa24 	bl	8001956 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800150e:	bf00      	nop
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	200000b8 	.word	0x200000b8

08001518 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b086      	sub	sp, #24
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001520:	4a14      	ldr	r2, [pc, #80]	; (8001574 <_sbrk+0x5c>)
 8001522:	4b15      	ldr	r3, [pc, #84]	; (8001578 <_sbrk+0x60>)
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800152c:	4b13      	ldr	r3, [pc, #76]	; (800157c <_sbrk+0x64>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d102      	bne.n	800153a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001534:	4b11      	ldr	r3, [pc, #68]	; (800157c <_sbrk+0x64>)
 8001536:	4a12      	ldr	r2, [pc, #72]	; (8001580 <_sbrk+0x68>)
 8001538:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800153a:	4b10      	ldr	r3, [pc, #64]	; (800157c <_sbrk+0x64>)
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4413      	add	r3, r2
 8001542:	693a      	ldr	r2, [r7, #16]
 8001544:	429a      	cmp	r2, r3
 8001546:	d207      	bcs.n	8001558 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001548:	f00a fc1e 	bl	800bd88 <__errno>
 800154c:	4603      	mov	r3, r0
 800154e:	220c      	movs	r2, #12
 8001550:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001552:	f04f 33ff 	mov.w	r3, #4294967295
 8001556:	e009      	b.n	800156c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001558:	4b08      	ldr	r3, [pc, #32]	; (800157c <_sbrk+0x64>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800155e:	4b07      	ldr	r3, [pc, #28]	; (800157c <_sbrk+0x64>)
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	4413      	add	r3, r2
 8001566:	4a05      	ldr	r2, [pc, #20]	; (800157c <_sbrk+0x64>)
 8001568:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800156a:	68fb      	ldr	r3, [r7, #12]
}
 800156c:	4618      	mov	r0, r3
 800156e:	3718      	adds	r7, #24
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	20030000 	.word	0x20030000
 8001578:	00000400 	.word	0x00000400
 800157c:	2000035c 	.word	0x2000035c
 8001580:	20008bb0 	.word	0x20008bb0

08001584 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001588:	4b06      	ldr	r3, [pc, #24]	; (80015a4 <SystemInit+0x20>)
 800158a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800158e:	4a05      	ldr	r2, [pc, #20]	; (80015a4 <SystemInit+0x20>)
 8001590:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001594:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001598:	bf00      	nop
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	e000ed00 	.word	0xe000ed00

080015a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80015a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015e0 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015ac:	480d      	ldr	r0, [pc, #52]	; (80015e4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80015ae:	490e      	ldr	r1, [pc, #56]	; (80015e8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80015b0:	4a0e      	ldr	r2, [pc, #56]	; (80015ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015b4:	e002      	b.n	80015bc <LoopCopyDataInit>

080015b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015ba:	3304      	adds	r3, #4

080015bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015c0:	d3f9      	bcc.n	80015b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015c2:	4a0b      	ldr	r2, [pc, #44]	; (80015f0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80015c4:	4c0b      	ldr	r4, [pc, #44]	; (80015f4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80015c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015c8:	e001      	b.n	80015ce <LoopFillZerobss>

080015ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015cc:	3204      	adds	r2, #4

080015ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015d0:	d3fb      	bcc.n	80015ca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80015d2:	f7ff ffd7 	bl	8001584 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015d6:	f00a fbdd 	bl	800bd94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015da:	f7fe ff9d 	bl	8000518 <main>
  bx  lr    
 80015de:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80015e0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80015e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015e8:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 80015ec:	0800c0c8 	.word	0x0800c0c8
  ldr r2, =_sbss
 80015f0:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 80015f4:	20008bac 	.word	0x20008bac

080015f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015f8:	e7fe      	b.n	80015f8 <ADC_IRQHandler>
	...

080015fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001600:	4b0e      	ldr	r3, [pc, #56]	; (800163c <HAL_Init+0x40>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a0d      	ldr	r2, [pc, #52]	; (800163c <HAL_Init+0x40>)
 8001606:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800160a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800160c:	4b0b      	ldr	r3, [pc, #44]	; (800163c <HAL_Init+0x40>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a0a      	ldr	r2, [pc, #40]	; (800163c <HAL_Init+0x40>)
 8001612:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001616:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001618:	4b08      	ldr	r3, [pc, #32]	; (800163c <HAL_Init+0x40>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a07      	ldr	r2, [pc, #28]	; (800163c <HAL_Init+0x40>)
 800161e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001622:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001624:	2003      	movs	r0, #3
 8001626:	f000 f8fc 	bl	8001822 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800162a:	2000      	movs	r0, #0
 800162c:	f7ff feba 	bl	80013a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001630:	f7ff fb5a 	bl	8000ce8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001634:	2300      	movs	r3, #0
}
 8001636:	4618      	mov	r0, r3
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	40023c00 	.word	0x40023c00

08001640 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001644:	4b06      	ldr	r3, [pc, #24]	; (8001660 <HAL_IncTick+0x20>)
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	461a      	mov	r2, r3
 800164a:	4b06      	ldr	r3, [pc, #24]	; (8001664 <HAL_IncTick+0x24>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4413      	add	r3, r2
 8001650:	4a04      	ldr	r2, [pc, #16]	; (8001664 <HAL_IncTick+0x24>)
 8001652:	6013      	str	r3, [r2, #0]
}
 8001654:	bf00      	nop
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	20000008 	.word	0x20000008
 8001664:	20000360 	.word	0x20000360

08001668 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  return uwTick;
 800166c:	4b03      	ldr	r3, [pc, #12]	; (800167c <HAL_GetTick+0x14>)
 800166e:	681b      	ldr	r3, [r3, #0]
}
 8001670:	4618      	mov	r0, r3
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	20000360 	.word	0x20000360

08001680 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b084      	sub	sp, #16
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001688:	f7ff ffee 	bl	8001668 <HAL_GetTick>
 800168c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001698:	d005      	beq.n	80016a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800169a:	4b0a      	ldr	r3, [pc, #40]	; (80016c4 <HAL_Delay+0x44>)
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	461a      	mov	r2, r3
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	4413      	add	r3, r2
 80016a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80016a6:	bf00      	nop
 80016a8:	f7ff ffde 	bl	8001668 <HAL_GetTick>
 80016ac:	4602      	mov	r2, r0
 80016ae:	68bb      	ldr	r3, [r7, #8]
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	68fa      	ldr	r2, [r7, #12]
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d8f7      	bhi.n	80016a8 <HAL_Delay+0x28>
  {
  }
}
 80016b8:	bf00      	nop
 80016ba:	bf00      	nop
 80016bc:	3710      	adds	r7, #16
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	20000008 	.word	0x20000008

080016c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b085      	sub	sp, #20
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	f003 0307 	and.w	r3, r3, #7
 80016d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016d8:	4b0c      	ldr	r3, [pc, #48]	; (800170c <__NVIC_SetPriorityGrouping+0x44>)
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016de:	68ba      	ldr	r2, [r7, #8]
 80016e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016e4:	4013      	ands	r3, r2
 80016e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016fa:	4a04      	ldr	r2, [pc, #16]	; (800170c <__NVIC_SetPriorityGrouping+0x44>)
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	60d3      	str	r3, [r2, #12]
}
 8001700:	bf00      	nop
 8001702:	3714      	adds	r7, #20
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr
 800170c:	e000ed00 	.word	0xe000ed00

08001710 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001714:	4b04      	ldr	r3, [pc, #16]	; (8001728 <__NVIC_GetPriorityGrouping+0x18>)
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	0a1b      	lsrs	r3, r3, #8
 800171a:	f003 0307 	and.w	r3, r3, #7
}
 800171e:	4618      	mov	r0, r3
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr
 8001728:	e000ed00 	.word	0xe000ed00

0800172c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	4603      	mov	r3, r0
 8001734:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001736:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800173a:	2b00      	cmp	r3, #0
 800173c:	db0b      	blt.n	8001756 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800173e:	79fb      	ldrb	r3, [r7, #7]
 8001740:	f003 021f 	and.w	r2, r3, #31
 8001744:	4907      	ldr	r1, [pc, #28]	; (8001764 <__NVIC_EnableIRQ+0x38>)
 8001746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800174a:	095b      	lsrs	r3, r3, #5
 800174c:	2001      	movs	r0, #1
 800174e:	fa00 f202 	lsl.w	r2, r0, r2
 8001752:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001756:	bf00      	nop
 8001758:	370c      	adds	r7, #12
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	e000e100 	.word	0xe000e100

08001768 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001768:	b480      	push	{r7}
 800176a:	b083      	sub	sp, #12
 800176c:	af00      	add	r7, sp, #0
 800176e:	4603      	mov	r3, r0
 8001770:	6039      	str	r1, [r7, #0]
 8001772:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001774:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001778:	2b00      	cmp	r3, #0
 800177a:	db0a      	blt.n	8001792 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	b2da      	uxtb	r2, r3
 8001780:	490c      	ldr	r1, [pc, #48]	; (80017b4 <__NVIC_SetPriority+0x4c>)
 8001782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001786:	0112      	lsls	r2, r2, #4
 8001788:	b2d2      	uxtb	r2, r2
 800178a:	440b      	add	r3, r1
 800178c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001790:	e00a      	b.n	80017a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	b2da      	uxtb	r2, r3
 8001796:	4908      	ldr	r1, [pc, #32]	; (80017b8 <__NVIC_SetPriority+0x50>)
 8001798:	79fb      	ldrb	r3, [r7, #7]
 800179a:	f003 030f 	and.w	r3, r3, #15
 800179e:	3b04      	subs	r3, #4
 80017a0:	0112      	lsls	r2, r2, #4
 80017a2:	b2d2      	uxtb	r2, r2
 80017a4:	440b      	add	r3, r1
 80017a6:	761a      	strb	r2, [r3, #24]
}
 80017a8:	bf00      	nop
 80017aa:	370c      	adds	r7, #12
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr
 80017b4:	e000e100 	.word	0xe000e100
 80017b8:	e000ed00 	.word	0xe000ed00

080017bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017bc:	b480      	push	{r7}
 80017be:	b089      	sub	sp, #36	; 0x24
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	60f8      	str	r0, [r7, #12]
 80017c4:	60b9      	str	r1, [r7, #8]
 80017c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	f003 0307 	and.w	r3, r3, #7
 80017ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017d0:	69fb      	ldr	r3, [r7, #28]
 80017d2:	f1c3 0307 	rsb	r3, r3, #7
 80017d6:	2b04      	cmp	r3, #4
 80017d8:	bf28      	it	cs
 80017da:	2304      	movcs	r3, #4
 80017dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	3304      	adds	r3, #4
 80017e2:	2b06      	cmp	r3, #6
 80017e4:	d902      	bls.n	80017ec <NVIC_EncodePriority+0x30>
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	3b03      	subs	r3, #3
 80017ea:	e000      	b.n	80017ee <NVIC_EncodePriority+0x32>
 80017ec:	2300      	movs	r3, #0
 80017ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017f0:	f04f 32ff 	mov.w	r2, #4294967295
 80017f4:	69bb      	ldr	r3, [r7, #24]
 80017f6:	fa02 f303 	lsl.w	r3, r2, r3
 80017fa:	43da      	mvns	r2, r3
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	401a      	ands	r2, r3
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001804:	f04f 31ff 	mov.w	r1, #4294967295
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	fa01 f303 	lsl.w	r3, r1, r3
 800180e:	43d9      	mvns	r1, r3
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001814:	4313      	orrs	r3, r2
         );
}
 8001816:	4618      	mov	r0, r3
 8001818:	3724      	adds	r7, #36	; 0x24
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr

08001822 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001822:	b580      	push	{r7, lr}
 8001824:	b082      	sub	sp, #8
 8001826:	af00      	add	r7, sp, #0
 8001828:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	f7ff ff4c 	bl	80016c8 <__NVIC_SetPriorityGrouping>
}
 8001830:	bf00      	nop
 8001832:	3708      	adds	r7, #8
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}

08001838 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001838:	b580      	push	{r7, lr}
 800183a:	b086      	sub	sp, #24
 800183c:	af00      	add	r7, sp, #0
 800183e:	4603      	mov	r3, r0
 8001840:	60b9      	str	r1, [r7, #8]
 8001842:	607a      	str	r2, [r7, #4]
 8001844:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001846:	2300      	movs	r3, #0
 8001848:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800184a:	f7ff ff61 	bl	8001710 <__NVIC_GetPriorityGrouping>
 800184e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001850:	687a      	ldr	r2, [r7, #4]
 8001852:	68b9      	ldr	r1, [r7, #8]
 8001854:	6978      	ldr	r0, [r7, #20]
 8001856:	f7ff ffb1 	bl	80017bc <NVIC_EncodePriority>
 800185a:	4602      	mov	r2, r0
 800185c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001860:	4611      	mov	r1, r2
 8001862:	4618      	mov	r0, r3
 8001864:	f7ff ff80 	bl	8001768 <__NVIC_SetPriority>
}
 8001868:	bf00      	nop
 800186a:	3718      	adds	r7, #24
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}

08001870 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	4603      	mov	r3, r0
 8001878:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800187a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800187e:	4618      	mov	r0, r3
 8001880:	f7ff ff54 	bl	800172c <__NVIC_EnableIRQ>
}
 8001884:	bf00      	nop
 8001886:	3708      	adds	r7, #8
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}

0800188c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d101      	bne.n	800189e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	e00e      	b.n	80018bc <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	795b      	ldrb	r3, [r3, #5]
 80018a2:	b2db      	uxtb	r3, r3
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d105      	bne.n	80018b4 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2200      	movs	r2, #0
 80018ac:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80018ae:	6878      	ldr	r0, [r7, #4]
 80018b0:	f7ff fa46 	bl	8000d40 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2201      	movs	r2, #1
 80018b8:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80018ba:	2300      	movs	r3, #0
}
 80018bc:	4618      	mov	r0, r3
 80018be:	3708      	adds	r7, #8
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}

080018c4 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d101      	bne.n	80018d6 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e03b      	b.n	800194e <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d106      	bne.n	80018f0 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2200      	movs	r2, #0
 80018e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80018ea:	6878      	ldr	r0, [r7, #4]
 80018ec:	f7ff fa4a 	bl	8000d84 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2202      	movs	r2, #2
 80018f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	685a      	ldr	r2, [r3, #4]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	430a      	orrs	r2, r1
 800190c:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001914:	f023 0107 	bic.w	r1, r3, #7
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	689a      	ldr	r2, [r3, #8]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	430a      	orrs	r2, r1
 8001922:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800192e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001932:	687a      	ldr	r2, [r7, #4]
 8001934:	68d1      	ldr	r1, [r2, #12]
 8001936:	687a      	ldr	r2, [r7, #4]
 8001938:	6812      	ldr	r2, [r2, #0]
 800193a:	430b      	orrs	r3, r1
 800193c:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2200      	movs	r2, #0
 8001942:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2201      	movs	r2, #1
 8001948:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800194c:	2300      	movs	r3, #0
}
 800194e:	4618      	mov	r0, r3
 8001950:	3708      	adds	r7, #8
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}

08001956 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8001956:	b580      	push	{r7, lr}
 8001958:	b084      	sub	sp, #16
 800195a:	af00      	add	r7, sp, #0
 800195c:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	f003 0301 	and.w	r3, r3, #1
 8001974:	2b00      	cmp	r3, #0
 8001976:	d026      	beq.n	80019c6 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800197e:	2b00      	cmp	r3, #0
 8001980:	d021      	beq.n	80019c6 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001990:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001996:	f043 0201 	orr.w	r2, r3, #1
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	2201      	movs	r2, #1
 80019a4:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2204      	movs	r2, #4
 80019aa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2200      	movs	r2, #0
 80019b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	695b      	ldr	r3, [r3, #20]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d003      	beq.n	80019c6 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	695b      	ldr	r3, [r3, #20]
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	f003 0320 	and.w	r3, r3, #32
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d026      	beq.n	8001a1e <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d021      	beq.n	8001a1e <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80019e8:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	2220      	movs	r2, #32
 80019f0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019f6:	f043 0202 	orr.w	r2, r3, #2
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2204      	movs	r2, #4
 8001a02:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	695b      	ldr	r3, [r3, #20]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d003      	beq.n	8001a1e <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	695b      	ldr	r3, [r3, #20]
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	f003 0308 	and.w	r3, r3, #8
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d026      	beq.n	8001a76 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d021      	beq.n	8001a76 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a40:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	2208      	movs	r2, #8
 8001a48:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a4e:	f043 0204 	orr.w	r2, r3, #4
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2204      	movs	r2, #4
 8001a5a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2200      	movs	r2, #0
 8001a62:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	695b      	ldr	r3, [r3, #20]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d003      	beq.n	8001a76 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	695b      	ldr	r3, [r3, #20]
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	f003 0304 	and.w	r3, r3, #4
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d013      	beq.n	8001aa8 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d00e      	beq.n	8001aa8 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a98:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	2204      	movs	r2, #4
 8001aa0:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f000 f853 	bl	8001b4e <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	f003 0302 	and.w	r3, r3, #2
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d024      	beq.n	8001afc <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8001ab2:	68bb      	ldr	r3, [r7, #8]
 8001ab4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d01f      	beq.n	8001afc <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001aca:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	2202      	movs	r2, #2
 8001ad2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2201      	movs	r2, #1
 8001ae0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	691b      	ldr	r3, [r3, #16]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d003      	beq.n	8001afc <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	691b      	ldr	r3, [r3, #16]
 8001af8:	6878      	ldr	r0, [r7, #4]
 8001afa:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	f003 0310 	and.w	r3, r3, #16
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d01f      	beq.n	8001b46 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8001b06:	68bb      	ldr	r3, [r7, #8]
 8001b08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d01a      	beq.n	8001b46 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001b1e:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	2210      	movs	r2, #16
 8001b26:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2201      	movs	r2, #1
 8001b34:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8001b40:	6878      	ldr	r0, [r7, #4]
 8001b42:	f000 f80e 	bl	8001b62 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8001b46:	bf00      	nop
 8001b48:	3710      	adds	r7, #16
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}

08001b4e <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001b4e:	b480      	push	{r7}
 8001b50:	b083      	sub	sp, #12
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8001b56:	bf00      	nop
 8001b58:	370c      	adds	r7, #12
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr

08001b62 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001b62:	b480      	push	{r7}
 8001b64:	b083      	sub	sp, #12
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8001b6a:	bf00      	nop
 8001b6c:	370c      	adds	r7, #12
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
	...

08001b78 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b087      	sub	sp, #28
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d101      	bne.n	8001b98 <HAL_DMA2D_ConfigLayer+0x20>
 8001b94:	2302      	movs	r3, #2
 8001b96:	e079      	b.n	8001c8c <HAL_DMA2D_ConfigLayer+0x114>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2202      	movs	r2, #2
 8001ba4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	011b      	lsls	r3, r3, #4
 8001bac:	3318      	adds	r3, #24
 8001bae:	687a      	ldr	r2, [r7, #4]
 8001bb0:	4413      	add	r3, r2
 8001bb2:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	685a      	ldr	r2, [r3, #4]
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	041b      	lsls	r3, r3, #16
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8001bc2:	4b35      	ldr	r3, [pc, #212]	; (8001c98 <HAL_DMA2D_ConfigLayer+0x120>)
 8001bc4:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	2b0a      	cmp	r3, #10
 8001bcc:	d003      	beq.n	8001bd6 <HAL_DMA2D_ConfigLayer+0x5e>
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	2b09      	cmp	r3, #9
 8001bd4:	d107      	bne.n	8001be6 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	68db      	ldr	r3, [r3, #12]
 8001bda:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8001bde:	697a      	ldr	r2, [r7, #20]
 8001be0:	4313      	orrs	r3, r2
 8001be2:	617b      	str	r3, [r7, #20]
 8001be4:	e005      	b.n	8001bf2 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	68db      	ldr	r3, [r3, #12]
 8001bea:	061b      	lsls	r3, r3, #24
 8001bec:	697a      	ldr	r2, [r7, #20]
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d120      	bne.n	8001c3a <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	43db      	mvns	r3, r3
 8001c02:	ea02 0103 	and.w	r1, r2, r3
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	697a      	ldr	r2, [r7, #20]
 8001c0c:	430a      	orrs	r2, r1
 8001c0e:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	693a      	ldr	r2, [r7, #16]
 8001c16:	6812      	ldr	r2, [r2, #0]
 8001c18:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	2b0a      	cmp	r3, #10
 8001c20:	d003      	beq.n	8001c2a <HAL_DMA2D_ConfigLayer+0xb2>
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	2b09      	cmp	r3, #9
 8001c28:	d127      	bne.n	8001c7a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	68da      	ldr	r2, [r3, #12]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8001c36:	629a      	str	r2, [r3, #40]	; 0x28
 8001c38:	e01f      	b.n	8001c7a <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	69da      	ldr	r2, [r3, #28]
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	43db      	mvns	r3, r3
 8001c44:	ea02 0103 	and.w	r1, r2, r3
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	697a      	ldr	r2, [r7, #20]
 8001c4e:	430a      	orrs	r2, r1
 8001c50:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	693a      	ldr	r2, [r7, #16]
 8001c58:	6812      	ldr	r2, [r2, #0]
 8001c5a:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	2b0a      	cmp	r3, #10
 8001c62:	d003      	beq.n	8001c6c <HAL_DMA2D_ConfigLayer+0xf4>
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	2b09      	cmp	r3, #9
 8001c6a:	d106      	bne.n	8001c7a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	68da      	ldr	r2, [r3, #12]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8001c78:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2200      	movs	r2, #0
 8001c86:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8001c8a:	2300      	movs	r3, #0
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	371c      	adds	r7, #28
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr
 8001c98:	ff03000f 	.word	0xff03000f

08001c9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b089      	sub	sp, #36	; 0x24
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
 8001ca4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001caa:	2300      	movs	r3, #0
 8001cac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	61fb      	str	r3, [r7, #28]
 8001cb6:	e177      	b.n	8001fa8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001cb8:	2201      	movs	r2, #1
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	697a      	ldr	r2, [r7, #20]
 8001cc8:	4013      	ands	r3, r2
 8001cca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ccc:	693a      	ldr	r2, [r7, #16]
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	f040 8166 	bne.w	8001fa2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	f003 0303 	and.w	r3, r3, #3
 8001cde:	2b01      	cmp	r3, #1
 8001ce0:	d005      	beq.n	8001cee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cea:	2b02      	cmp	r3, #2
 8001cec:	d130      	bne.n	8001d50 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	005b      	lsls	r3, r3, #1
 8001cf8:	2203      	movs	r2, #3
 8001cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfe:	43db      	mvns	r3, r3
 8001d00:	69ba      	ldr	r2, [r7, #24]
 8001d02:	4013      	ands	r3, r2
 8001d04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	68da      	ldr	r2, [r3, #12]
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	005b      	lsls	r3, r3, #1
 8001d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d12:	69ba      	ldr	r2, [r7, #24]
 8001d14:	4313      	orrs	r3, r2
 8001d16:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	69ba      	ldr	r2, [r7, #24]
 8001d1c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d24:	2201      	movs	r2, #1
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2c:	43db      	mvns	r3, r3
 8001d2e:	69ba      	ldr	r2, [r7, #24]
 8001d30:	4013      	ands	r3, r2
 8001d32:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	091b      	lsrs	r3, r3, #4
 8001d3a:	f003 0201 	and.w	r2, r3, #1
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	fa02 f303 	lsl.w	r3, r2, r3
 8001d44:	69ba      	ldr	r2, [r7, #24]
 8001d46:	4313      	orrs	r3, r2
 8001d48:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	69ba      	ldr	r2, [r7, #24]
 8001d4e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f003 0303 	and.w	r3, r3, #3
 8001d58:	2b03      	cmp	r3, #3
 8001d5a:	d017      	beq.n	8001d8c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	005b      	lsls	r3, r3, #1
 8001d66:	2203      	movs	r2, #3
 8001d68:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6c:	43db      	mvns	r3, r3
 8001d6e:	69ba      	ldr	r2, [r7, #24]
 8001d70:	4013      	ands	r3, r2
 8001d72:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	689a      	ldr	r2, [r3, #8]
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	005b      	lsls	r3, r3, #1
 8001d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d80:	69ba      	ldr	r2, [r7, #24]
 8001d82:	4313      	orrs	r3, r2
 8001d84:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	69ba      	ldr	r2, [r7, #24]
 8001d8a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f003 0303 	and.w	r3, r3, #3
 8001d94:	2b02      	cmp	r3, #2
 8001d96:	d123      	bne.n	8001de0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d98:	69fb      	ldr	r3, [r7, #28]
 8001d9a:	08da      	lsrs	r2, r3, #3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	3208      	adds	r2, #8
 8001da0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001da4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	f003 0307 	and.w	r3, r3, #7
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	220f      	movs	r2, #15
 8001db0:	fa02 f303 	lsl.w	r3, r2, r3
 8001db4:	43db      	mvns	r3, r3
 8001db6:	69ba      	ldr	r2, [r7, #24]
 8001db8:	4013      	ands	r3, r2
 8001dba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	691a      	ldr	r2, [r3, #16]
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	f003 0307 	and.w	r3, r3, #7
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dcc:	69ba      	ldr	r2, [r7, #24]
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	08da      	lsrs	r2, r3, #3
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	3208      	adds	r2, #8
 8001dda:	69b9      	ldr	r1, [r7, #24]
 8001ddc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	005b      	lsls	r3, r3, #1
 8001dea:	2203      	movs	r2, #3
 8001dec:	fa02 f303 	lsl.w	r3, r2, r3
 8001df0:	43db      	mvns	r3, r3
 8001df2:	69ba      	ldr	r2, [r7, #24]
 8001df4:	4013      	ands	r3, r2
 8001df6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f003 0203 	and.w	r2, r3, #3
 8001e00:	69fb      	ldr	r3, [r7, #28]
 8001e02:	005b      	lsls	r3, r3, #1
 8001e04:	fa02 f303 	lsl.w	r3, r2, r3
 8001e08:	69ba      	ldr	r2, [r7, #24]
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	69ba      	ldr	r2, [r7, #24]
 8001e12:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	f000 80c0 	beq.w	8001fa2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e22:	2300      	movs	r3, #0
 8001e24:	60fb      	str	r3, [r7, #12]
 8001e26:	4b66      	ldr	r3, [pc, #408]	; (8001fc0 <HAL_GPIO_Init+0x324>)
 8001e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e2a:	4a65      	ldr	r2, [pc, #404]	; (8001fc0 <HAL_GPIO_Init+0x324>)
 8001e2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e30:	6453      	str	r3, [r2, #68]	; 0x44
 8001e32:	4b63      	ldr	r3, [pc, #396]	; (8001fc0 <HAL_GPIO_Init+0x324>)
 8001e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e3a:	60fb      	str	r3, [r7, #12]
 8001e3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e3e:	4a61      	ldr	r2, [pc, #388]	; (8001fc4 <HAL_GPIO_Init+0x328>)
 8001e40:	69fb      	ldr	r3, [r7, #28]
 8001e42:	089b      	lsrs	r3, r3, #2
 8001e44:	3302      	adds	r3, #2
 8001e46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e4c:	69fb      	ldr	r3, [r7, #28]
 8001e4e:	f003 0303 	and.w	r3, r3, #3
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	220f      	movs	r2, #15
 8001e56:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5a:	43db      	mvns	r3, r3
 8001e5c:	69ba      	ldr	r2, [r7, #24]
 8001e5e:	4013      	ands	r3, r2
 8001e60:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a58      	ldr	r2, [pc, #352]	; (8001fc8 <HAL_GPIO_Init+0x32c>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d037      	beq.n	8001eda <HAL_GPIO_Init+0x23e>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a57      	ldr	r2, [pc, #348]	; (8001fcc <HAL_GPIO_Init+0x330>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d031      	beq.n	8001ed6 <HAL_GPIO_Init+0x23a>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a56      	ldr	r2, [pc, #344]	; (8001fd0 <HAL_GPIO_Init+0x334>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d02b      	beq.n	8001ed2 <HAL_GPIO_Init+0x236>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4a55      	ldr	r2, [pc, #340]	; (8001fd4 <HAL_GPIO_Init+0x338>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d025      	beq.n	8001ece <HAL_GPIO_Init+0x232>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4a54      	ldr	r2, [pc, #336]	; (8001fd8 <HAL_GPIO_Init+0x33c>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d01f      	beq.n	8001eca <HAL_GPIO_Init+0x22e>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4a53      	ldr	r2, [pc, #332]	; (8001fdc <HAL_GPIO_Init+0x340>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d019      	beq.n	8001ec6 <HAL_GPIO_Init+0x22a>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4a52      	ldr	r2, [pc, #328]	; (8001fe0 <HAL_GPIO_Init+0x344>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d013      	beq.n	8001ec2 <HAL_GPIO_Init+0x226>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4a51      	ldr	r2, [pc, #324]	; (8001fe4 <HAL_GPIO_Init+0x348>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d00d      	beq.n	8001ebe <HAL_GPIO_Init+0x222>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4a50      	ldr	r2, [pc, #320]	; (8001fe8 <HAL_GPIO_Init+0x34c>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d007      	beq.n	8001eba <HAL_GPIO_Init+0x21e>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4a4f      	ldr	r2, [pc, #316]	; (8001fec <HAL_GPIO_Init+0x350>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d101      	bne.n	8001eb6 <HAL_GPIO_Init+0x21a>
 8001eb2:	2309      	movs	r3, #9
 8001eb4:	e012      	b.n	8001edc <HAL_GPIO_Init+0x240>
 8001eb6:	230a      	movs	r3, #10
 8001eb8:	e010      	b.n	8001edc <HAL_GPIO_Init+0x240>
 8001eba:	2308      	movs	r3, #8
 8001ebc:	e00e      	b.n	8001edc <HAL_GPIO_Init+0x240>
 8001ebe:	2307      	movs	r3, #7
 8001ec0:	e00c      	b.n	8001edc <HAL_GPIO_Init+0x240>
 8001ec2:	2306      	movs	r3, #6
 8001ec4:	e00a      	b.n	8001edc <HAL_GPIO_Init+0x240>
 8001ec6:	2305      	movs	r3, #5
 8001ec8:	e008      	b.n	8001edc <HAL_GPIO_Init+0x240>
 8001eca:	2304      	movs	r3, #4
 8001ecc:	e006      	b.n	8001edc <HAL_GPIO_Init+0x240>
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e004      	b.n	8001edc <HAL_GPIO_Init+0x240>
 8001ed2:	2302      	movs	r3, #2
 8001ed4:	e002      	b.n	8001edc <HAL_GPIO_Init+0x240>
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e000      	b.n	8001edc <HAL_GPIO_Init+0x240>
 8001eda:	2300      	movs	r3, #0
 8001edc:	69fa      	ldr	r2, [r7, #28]
 8001ede:	f002 0203 	and.w	r2, r2, #3
 8001ee2:	0092      	lsls	r2, r2, #2
 8001ee4:	4093      	lsls	r3, r2
 8001ee6:	69ba      	ldr	r2, [r7, #24]
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001eec:	4935      	ldr	r1, [pc, #212]	; (8001fc4 <HAL_GPIO_Init+0x328>)
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	089b      	lsrs	r3, r3, #2
 8001ef2:	3302      	adds	r3, #2
 8001ef4:	69ba      	ldr	r2, [r7, #24]
 8001ef6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001efa:	4b3d      	ldr	r3, [pc, #244]	; (8001ff0 <HAL_GPIO_Init+0x354>)
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	43db      	mvns	r3, r3
 8001f04:	69ba      	ldr	r2, [r7, #24]
 8001f06:	4013      	ands	r3, r2
 8001f08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d003      	beq.n	8001f1e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001f16:	69ba      	ldr	r2, [r7, #24]
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f1e:	4a34      	ldr	r2, [pc, #208]	; (8001ff0 <HAL_GPIO_Init+0x354>)
 8001f20:	69bb      	ldr	r3, [r7, #24]
 8001f22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f24:	4b32      	ldr	r3, [pc, #200]	; (8001ff0 <HAL_GPIO_Init+0x354>)
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	43db      	mvns	r3, r3
 8001f2e:	69ba      	ldr	r2, [r7, #24]
 8001f30:	4013      	ands	r3, r2
 8001f32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d003      	beq.n	8001f48 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001f40:	69ba      	ldr	r2, [r7, #24]
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	4313      	orrs	r3, r2
 8001f46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f48:	4a29      	ldr	r2, [pc, #164]	; (8001ff0 <HAL_GPIO_Init+0x354>)
 8001f4a:	69bb      	ldr	r3, [r7, #24]
 8001f4c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f4e:	4b28      	ldr	r3, [pc, #160]	; (8001ff0 <HAL_GPIO_Init+0x354>)
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	43db      	mvns	r3, r3
 8001f58:	69ba      	ldr	r2, [r7, #24]
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d003      	beq.n	8001f72 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001f6a:	69ba      	ldr	r2, [r7, #24]
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f72:	4a1f      	ldr	r2, [pc, #124]	; (8001ff0 <HAL_GPIO_Init+0x354>)
 8001f74:	69bb      	ldr	r3, [r7, #24]
 8001f76:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f78:	4b1d      	ldr	r3, [pc, #116]	; (8001ff0 <HAL_GPIO_Init+0x354>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	43db      	mvns	r3, r3
 8001f82:	69ba      	ldr	r2, [r7, #24]
 8001f84:	4013      	ands	r3, r2
 8001f86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d003      	beq.n	8001f9c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001f94:	69ba      	ldr	r2, [r7, #24]
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f9c:	4a14      	ldr	r2, [pc, #80]	; (8001ff0 <HAL_GPIO_Init+0x354>)
 8001f9e:	69bb      	ldr	r3, [r7, #24]
 8001fa0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	3301      	adds	r3, #1
 8001fa6:	61fb      	str	r3, [r7, #28]
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	2b0f      	cmp	r3, #15
 8001fac:	f67f ae84 	bls.w	8001cb8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001fb0:	bf00      	nop
 8001fb2:	bf00      	nop
 8001fb4:	3724      	adds	r7, #36	; 0x24
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr
 8001fbe:	bf00      	nop
 8001fc0:	40023800 	.word	0x40023800
 8001fc4:	40013800 	.word	0x40013800
 8001fc8:	40020000 	.word	0x40020000
 8001fcc:	40020400 	.word	0x40020400
 8001fd0:	40020800 	.word	0x40020800
 8001fd4:	40020c00 	.word	0x40020c00
 8001fd8:	40021000 	.word	0x40021000
 8001fdc:	40021400 	.word	0x40021400
 8001fe0:	40021800 	.word	0x40021800
 8001fe4:	40021c00 	.word	0x40021c00
 8001fe8:	40022000 	.word	0x40022000
 8001fec:	40022400 	.word	0x40022400
 8001ff0:	40013c00 	.word	0x40013c00

08001ff4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b085      	sub	sp, #20
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
 8001ffc:	460b      	mov	r3, r1
 8001ffe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	691a      	ldr	r2, [r3, #16]
 8002004:	887b      	ldrh	r3, [r7, #2]
 8002006:	4013      	ands	r3, r2
 8002008:	2b00      	cmp	r3, #0
 800200a:	d002      	beq.n	8002012 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800200c:	2301      	movs	r3, #1
 800200e:	73fb      	strb	r3, [r7, #15]
 8002010:	e001      	b.n	8002016 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002012:	2300      	movs	r3, #0
 8002014:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002016:	7bfb      	ldrb	r3, [r7, #15]
}
 8002018:	4618      	mov	r0, r3
 800201a:	3714      	adds	r7, #20
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr

08002024 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002024:	b480      	push	{r7}
 8002026:	b083      	sub	sp, #12
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
 800202c:	460b      	mov	r3, r1
 800202e:	807b      	strh	r3, [r7, #2]
 8002030:	4613      	mov	r3, r2
 8002032:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002034:	787b      	ldrb	r3, [r7, #1]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d003      	beq.n	8002042 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800203a:	887a      	ldrh	r2, [r7, #2]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002040:	e003      	b.n	800204a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002042:	887b      	ldrh	r3, [r7, #2]
 8002044:	041a      	lsls	r2, r3, #16
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	619a      	str	r2, [r3, #24]
}
 800204a:	bf00      	nop
 800204c:	370c      	adds	r7, #12
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr

08002056 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002056:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002058:	b08f      	sub	sp, #60	; 0x3c
 800205a:	af0a      	add	r7, sp, #40	; 0x28
 800205c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d101      	bne.n	8002068 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	e054      	b.n	8002112 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8002074:	b2db      	uxtb	r3, r3
 8002076:	2b00      	cmp	r3, #0
 8002078:	d106      	bne.n	8002088 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2200      	movs	r2, #0
 800207e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f009 fbcc 	bl	800b820 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2203      	movs	r2, #3
 800208c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002094:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002098:	2b00      	cmp	r3, #0
 800209a:	d102      	bne.n	80020a2 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2200      	movs	r2, #0
 80020a0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4618      	mov	r0, r3
 80020a8:	f004 f8ca 	bl	8006240 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	603b      	str	r3, [r7, #0]
 80020b2:	687e      	ldr	r6, [r7, #4]
 80020b4:	466d      	mov	r5, sp
 80020b6:	f106 0410 	add.w	r4, r6, #16
 80020ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020c2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80020c6:	e885 0003 	stmia.w	r5, {r0, r1}
 80020ca:	1d33      	adds	r3, r6, #4
 80020cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020ce:	6838      	ldr	r0, [r7, #0]
 80020d0:	f004 f844 	bl	800615c <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	2101      	movs	r1, #1
 80020da:	4618      	mov	r0, r3
 80020dc:	f004 f8c1 	bl	8006262 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	603b      	str	r3, [r7, #0]
 80020e6:	687e      	ldr	r6, [r7, #4]
 80020e8:	466d      	mov	r5, sp
 80020ea:	f106 0410 	add.w	r4, r6, #16
 80020ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020f6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80020fa:	e885 0003 	stmia.w	r5, {r0, r1}
 80020fe:	1d33      	adds	r3, r6, #4
 8002100:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002102:	6838      	ldr	r0, [r7, #0]
 8002104:	f004 fa4a 	bl	800659c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2201      	movs	r2, #1
 800210c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8002110:	2300      	movs	r3, #0
}
 8002112:	4618      	mov	r0, r3
 8002114:	3714      	adds	r7, #20
 8002116:	46bd      	mov	sp, r7
 8002118:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800211a <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800211a:	b590      	push	{r4, r7, lr}
 800211c:	b089      	sub	sp, #36	; 0x24
 800211e:	af04      	add	r7, sp, #16
 8002120:	6078      	str	r0, [r7, #4]
 8002122:	4608      	mov	r0, r1
 8002124:	4611      	mov	r1, r2
 8002126:	461a      	mov	r2, r3
 8002128:	4603      	mov	r3, r0
 800212a:	70fb      	strb	r3, [r7, #3]
 800212c:	460b      	mov	r3, r1
 800212e:	70bb      	strb	r3, [r7, #2]
 8002130:	4613      	mov	r3, r2
 8002132:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800213a:	2b01      	cmp	r3, #1
 800213c:	d101      	bne.n	8002142 <HAL_HCD_HC_Init+0x28>
 800213e:	2302      	movs	r3, #2
 8002140:	e076      	b.n	8002230 <HAL_HCD_HC_Init+0x116>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2201      	movs	r2, #1
 8002146:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800214a:	78fb      	ldrb	r3, [r7, #3]
 800214c:	687a      	ldr	r2, [r7, #4]
 800214e:	212c      	movs	r1, #44	; 0x2c
 8002150:	fb01 f303 	mul.w	r3, r1, r3
 8002154:	4413      	add	r3, r2
 8002156:	333d      	adds	r3, #61	; 0x3d
 8002158:	2200      	movs	r2, #0
 800215a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800215c:	78fb      	ldrb	r3, [r7, #3]
 800215e:	687a      	ldr	r2, [r7, #4]
 8002160:	212c      	movs	r1, #44	; 0x2c
 8002162:	fb01 f303 	mul.w	r3, r1, r3
 8002166:	4413      	add	r3, r2
 8002168:	3338      	adds	r3, #56	; 0x38
 800216a:	787a      	ldrb	r2, [r7, #1]
 800216c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800216e:	78fb      	ldrb	r3, [r7, #3]
 8002170:	687a      	ldr	r2, [r7, #4]
 8002172:	212c      	movs	r1, #44	; 0x2c
 8002174:	fb01 f303 	mul.w	r3, r1, r3
 8002178:	4413      	add	r3, r2
 800217a:	3340      	adds	r3, #64	; 0x40
 800217c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800217e:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002180:	78fb      	ldrb	r3, [r7, #3]
 8002182:	687a      	ldr	r2, [r7, #4]
 8002184:	212c      	movs	r1, #44	; 0x2c
 8002186:	fb01 f303 	mul.w	r3, r1, r3
 800218a:	4413      	add	r3, r2
 800218c:	3339      	adds	r3, #57	; 0x39
 800218e:	78fa      	ldrb	r2, [r7, #3]
 8002190:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002192:	78fb      	ldrb	r3, [r7, #3]
 8002194:	687a      	ldr	r2, [r7, #4]
 8002196:	212c      	movs	r1, #44	; 0x2c
 8002198:	fb01 f303 	mul.w	r3, r1, r3
 800219c:	4413      	add	r3, r2
 800219e:	333f      	adds	r3, #63	; 0x3f
 80021a0:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80021a4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80021a6:	78fb      	ldrb	r3, [r7, #3]
 80021a8:	78ba      	ldrb	r2, [r7, #2]
 80021aa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80021ae:	b2d0      	uxtb	r0, r2
 80021b0:	687a      	ldr	r2, [r7, #4]
 80021b2:	212c      	movs	r1, #44	; 0x2c
 80021b4:	fb01 f303 	mul.w	r3, r1, r3
 80021b8:	4413      	add	r3, r2
 80021ba:	333a      	adds	r3, #58	; 0x3a
 80021bc:	4602      	mov	r2, r0
 80021be:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80021c0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	da09      	bge.n	80021dc <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80021c8:	78fb      	ldrb	r3, [r7, #3]
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	212c      	movs	r1, #44	; 0x2c
 80021ce:	fb01 f303 	mul.w	r3, r1, r3
 80021d2:	4413      	add	r3, r2
 80021d4:	333b      	adds	r3, #59	; 0x3b
 80021d6:	2201      	movs	r2, #1
 80021d8:	701a      	strb	r2, [r3, #0]
 80021da:	e008      	b.n	80021ee <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80021dc:	78fb      	ldrb	r3, [r7, #3]
 80021de:	687a      	ldr	r2, [r7, #4]
 80021e0:	212c      	movs	r1, #44	; 0x2c
 80021e2:	fb01 f303 	mul.w	r3, r1, r3
 80021e6:	4413      	add	r3, r2
 80021e8:	333b      	adds	r3, #59	; 0x3b
 80021ea:	2200      	movs	r2, #0
 80021ec:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80021ee:	78fb      	ldrb	r3, [r7, #3]
 80021f0:	687a      	ldr	r2, [r7, #4]
 80021f2:	212c      	movs	r1, #44	; 0x2c
 80021f4:	fb01 f303 	mul.w	r3, r1, r3
 80021f8:	4413      	add	r3, r2
 80021fa:	333c      	adds	r3, #60	; 0x3c
 80021fc:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002200:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6818      	ldr	r0, [r3, #0]
 8002206:	787c      	ldrb	r4, [r7, #1]
 8002208:	78ba      	ldrb	r2, [r7, #2]
 800220a:	78f9      	ldrb	r1, [r7, #3]
 800220c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800220e:	9302      	str	r3, [sp, #8]
 8002210:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002214:	9301      	str	r3, [sp, #4]
 8002216:	f897 3020 	ldrb.w	r3, [r7, #32]
 800221a:	9300      	str	r3, [sp, #0]
 800221c:	4623      	mov	r3, r4
 800221e:	f004 fb43 	bl	80068a8 <USB_HC_Init>
 8002222:	4603      	mov	r3, r0
 8002224:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2200      	movs	r2, #0
 800222a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800222e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002230:	4618      	mov	r0, r3
 8002232:	3714      	adds	r7, #20
 8002234:	46bd      	mov	sp, r7
 8002236:	bd90      	pop	{r4, r7, pc}

08002238 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b084      	sub	sp, #16
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
 8002240:	460b      	mov	r3, r1
 8002242:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002244:	2300      	movs	r3, #0
 8002246:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800224e:	2b01      	cmp	r3, #1
 8002250:	d101      	bne.n	8002256 <HAL_HCD_HC_Halt+0x1e>
 8002252:	2302      	movs	r3, #2
 8002254:	e00f      	b.n	8002276 <HAL_HCD_HC_Halt+0x3e>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2201      	movs	r2, #1
 800225a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	78fa      	ldrb	r2, [r7, #3]
 8002264:	4611      	mov	r1, r2
 8002266:	4618      	mov	r0, r3
 8002268:	f004 fd93 	bl	8006d92 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2200      	movs	r2, #0
 8002270:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002274:	7bfb      	ldrb	r3, [r7, #15]
}
 8002276:	4618      	mov	r0, r3
 8002278:	3710      	adds	r7, #16
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
	...

08002280 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
 8002288:	4608      	mov	r0, r1
 800228a:	4611      	mov	r1, r2
 800228c:	461a      	mov	r2, r3
 800228e:	4603      	mov	r3, r0
 8002290:	70fb      	strb	r3, [r7, #3]
 8002292:	460b      	mov	r3, r1
 8002294:	70bb      	strb	r3, [r7, #2]
 8002296:	4613      	mov	r3, r2
 8002298:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800229a:	78fb      	ldrb	r3, [r7, #3]
 800229c:	687a      	ldr	r2, [r7, #4]
 800229e:	212c      	movs	r1, #44	; 0x2c
 80022a0:	fb01 f303 	mul.w	r3, r1, r3
 80022a4:	4413      	add	r3, r2
 80022a6:	333b      	adds	r3, #59	; 0x3b
 80022a8:	78ba      	ldrb	r2, [r7, #2]
 80022aa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80022ac:	78fb      	ldrb	r3, [r7, #3]
 80022ae:	687a      	ldr	r2, [r7, #4]
 80022b0:	212c      	movs	r1, #44	; 0x2c
 80022b2:	fb01 f303 	mul.w	r3, r1, r3
 80022b6:	4413      	add	r3, r2
 80022b8:	333f      	adds	r3, #63	; 0x3f
 80022ba:	787a      	ldrb	r2, [r7, #1]
 80022bc:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80022be:	7c3b      	ldrb	r3, [r7, #16]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d112      	bne.n	80022ea <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80022c4:	78fb      	ldrb	r3, [r7, #3]
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	212c      	movs	r1, #44	; 0x2c
 80022ca:	fb01 f303 	mul.w	r3, r1, r3
 80022ce:	4413      	add	r3, r2
 80022d0:	3342      	adds	r3, #66	; 0x42
 80022d2:	2203      	movs	r2, #3
 80022d4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80022d6:	78fb      	ldrb	r3, [r7, #3]
 80022d8:	687a      	ldr	r2, [r7, #4]
 80022da:	212c      	movs	r1, #44	; 0x2c
 80022dc:	fb01 f303 	mul.w	r3, r1, r3
 80022e0:	4413      	add	r3, r2
 80022e2:	333d      	adds	r3, #61	; 0x3d
 80022e4:	7f3a      	ldrb	r2, [r7, #28]
 80022e6:	701a      	strb	r2, [r3, #0]
 80022e8:	e008      	b.n	80022fc <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80022ea:	78fb      	ldrb	r3, [r7, #3]
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	212c      	movs	r1, #44	; 0x2c
 80022f0:	fb01 f303 	mul.w	r3, r1, r3
 80022f4:	4413      	add	r3, r2
 80022f6:	3342      	adds	r3, #66	; 0x42
 80022f8:	2202      	movs	r2, #2
 80022fa:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80022fc:	787b      	ldrb	r3, [r7, #1]
 80022fe:	2b03      	cmp	r3, #3
 8002300:	f200 80c6 	bhi.w	8002490 <HAL_HCD_HC_SubmitRequest+0x210>
 8002304:	a201      	add	r2, pc, #4	; (adr r2, 800230c <HAL_HCD_HC_SubmitRequest+0x8c>)
 8002306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800230a:	bf00      	nop
 800230c:	0800231d 	.word	0x0800231d
 8002310:	0800247d 	.word	0x0800247d
 8002314:	08002381 	.word	0x08002381
 8002318:	080023ff 	.word	0x080023ff
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 800231c:	7c3b      	ldrb	r3, [r7, #16]
 800231e:	2b01      	cmp	r3, #1
 8002320:	f040 80b8 	bne.w	8002494 <HAL_HCD_HC_SubmitRequest+0x214>
 8002324:	78bb      	ldrb	r3, [r7, #2]
 8002326:	2b00      	cmp	r3, #0
 8002328:	f040 80b4 	bne.w	8002494 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 800232c:	8b3b      	ldrh	r3, [r7, #24]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d108      	bne.n	8002344 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002332:	78fb      	ldrb	r3, [r7, #3]
 8002334:	687a      	ldr	r2, [r7, #4]
 8002336:	212c      	movs	r1, #44	; 0x2c
 8002338:	fb01 f303 	mul.w	r3, r1, r3
 800233c:	4413      	add	r3, r2
 800233e:	3355      	adds	r3, #85	; 0x55
 8002340:	2201      	movs	r2, #1
 8002342:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002344:	78fb      	ldrb	r3, [r7, #3]
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	212c      	movs	r1, #44	; 0x2c
 800234a:	fb01 f303 	mul.w	r3, r1, r3
 800234e:	4413      	add	r3, r2
 8002350:	3355      	adds	r3, #85	; 0x55
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d109      	bne.n	800236c <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002358:	78fb      	ldrb	r3, [r7, #3]
 800235a:	687a      	ldr	r2, [r7, #4]
 800235c:	212c      	movs	r1, #44	; 0x2c
 800235e:	fb01 f303 	mul.w	r3, r1, r3
 8002362:	4413      	add	r3, r2
 8002364:	3342      	adds	r3, #66	; 0x42
 8002366:	2200      	movs	r2, #0
 8002368:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800236a:	e093      	b.n	8002494 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800236c:	78fb      	ldrb	r3, [r7, #3]
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	212c      	movs	r1, #44	; 0x2c
 8002372:	fb01 f303 	mul.w	r3, r1, r3
 8002376:	4413      	add	r3, r2
 8002378:	3342      	adds	r3, #66	; 0x42
 800237a:	2202      	movs	r2, #2
 800237c:	701a      	strb	r2, [r3, #0]
      break;
 800237e:	e089      	b.n	8002494 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002380:	78bb      	ldrb	r3, [r7, #2]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d11d      	bne.n	80023c2 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002386:	78fb      	ldrb	r3, [r7, #3]
 8002388:	687a      	ldr	r2, [r7, #4]
 800238a:	212c      	movs	r1, #44	; 0x2c
 800238c:	fb01 f303 	mul.w	r3, r1, r3
 8002390:	4413      	add	r3, r2
 8002392:	3355      	adds	r3, #85	; 0x55
 8002394:	781b      	ldrb	r3, [r3, #0]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d109      	bne.n	80023ae <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800239a:	78fb      	ldrb	r3, [r7, #3]
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	212c      	movs	r1, #44	; 0x2c
 80023a0:	fb01 f303 	mul.w	r3, r1, r3
 80023a4:	4413      	add	r3, r2
 80023a6:	3342      	adds	r3, #66	; 0x42
 80023a8:	2200      	movs	r2, #0
 80023aa:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80023ac:	e073      	b.n	8002496 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80023ae:	78fb      	ldrb	r3, [r7, #3]
 80023b0:	687a      	ldr	r2, [r7, #4]
 80023b2:	212c      	movs	r1, #44	; 0x2c
 80023b4:	fb01 f303 	mul.w	r3, r1, r3
 80023b8:	4413      	add	r3, r2
 80023ba:	3342      	adds	r3, #66	; 0x42
 80023bc:	2202      	movs	r2, #2
 80023be:	701a      	strb	r2, [r3, #0]
      break;
 80023c0:	e069      	b.n	8002496 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80023c2:	78fb      	ldrb	r3, [r7, #3]
 80023c4:	687a      	ldr	r2, [r7, #4]
 80023c6:	212c      	movs	r1, #44	; 0x2c
 80023c8:	fb01 f303 	mul.w	r3, r1, r3
 80023cc:	4413      	add	r3, r2
 80023ce:	3354      	adds	r3, #84	; 0x54
 80023d0:	781b      	ldrb	r3, [r3, #0]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d109      	bne.n	80023ea <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80023d6:	78fb      	ldrb	r3, [r7, #3]
 80023d8:	687a      	ldr	r2, [r7, #4]
 80023da:	212c      	movs	r1, #44	; 0x2c
 80023dc:	fb01 f303 	mul.w	r3, r1, r3
 80023e0:	4413      	add	r3, r2
 80023e2:	3342      	adds	r3, #66	; 0x42
 80023e4:	2200      	movs	r2, #0
 80023e6:	701a      	strb	r2, [r3, #0]
      break;
 80023e8:	e055      	b.n	8002496 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80023ea:	78fb      	ldrb	r3, [r7, #3]
 80023ec:	687a      	ldr	r2, [r7, #4]
 80023ee:	212c      	movs	r1, #44	; 0x2c
 80023f0:	fb01 f303 	mul.w	r3, r1, r3
 80023f4:	4413      	add	r3, r2
 80023f6:	3342      	adds	r3, #66	; 0x42
 80023f8:	2202      	movs	r2, #2
 80023fa:	701a      	strb	r2, [r3, #0]
      break;
 80023fc:	e04b      	b.n	8002496 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80023fe:	78bb      	ldrb	r3, [r7, #2]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d11d      	bne.n	8002440 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002404:	78fb      	ldrb	r3, [r7, #3]
 8002406:	687a      	ldr	r2, [r7, #4]
 8002408:	212c      	movs	r1, #44	; 0x2c
 800240a:	fb01 f303 	mul.w	r3, r1, r3
 800240e:	4413      	add	r3, r2
 8002410:	3355      	adds	r3, #85	; 0x55
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d109      	bne.n	800242c <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002418:	78fb      	ldrb	r3, [r7, #3]
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	212c      	movs	r1, #44	; 0x2c
 800241e:	fb01 f303 	mul.w	r3, r1, r3
 8002422:	4413      	add	r3, r2
 8002424:	3342      	adds	r3, #66	; 0x42
 8002426:	2200      	movs	r2, #0
 8002428:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800242a:	e034      	b.n	8002496 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800242c:	78fb      	ldrb	r3, [r7, #3]
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	212c      	movs	r1, #44	; 0x2c
 8002432:	fb01 f303 	mul.w	r3, r1, r3
 8002436:	4413      	add	r3, r2
 8002438:	3342      	adds	r3, #66	; 0x42
 800243a:	2202      	movs	r2, #2
 800243c:	701a      	strb	r2, [r3, #0]
      break;
 800243e:	e02a      	b.n	8002496 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002440:	78fb      	ldrb	r3, [r7, #3]
 8002442:	687a      	ldr	r2, [r7, #4]
 8002444:	212c      	movs	r1, #44	; 0x2c
 8002446:	fb01 f303 	mul.w	r3, r1, r3
 800244a:	4413      	add	r3, r2
 800244c:	3354      	adds	r3, #84	; 0x54
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d109      	bne.n	8002468 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002454:	78fb      	ldrb	r3, [r7, #3]
 8002456:	687a      	ldr	r2, [r7, #4]
 8002458:	212c      	movs	r1, #44	; 0x2c
 800245a:	fb01 f303 	mul.w	r3, r1, r3
 800245e:	4413      	add	r3, r2
 8002460:	3342      	adds	r3, #66	; 0x42
 8002462:	2200      	movs	r2, #0
 8002464:	701a      	strb	r2, [r3, #0]
      break;
 8002466:	e016      	b.n	8002496 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002468:	78fb      	ldrb	r3, [r7, #3]
 800246a:	687a      	ldr	r2, [r7, #4]
 800246c:	212c      	movs	r1, #44	; 0x2c
 800246e:	fb01 f303 	mul.w	r3, r1, r3
 8002472:	4413      	add	r3, r2
 8002474:	3342      	adds	r3, #66	; 0x42
 8002476:	2202      	movs	r2, #2
 8002478:	701a      	strb	r2, [r3, #0]
      break;
 800247a:	e00c      	b.n	8002496 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800247c:	78fb      	ldrb	r3, [r7, #3]
 800247e:	687a      	ldr	r2, [r7, #4]
 8002480:	212c      	movs	r1, #44	; 0x2c
 8002482:	fb01 f303 	mul.w	r3, r1, r3
 8002486:	4413      	add	r3, r2
 8002488:	3342      	adds	r3, #66	; 0x42
 800248a:	2200      	movs	r2, #0
 800248c:	701a      	strb	r2, [r3, #0]
      break;
 800248e:	e002      	b.n	8002496 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8002490:	bf00      	nop
 8002492:	e000      	b.n	8002496 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8002494:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002496:	78fb      	ldrb	r3, [r7, #3]
 8002498:	687a      	ldr	r2, [r7, #4]
 800249a:	212c      	movs	r1, #44	; 0x2c
 800249c:	fb01 f303 	mul.w	r3, r1, r3
 80024a0:	4413      	add	r3, r2
 80024a2:	3344      	adds	r3, #68	; 0x44
 80024a4:	697a      	ldr	r2, [r7, #20]
 80024a6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80024a8:	78fb      	ldrb	r3, [r7, #3]
 80024aa:	8b3a      	ldrh	r2, [r7, #24]
 80024ac:	6879      	ldr	r1, [r7, #4]
 80024ae:	202c      	movs	r0, #44	; 0x2c
 80024b0:	fb00 f303 	mul.w	r3, r0, r3
 80024b4:	440b      	add	r3, r1
 80024b6:	334c      	adds	r3, #76	; 0x4c
 80024b8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80024ba:	78fb      	ldrb	r3, [r7, #3]
 80024bc:	687a      	ldr	r2, [r7, #4]
 80024be:	212c      	movs	r1, #44	; 0x2c
 80024c0:	fb01 f303 	mul.w	r3, r1, r3
 80024c4:	4413      	add	r3, r2
 80024c6:	3360      	adds	r3, #96	; 0x60
 80024c8:	2200      	movs	r2, #0
 80024ca:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80024cc:	78fb      	ldrb	r3, [r7, #3]
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	212c      	movs	r1, #44	; 0x2c
 80024d2:	fb01 f303 	mul.w	r3, r1, r3
 80024d6:	4413      	add	r3, r2
 80024d8:	3350      	adds	r3, #80	; 0x50
 80024da:	2200      	movs	r2, #0
 80024dc:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80024de:	78fb      	ldrb	r3, [r7, #3]
 80024e0:	687a      	ldr	r2, [r7, #4]
 80024e2:	212c      	movs	r1, #44	; 0x2c
 80024e4:	fb01 f303 	mul.w	r3, r1, r3
 80024e8:	4413      	add	r3, r2
 80024ea:	3339      	adds	r3, #57	; 0x39
 80024ec:	78fa      	ldrb	r2, [r7, #3]
 80024ee:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80024f0:	78fb      	ldrb	r3, [r7, #3]
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	212c      	movs	r1, #44	; 0x2c
 80024f6:	fb01 f303 	mul.w	r3, r1, r3
 80024fa:	4413      	add	r3, r2
 80024fc:	3361      	adds	r3, #97	; 0x61
 80024fe:	2200      	movs	r2, #0
 8002500:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6818      	ldr	r0, [r3, #0]
 8002506:	78fb      	ldrb	r3, [r7, #3]
 8002508:	222c      	movs	r2, #44	; 0x2c
 800250a:	fb02 f303 	mul.w	r3, r2, r3
 800250e:	3338      	adds	r3, #56	; 0x38
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	18d1      	adds	r1, r2, r3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	691b      	ldr	r3, [r3, #16]
 8002518:	b2db      	uxtb	r3, r3
 800251a:	461a      	mov	r2, r3
 800251c:	f004 fae6 	bl	8006aec <USB_HC_StartXfer>
 8002520:	4603      	mov	r3, r0
}
 8002522:	4618      	mov	r0, r3
 8002524:	3708      	adds	r7, #8
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop

0800252c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b086      	sub	sp, #24
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4618      	mov	r0, r3
 8002544:	f003 ffe7 	bl	8006516 <USB_GetMode>
 8002548:	4603      	mov	r3, r0
 800254a:	2b01      	cmp	r3, #1
 800254c:	f040 80f6 	bne.w	800273c <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4618      	mov	r0, r3
 8002556:	f003 ffcb 	bl	80064f0 <USB_ReadInterrupts>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	f000 80ec 	beq.w	800273a <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4618      	mov	r0, r3
 8002568:	f003 ffc2 	bl	80064f0 <USB_ReadInterrupts>
 800256c:	4603      	mov	r3, r0
 800256e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002572:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002576:	d104      	bne.n	8002582 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002580:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4618      	mov	r0, r3
 8002588:	f003 ffb2 	bl	80064f0 <USB_ReadInterrupts>
 800258c:	4603      	mov	r3, r0
 800258e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002592:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002596:	d104      	bne.n	80025a2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80025a0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4618      	mov	r0, r3
 80025a8:	f003 ffa2 	bl	80064f0 <USB_ReadInterrupts>
 80025ac:	4603      	mov	r3, r0
 80025ae:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80025b2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80025b6:	d104      	bne.n	80025c2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80025c0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4618      	mov	r0, r3
 80025c8:	f003 ff92 	bl	80064f0 <USB_ReadInterrupts>
 80025cc:	4603      	mov	r3, r0
 80025ce:	f003 0302 	and.w	r3, r3, #2
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	d103      	bne.n	80025de <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	2202      	movs	r2, #2
 80025dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4618      	mov	r0, r3
 80025e4:	f003 ff84 	bl	80064f0 <USB_ReadInterrupts>
 80025e8:	4603      	mov	r3, r0
 80025ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80025ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80025f2:	d11c      	bne.n	800262e <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80025fc:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0301 	and.w	r3, r3, #1
 800260a:	2b00      	cmp	r3, #0
 800260c:	d10f      	bne.n	800262e <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800260e:	2110      	movs	r1, #16
 8002610:	6938      	ldr	r0, [r7, #16]
 8002612:	f003 fe73 	bl	80062fc <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002616:	6938      	ldr	r0, [r7, #16]
 8002618:	f003 fea4 	bl	8006364 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	2101      	movs	r1, #1
 8002622:	4618      	mov	r0, r3
 8002624:	f004 f87a 	bl	800671c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002628:	6878      	ldr	r0, [r7, #4]
 800262a:	f009 f973 	bl	800b914 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4618      	mov	r0, r3
 8002634:	f003 ff5c 	bl	80064f0 <USB_ReadInterrupts>
 8002638:	4603      	mov	r3, r0
 800263a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800263e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002642:	d102      	bne.n	800264a <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8002644:	6878      	ldr	r0, [r7, #4]
 8002646:	f001 f89e 	bl	8003786 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4618      	mov	r0, r3
 8002650:	f003 ff4e 	bl	80064f0 <USB_ReadInterrupts>
 8002654:	4603      	mov	r3, r0
 8002656:	f003 0308 	and.w	r3, r3, #8
 800265a:	2b08      	cmp	r3, #8
 800265c:	d106      	bne.n	800266c <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f009 f93c 	bl	800b8dc <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	2208      	movs	r2, #8
 800266a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4618      	mov	r0, r3
 8002672:	f003 ff3d 	bl	80064f0 <USB_ReadInterrupts>
 8002676:	4603      	mov	r3, r0
 8002678:	f003 0310 	and.w	r3, r3, #16
 800267c:	2b10      	cmp	r3, #16
 800267e:	d101      	bne.n	8002684 <HAL_HCD_IRQHandler+0x158>
 8002680:	2301      	movs	r3, #1
 8002682:	e000      	b.n	8002686 <HAL_HCD_IRQHandler+0x15a>
 8002684:	2300      	movs	r3, #0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d012      	beq.n	80026b0 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	699a      	ldr	r2, [r3, #24]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f022 0210 	bic.w	r2, r2, #16
 8002698:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f000 ffa1 	bl	80035e2 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	699a      	ldr	r2, [r3, #24]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f042 0210 	orr.w	r2, r2, #16
 80026ae:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4618      	mov	r0, r3
 80026b6:	f003 ff1b 	bl	80064f0 <USB_ReadInterrupts>
 80026ba:	4603      	mov	r3, r0
 80026bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026c0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80026c4:	d13a      	bne.n	800273c <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4618      	mov	r0, r3
 80026cc:	f004 fb50 	bl	8006d70 <USB_HC_ReadInterrupt>
 80026d0:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80026d2:	2300      	movs	r3, #0
 80026d4:	617b      	str	r3, [r7, #20]
 80026d6:	e025      	b.n	8002724 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	f003 030f 	and.w	r3, r3, #15
 80026de:	68ba      	ldr	r2, [r7, #8]
 80026e0:	fa22 f303 	lsr.w	r3, r2, r3
 80026e4:	f003 0301 	and.w	r3, r3, #1
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d018      	beq.n	800271e <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	015a      	lsls	r2, r3, #5
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	4413      	add	r3, r2
 80026f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002702:	d106      	bne.n	8002712 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	b2db      	uxtb	r3, r3
 8002708:	4619      	mov	r1, r3
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f000 f8ab 	bl	8002866 <HCD_HC_IN_IRQHandler>
 8002710:	e005      	b.n	800271e <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	b2db      	uxtb	r3, r3
 8002716:	4619      	mov	r1, r3
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	f000 fbf9 	bl	8002f10 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	3301      	adds	r3, #1
 8002722:	617b      	str	r3, [r7, #20]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	697a      	ldr	r2, [r7, #20]
 800272a:	429a      	cmp	r2, r3
 800272c:	d3d4      	bcc.n	80026d8 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002736:	615a      	str	r2, [r3, #20]
 8002738:	e000      	b.n	800273c <HAL_HCD_IRQHandler+0x210>
      return;
 800273a:	bf00      	nop
    }
  }
}
 800273c:	3718      	adds	r7, #24
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}

08002742 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002742:	b580      	push	{r7, lr}
 8002744:	b082      	sub	sp, #8
 8002746:	af00      	add	r7, sp, #0
 8002748:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002750:	2b01      	cmp	r3, #1
 8002752:	d101      	bne.n	8002758 <HAL_HCD_Start+0x16>
 8002754:	2302      	movs	r3, #2
 8002756:	e013      	b.n	8002780 <HAL_HCD_Start+0x3e>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2201      	movs	r2, #1
 800275c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	2101      	movs	r1, #1
 8002766:	4618      	mov	r0, r3
 8002768:	f004 f83c 	bl	80067e4 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4618      	mov	r0, r3
 8002772:	f003 fd54 	bl	800621e <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2200      	movs	r2, #0
 800277a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800277e:	2300      	movs	r3, #0
}
 8002780:	4618      	mov	r0, r3
 8002782:	3708      	adds	r7, #8
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}

08002788 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b082      	sub	sp, #8
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002796:	2b01      	cmp	r3, #1
 8002798:	d101      	bne.n	800279e <HAL_HCD_Stop+0x16>
 800279a:	2302      	movs	r3, #2
 800279c:	e00d      	b.n	80027ba <HAL_HCD_Stop+0x32>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2201      	movs	r2, #1
 80027a2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4618      	mov	r0, r3
 80027ac:	f004 fc2a 	bl	8007004 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2200      	movs	r2, #0
 80027b4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80027b8:	2300      	movs	r3, #0
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3708      	adds	r7, #8
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}

080027c2 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80027c2:	b580      	push	{r7, lr}
 80027c4:	b082      	sub	sp, #8
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4618      	mov	r0, r3
 80027d0:	f003 ffde 	bl	8006790 <USB_ResetPort>
 80027d4:	4603      	mov	r3, r0
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3708      	adds	r7, #8
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}

080027de <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80027de:	b480      	push	{r7}
 80027e0:	b083      	sub	sp, #12
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	6078      	str	r0, [r7, #4]
 80027e6:	460b      	mov	r3, r1
 80027e8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80027ea:	78fb      	ldrb	r3, [r7, #3]
 80027ec:	687a      	ldr	r2, [r7, #4]
 80027ee:	212c      	movs	r1, #44	; 0x2c
 80027f0:	fb01 f303 	mul.w	r3, r1, r3
 80027f4:	4413      	add	r3, r2
 80027f6:	3360      	adds	r3, #96	; 0x60
 80027f8:	781b      	ldrb	r3, [r3, #0]
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	370c      	adds	r7, #12
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr

08002806 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002806:	b480      	push	{r7}
 8002808:	b083      	sub	sp, #12
 800280a:	af00      	add	r7, sp, #0
 800280c:	6078      	str	r0, [r7, #4]
 800280e:	460b      	mov	r3, r1
 8002810:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002812:	78fb      	ldrb	r3, [r7, #3]
 8002814:	687a      	ldr	r2, [r7, #4]
 8002816:	212c      	movs	r1, #44	; 0x2c
 8002818:	fb01 f303 	mul.w	r3, r1, r3
 800281c:	4413      	add	r3, r2
 800281e:	3350      	adds	r3, #80	; 0x50
 8002820:	681b      	ldr	r3, [r3, #0]
}
 8002822:	4618      	mov	r0, r3
 8002824:	370c      	adds	r7, #12
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr

0800282e <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800282e:	b580      	push	{r7, lr}
 8002830:	b082      	sub	sp, #8
 8002832:	af00      	add	r7, sp, #0
 8002834:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4618      	mov	r0, r3
 800283c:	f004 f822 	bl	8006884 <USB_GetCurrentFrame>
 8002840:	4603      	mov	r3, r0
}
 8002842:	4618      	mov	r0, r3
 8002844:	3708      	adds	r7, #8
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}

0800284a <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800284a:	b580      	push	{r7, lr}
 800284c:	b082      	sub	sp, #8
 800284e:	af00      	add	r7, sp, #0
 8002850:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4618      	mov	r0, r3
 8002858:	f003 fffd 	bl	8006856 <USB_GetHostSpeed>
 800285c:	4603      	mov	r3, r0
}
 800285e:	4618      	mov	r0, r3
 8002860:	3708      	adds	r7, #8
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}

08002866 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002866:	b580      	push	{r7, lr}
 8002868:	b086      	sub	sp, #24
 800286a:	af00      	add	r7, sp, #0
 800286c:	6078      	str	r0, [r7, #4]
 800286e:	460b      	mov	r3, r1
 8002870:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800287c:	78fb      	ldrb	r3, [r7, #3]
 800287e:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	015a      	lsls	r2, r3, #5
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	4413      	add	r3, r2
 8002888:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	f003 0304 	and.w	r3, r3, #4
 8002892:	2b04      	cmp	r3, #4
 8002894:	d11a      	bne.n	80028cc <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	015a      	lsls	r2, r3, #5
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	4413      	add	r3, r2
 800289e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028a2:	461a      	mov	r2, r3
 80028a4:	2304      	movs	r3, #4
 80028a6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	212c      	movs	r1, #44	; 0x2c
 80028ae:	fb01 f303 	mul.w	r3, r1, r3
 80028b2:	4413      	add	r3, r2
 80028b4:	3361      	adds	r3, #97	; 0x61
 80028b6:	2206      	movs	r2, #6
 80028b8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	68fa      	ldr	r2, [r7, #12]
 80028c0:	b2d2      	uxtb	r2, r2
 80028c2:	4611      	mov	r1, r2
 80028c4:	4618      	mov	r0, r3
 80028c6:	f004 fa64 	bl	8006d92 <USB_HC_Halt>
 80028ca:	e0af      	b.n	8002a2c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	015a      	lsls	r2, r3, #5
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	4413      	add	r3, r2
 80028d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028e2:	d11b      	bne.n	800291c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	015a      	lsls	r2, r3, #5
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	4413      	add	r3, r2
 80028ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028f0:	461a      	mov	r2, r3
 80028f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028f6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80028f8:	687a      	ldr	r2, [r7, #4]
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	212c      	movs	r1, #44	; 0x2c
 80028fe:	fb01 f303 	mul.w	r3, r1, r3
 8002902:	4413      	add	r3, r2
 8002904:	3361      	adds	r3, #97	; 0x61
 8002906:	2207      	movs	r2, #7
 8002908:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	68fa      	ldr	r2, [r7, #12]
 8002910:	b2d2      	uxtb	r2, r2
 8002912:	4611      	mov	r1, r2
 8002914:	4618      	mov	r0, r3
 8002916:	f004 fa3c 	bl	8006d92 <USB_HC_Halt>
 800291a:	e087      	b.n	8002a2c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	015a      	lsls	r2, r3, #5
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	4413      	add	r3, r2
 8002924:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	f003 0320 	and.w	r3, r3, #32
 800292e:	2b20      	cmp	r3, #32
 8002930:	d109      	bne.n	8002946 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	015a      	lsls	r2, r3, #5
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	4413      	add	r3, r2
 800293a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800293e:	461a      	mov	r2, r3
 8002940:	2320      	movs	r3, #32
 8002942:	6093      	str	r3, [r2, #8]
 8002944:	e072      	b.n	8002a2c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	015a      	lsls	r2, r3, #5
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	4413      	add	r3, r2
 800294e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	f003 0308 	and.w	r3, r3, #8
 8002958:	2b08      	cmp	r3, #8
 800295a:	d11a      	bne.n	8002992 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	015a      	lsls	r2, r3, #5
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	4413      	add	r3, r2
 8002964:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002968:	461a      	mov	r2, r3
 800296a:	2308      	movs	r3, #8
 800296c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800296e:	687a      	ldr	r2, [r7, #4]
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	212c      	movs	r1, #44	; 0x2c
 8002974:	fb01 f303 	mul.w	r3, r1, r3
 8002978:	4413      	add	r3, r2
 800297a:	3361      	adds	r3, #97	; 0x61
 800297c:	2205      	movs	r2, #5
 800297e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	68fa      	ldr	r2, [r7, #12]
 8002986:	b2d2      	uxtb	r2, r2
 8002988:	4611      	mov	r1, r2
 800298a:	4618      	mov	r0, r3
 800298c:	f004 fa01 	bl	8006d92 <USB_HC_Halt>
 8002990:	e04c      	b.n	8002a2c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	015a      	lsls	r2, r3, #5
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	4413      	add	r3, r2
 800299a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029a8:	d11b      	bne.n	80029e2 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	015a      	lsls	r2, r3, #5
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	4413      	add	r3, r2
 80029b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029b6:	461a      	mov	r2, r3
 80029b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029bc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	212c      	movs	r1, #44	; 0x2c
 80029c4:	fb01 f303 	mul.w	r3, r1, r3
 80029c8:	4413      	add	r3, r2
 80029ca:	3361      	adds	r3, #97	; 0x61
 80029cc:	2208      	movs	r2, #8
 80029ce:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	68fa      	ldr	r2, [r7, #12]
 80029d6:	b2d2      	uxtb	r2, r2
 80029d8:	4611      	mov	r1, r2
 80029da:	4618      	mov	r0, r3
 80029dc:	f004 f9d9 	bl	8006d92 <USB_HC_Halt>
 80029e0:	e024      	b.n	8002a2c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	015a      	lsls	r2, r3, #5
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	4413      	add	r3, r2
 80029ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029f4:	2b80      	cmp	r3, #128	; 0x80
 80029f6:	d119      	bne.n	8002a2c <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	015a      	lsls	r2, r3, #5
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	4413      	add	r3, r2
 8002a00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a04:	461a      	mov	r2, r3
 8002a06:	2380      	movs	r3, #128	; 0x80
 8002a08:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002a0a:	687a      	ldr	r2, [r7, #4]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	212c      	movs	r1, #44	; 0x2c
 8002a10:	fb01 f303 	mul.w	r3, r1, r3
 8002a14:	4413      	add	r3, r2
 8002a16:	3361      	adds	r3, #97	; 0x61
 8002a18:	2206      	movs	r2, #6
 8002a1a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	68fa      	ldr	r2, [r7, #12]
 8002a22:	b2d2      	uxtb	r2, r2
 8002a24:	4611      	mov	r1, r2
 8002a26:	4618      	mov	r0, r3
 8002a28:	f004 f9b3 	bl	8006d92 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	015a      	lsls	r2, r3, #5
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	4413      	add	r3, r2
 8002a34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a42:	d112      	bne.n	8002a6a <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	68fa      	ldr	r2, [r7, #12]
 8002a4a:	b2d2      	uxtb	r2, r2
 8002a4c:	4611      	mov	r1, r2
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f004 f99f 	bl	8006d92 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	015a      	lsls	r2, r3, #5
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	4413      	add	r3, r2
 8002a5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a60:	461a      	mov	r2, r3
 8002a62:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a66:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002a68:	e24e      	b.n	8002f08 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	015a      	lsls	r2, r3, #5
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	4413      	add	r3, r2
 8002a72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	f003 0301 	and.w	r3, r3, #1
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	f040 80df 	bne.w	8002c40 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	691b      	ldr	r3, [r3, #16]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d019      	beq.n	8002abe <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002a8a:	687a      	ldr	r2, [r7, #4]
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	212c      	movs	r1, #44	; 0x2c
 8002a90:	fb01 f303 	mul.w	r3, r1, r3
 8002a94:	4413      	add	r3, r2
 8002a96:	3348      	adds	r3, #72	; 0x48
 8002a98:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	0159      	lsls	r1, r3, #5
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	440b      	add	r3, r1
 8002aa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aa6:	691b      	ldr	r3, [r3, #16]
 8002aa8:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002aac:	1ad2      	subs	r2, r2, r3
 8002aae:	6879      	ldr	r1, [r7, #4]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	202c      	movs	r0, #44	; 0x2c
 8002ab4:	fb00 f303 	mul.w	r3, r0, r3
 8002ab8:	440b      	add	r3, r1
 8002aba:	3350      	adds	r3, #80	; 0x50
 8002abc:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	212c      	movs	r1, #44	; 0x2c
 8002ac4:	fb01 f303 	mul.w	r3, r1, r3
 8002ac8:	4413      	add	r3, r2
 8002aca:	3361      	adds	r3, #97	; 0x61
 8002acc:	2201      	movs	r2, #1
 8002ace:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002ad0:	687a      	ldr	r2, [r7, #4]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	212c      	movs	r1, #44	; 0x2c
 8002ad6:	fb01 f303 	mul.w	r3, r1, r3
 8002ada:	4413      	add	r3, r2
 8002adc:	335c      	adds	r3, #92	; 0x5c
 8002ade:	2200      	movs	r2, #0
 8002ae0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	015a      	lsls	r2, r3, #5
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	4413      	add	r3, r2
 8002aea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aee:	461a      	mov	r2, r3
 8002af0:	2301      	movs	r3, #1
 8002af2:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002af4:	687a      	ldr	r2, [r7, #4]
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	212c      	movs	r1, #44	; 0x2c
 8002afa:	fb01 f303 	mul.w	r3, r1, r3
 8002afe:	4413      	add	r3, r2
 8002b00:	333f      	adds	r3, #63	; 0x3f
 8002b02:	781b      	ldrb	r3, [r3, #0]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d009      	beq.n	8002b1c <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002b08:	687a      	ldr	r2, [r7, #4]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	212c      	movs	r1, #44	; 0x2c
 8002b0e:	fb01 f303 	mul.w	r3, r1, r3
 8002b12:	4413      	add	r3, r2
 8002b14:	333f      	adds	r3, #63	; 0x3f
 8002b16:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002b18:	2b02      	cmp	r3, #2
 8002b1a:	d111      	bne.n	8002b40 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	68fa      	ldr	r2, [r7, #12]
 8002b22:	b2d2      	uxtb	r2, r2
 8002b24:	4611      	mov	r1, r2
 8002b26:	4618      	mov	r0, r3
 8002b28:	f004 f933 	bl	8006d92 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	015a      	lsls	r2, r3, #5
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	4413      	add	r3, r2
 8002b34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b38:	461a      	mov	r2, r3
 8002b3a:	2310      	movs	r3, #16
 8002b3c:	6093      	str	r3, [r2, #8]
 8002b3e:	e03a      	b.n	8002bb6 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002b40:	687a      	ldr	r2, [r7, #4]
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	212c      	movs	r1, #44	; 0x2c
 8002b46:	fb01 f303 	mul.w	r3, r1, r3
 8002b4a:	4413      	add	r3, r2
 8002b4c:	333f      	adds	r3, #63	; 0x3f
 8002b4e:	781b      	ldrb	r3, [r3, #0]
 8002b50:	2b03      	cmp	r3, #3
 8002b52:	d009      	beq.n	8002b68 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8002b54:	687a      	ldr	r2, [r7, #4]
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	212c      	movs	r1, #44	; 0x2c
 8002b5a:	fb01 f303 	mul.w	r3, r1, r3
 8002b5e:	4413      	add	r3, r2
 8002b60:	333f      	adds	r3, #63	; 0x3f
 8002b62:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d126      	bne.n	8002bb6 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	015a      	lsls	r2, r3, #5
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	4413      	add	r3, r2
 8002b70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	68fa      	ldr	r2, [r7, #12]
 8002b78:	0151      	lsls	r1, r2, #5
 8002b7a:	693a      	ldr	r2, [r7, #16]
 8002b7c:	440a      	add	r2, r1
 8002b7e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b82:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002b86:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002b88:	687a      	ldr	r2, [r7, #4]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	212c      	movs	r1, #44	; 0x2c
 8002b8e:	fb01 f303 	mul.w	r3, r1, r3
 8002b92:	4413      	add	r3, r2
 8002b94:	3360      	adds	r3, #96	; 0x60
 8002b96:	2201      	movs	r2, #1
 8002b98:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	b2d9      	uxtb	r1, r3
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	202c      	movs	r0, #44	; 0x2c
 8002ba4:	fb00 f303 	mul.w	r3, r0, r3
 8002ba8:	4413      	add	r3, r2
 8002baa:	3360      	adds	r3, #96	; 0x60
 8002bac:	781b      	ldrb	r3, [r3, #0]
 8002bae:	461a      	mov	r2, r3
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	f008 febd 	bl	800b930 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	691b      	ldr	r3, [r3, #16]
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d12b      	bne.n	8002c16 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	212c      	movs	r1, #44	; 0x2c
 8002bc4:	fb01 f303 	mul.w	r3, r1, r3
 8002bc8:	4413      	add	r3, r2
 8002bca:	3348      	adds	r3, #72	; 0x48
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	6879      	ldr	r1, [r7, #4]
 8002bd0:	68fa      	ldr	r2, [r7, #12]
 8002bd2:	202c      	movs	r0, #44	; 0x2c
 8002bd4:	fb00 f202 	mul.w	r2, r0, r2
 8002bd8:	440a      	add	r2, r1
 8002bda:	3240      	adds	r2, #64	; 0x40
 8002bdc:	8812      	ldrh	r2, [r2, #0]
 8002bde:	fbb3 f3f2 	udiv	r3, r3, r2
 8002be2:	f003 0301 	and.w	r3, r3, #1
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	f000 818e 	beq.w	8002f08 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002bec:	687a      	ldr	r2, [r7, #4]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	212c      	movs	r1, #44	; 0x2c
 8002bf2:	fb01 f303 	mul.w	r3, r1, r3
 8002bf6:	4413      	add	r3, r2
 8002bf8:	3354      	adds	r3, #84	; 0x54
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	f083 0301 	eor.w	r3, r3, #1
 8002c00:	b2d8      	uxtb	r0, r3
 8002c02:	687a      	ldr	r2, [r7, #4]
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	212c      	movs	r1, #44	; 0x2c
 8002c08:	fb01 f303 	mul.w	r3, r1, r3
 8002c0c:	4413      	add	r3, r2
 8002c0e:	3354      	adds	r3, #84	; 0x54
 8002c10:	4602      	mov	r2, r0
 8002c12:	701a      	strb	r2, [r3, #0]
}
 8002c14:	e178      	b.n	8002f08 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002c16:	687a      	ldr	r2, [r7, #4]
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	212c      	movs	r1, #44	; 0x2c
 8002c1c:	fb01 f303 	mul.w	r3, r1, r3
 8002c20:	4413      	add	r3, r2
 8002c22:	3354      	adds	r3, #84	; 0x54
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	f083 0301 	eor.w	r3, r3, #1
 8002c2a:	b2d8      	uxtb	r0, r3
 8002c2c:	687a      	ldr	r2, [r7, #4]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	212c      	movs	r1, #44	; 0x2c
 8002c32:	fb01 f303 	mul.w	r3, r1, r3
 8002c36:	4413      	add	r3, r2
 8002c38:	3354      	adds	r3, #84	; 0x54
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	701a      	strb	r2, [r3, #0]
}
 8002c3e:	e163      	b.n	8002f08 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	015a      	lsls	r2, r3, #5
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	4413      	add	r3, r2
 8002c48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	f003 0302 	and.w	r3, r3, #2
 8002c52:	2b02      	cmp	r3, #2
 8002c54:	f040 80f6 	bne.w	8002e44 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002c58:	687a      	ldr	r2, [r7, #4]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	212c      	movs	r1, #44	; 0x2c
 8002c5e:	fb01 f303 	mul.w	r3, r1, r3
 8002c62:	4413      	add	r3, r2
 8002c64:	3361      	adds	r3, #97	; 0x61
 8002c66:	781b      	ldrb	r3, [r3, #0]
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d109      	bne.n	8002c80 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002c6c:	687a      	ldr	r2, [r7, #4]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	212c      	movs	r1, #44	; 0x2c
 8002c72:	fb01 f303 	mul.w	r3, r1, r3
 8002c76:	4413      	add	r3, r2
 8002c78:	3360      	adds	r3, #96	; 0x60
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	701a      	strb	r2, [r3, #0]
 8002c7e:	e0c9      	b.n	8002e14 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	212c      	movs	r1, #44	; 0x2c
 8002c86:	fb01 f303 	mul.w	r3, r1, r3
 8002c8a:	4413      	add	r3, r2
 8002c8c:	3361      	adds	r3, #97	; 0x61
 8002c8e:	781b      	ldrb	r3, [r3, #0]
 8002c90:	2b05      	cmp	r3, #5
 8002c92:	d109      	bne.n	8002ca8 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002c94:	687a      	ldr	r2, [r7, #4]
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	212c      	movs	r1, #44	; 0x2c
 8002c9a:	fb01 f303 	mul.w	r3, r1, r3
 8002c9e:	4413      	add	r3, r2
 8002ca0:	3360      	adds	r3, #96	; 0x60
 8002ca2:	2205      	movs	r2, #5
 8002ca4:	701a      	strb	r2, [r3, #0]
 8002ca6:	e0b5      	b.n	8002e14 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002ca8:	687a      	ldr	r2, [r7, #4]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	212c      	movs	r1, #44	; 0x2c
 8002cae:	fb01 f303 	mul.w	r3, r1, r3
 8002cb2:	4413      	add	r3, r2
 8002cb4:	3361      	adds	r3, #97	; 0x61
 8002cb6:	781b      	ldrb	r3, [r3, #0]
 8002cb8:	2b06      	cmp	r3, #6
 8002cba:	d009      	beq.n	8002cd0 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002cbc:	687a      	ldr	r2, [r7, #4]
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	212c      	movs	r1, #44	; 0x2c
 8002cc2:	fb01 f303 	mul.w	r3, r1, r3
 8002cc6:	4413      	add	r3, r2
 8002cc8:	3361      	adds	r3, #97	; 0x61
 8002cca:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002ccc:	2b08      	cmp	r3, #8
 8002cce:	d150      	bne.n	8002d72 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8002cd0:	687a      	ldr	r2, [r7, #4]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	212c      	movs	r1, #44	; 0x2c
 8002cd6:	fb01 f303 	mul.w	r3, r1, r3
 8002cda:	4413      	add	r3, r2
 8002cdc:	335c      	adds	r3, #92	; 0x5c
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	1c5a      	adds	r2, r3, #1
 8002ce2:	6879      	ldr	r1, [r7, #4]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	202c      	movs	r0, #44	; 0x2c
 8002ce8:	fb00 f303 	mul.w	r3, r0, r3
 8002cec:	440b      	add	r3, r1
 8002cee:	335c      	adds	r3, #92	; 0x5c
 8002cf0:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002cf2:	687a      	ldr	r2, [r7, #4]
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	212c      	movs	r1, #44	; 0x2c
 8002cf8:	fb01 f303 	mul.w	r3, r1, r3
 8002cfc:	4413      	add	r3, r2
 8002cfe:	335c      	adds	r3, #92	; 0x5c
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	2b02      	cmp	r3, #2
 8002d04:	d912      	bls.n	8002d2c <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002d06:	687a      	ldr	r2, [r7, #4]
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	212c      	movs	r1, #44	; 0x2c
 8002d0c:	fb01 f303 	mul.w	r3, r1, r3
 8002d10:	4413      	add	r3, r2
 8002d12:	335c      	adds	r3, #92	; 0x5c
 8002d14:	2200      	movs	r2, #0
 8002d16:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002d18:	687a      	ldr	r2, [r7, #4]
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	212c      	movs	r1, #44	; 0x2c
 8002d1e:	fb01 f303 	mul.w	r3, r1, r3
 8002d22:	4413      	add	r3, r2
 8002d24:	3360      	adds	r3, #96	; 0x60
 8002d26:	2204      	movs	r2, #4
 8002d28:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002d2a:	e073      	b.n	8002e14 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002d2c:	687a      	ldr	r2, [r7, #4]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	212c      	movs	r1, #44	; 0x2c
 8002d32:	fb01 f303 	mul.w	r3, r1, r3
 8002d36:	4413      	add	r3, r2
 8002d38:	3360      	adds	r3, #96	; 0x60
 8002d3a:	2202      	movs	r2, #2
 8002d3c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	015a      	lsls	r2, r3, #5
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	4413      	add	r3, r2
 8002d46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002d54:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002d5c:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	015a      	lsls	r2, r3, #5
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	4413      	add	r3, r2
 8002d66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002d70:	e050      	b.n	8002e14 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002d72:	687a      	ldr	r2, [r7, #4]
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	212c      	movs	r1, #44	; 0x2c
 8002d78:	fb01 f303 	mul.w	r3, r1, r3
 8002d7c:	4413      	add	r3, r2
 8002d7e:	3361      	adds	r3, #97	; 0x61
 8002d80:	781b      	ldrb	r3, [r3, #0]
 8002d82:	2b03      	cmp	r3, #3
 8002d84:	d122      	bne.n	8002dcc <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002d86:	687a      	ldr	r2, [r7, #4]
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	212c      	movs	r1, #44	; 0x2c
 8002d8c:	fb01 f303 	mul.w	r3, r1, r3
 8002d90:	4413      	add	r3, r2
 8002d92:	3360      	adds	r3, #96	; 0x60
 8002d94:	2202      	movs	r2, #2
 8002d96:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	015a      	lsls	r2, r3, #5
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	4413      	add	r3, r2
 8002da0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002dae:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002db6:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	015a      	lsls	r2, r3, #5
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	4413      	add	r3, r2
 8002dc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	6013      	str	r3, [r2, #0]
 8002dca:	e023      	b.n	8002e14 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002dcc:	687a      	ldr	r2, [r7, #4]
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	212c      	movs	r1, #44	; 0x2c
 8002dd2:	fb01 f303 	mul.w	r3, r1, r3
 8002dd6:	4413      	add	r3, r2
 8002dd8:	3361      	adds	r3, #97	; 0x61
 8002dda:	781b      	ldrb	r3, [r3, #0]
 8002ddc:	2b07      	cmp	r3, #7
 8002dde:	d119      	bne.n	8002e14 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002de0:	687a      	ldr	r2, [r7, #4]
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	212c      	movs	r1, #44	; 0x2c
 8002de6:	fb01 f303 	mul.w	r3, r1, r3
 8002dea:	4413      	add	r3, r2
 8002dec:	335c      	adds	r3, #92	; 0x5c
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	1c5a      	adds	r2, r3, #1
 8002df2:	6879      	ldr	r1, [r7, #4]
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	202c      	movs	r0, #44	; 0x2c
 8002df8:	fb00 f303 	mul.w	r3, r0, r3
 8002dfc:	440b      	add	r3, r1
 8002dfe:	335c      	adds	r3, #92	; 0x5c
 8002e00:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	212c      	movs	r1, #44	; 0x2c
 8002e08:	fb01 f303 	mul.w	r3, r1, r3
 8002e0c:	4413      	add	r3, r2
 8002e0e:	3360      	adds	r3, #96	; 0x60
 8002e10:	2204      	movs	r2, #4
 8002e12:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	015a      	lsls	r2, r3, #5
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	4413      	add	r3, r2
 8002e1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e20:	461a      	mov	r2, r3
 8002e22:	2302      	movs	r3, #2
 8002e24:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	b2d9      	uxtb	r1, r3
 8002e2a:	687a      	ldr	r2, [r7, #4]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	202c      	movs	r0, #44	; 0x2c
 8002e30:	fb00 f303 	mul.w	r3, r0, r3
 8002e34:	4413      	add	r3, r2
 8002e36:	3360      	adds	r3, #96	; 0x60
 8002e38:	781b      	ldrb	r3, [r3, #0]
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	f008 fd77 	bl	800b930 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002e42:	e061      	b.n	8002f08 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	015a      	lsls	r2, r3, #5
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	4413      	add	r3, r2
 8002e4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	f003 0310 	and.w	r3, r3, #16
 8002e56:	2b10      	cmp	r3, #16
 8002e58:	d156      	bne.n	8002f08 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002e5a:	687a      	ldr	r2, [r7, #4]
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	212c      	movs	r1, #44	; 0x2c
 8002e60:	fb01 f303 	mul.w	r3, r1, r3
 8002e64:	4413      	add	r3, r2
 8002e66:	333f      	adds	r3, #63	; 0x3f
 8002e68:	781b      	ldrb	r3, [r3, #0]
 8002e6a:	2b03      	cmp	r3, #3
 8002e6c:	d111      	bne.n	8002e92 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002e6e:	687a      	ldr	r2, [r7, #4]
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	212c      	movs	r1, #44	; 0x2c
 8002e74:	fb01 f303 	mul.w	r3, r1, r3
 8002e78:	4413      	add	r3, r2
 8002e7a:	335c      	adds	r3, #92	; 0x5c
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	68fa      	ldr	r2, [r7, #12]
 8002e86:	b2d2      	uxtb	r2, r2
 8002e88:	4611      	mov	r1, r2
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f003 ff81 	bl	8006d92 <USB_HC_Halt>
 8002e90:	e031      	b.n	8002ef6 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	212c      	movs	r1, #44	; 0x2c
 8002e98:	fb01 f303 	mul.w	r3, r1, r3
 8002e9c:	4413      	add	r3, r2
 8002e9e:	333f      	adds	r3, #63	; 0x3f
 8002ea0:	781b      	ldrb	r3, [r3, #0]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d009      	beq.n	8002eba <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002ea6:	687a      	ldr	r2, [r7, #4]
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	212c      	movs	r1, #44	; 0x2c
 8002eac:	fb01 f303 	mul.w	r3, r1, r3
 8002eb0:	4413      	add	r3, r2
 8002eb2:	333f      	adds	r3, #63	; 0x3f
 8002eb4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002eb6:	2b02      	cmp	r3, #2
 8002eb8:	d11d      	bne.n	8002ef6 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002eba:	687a      	ldr	r2, [r7, #4]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	212c      	movs	r1, #44	; 0x2c
 8002ec0:	fb01 f303 	mul.w	r3, r1, r3
 8002ec4:	4413      	add	r3, r2
 8002ec6:	335c      	adds	r3, #92	; 0x5c
 8002ec8:	2200      	movs	r2, #0
 8002eca:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	691b      	ldr	r3, [r3, #16]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d110      	bne.n	8002ef6 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8002ed4:	687a      	ldr	r2, [r7, #4]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	212c      	movs	r1, #44	; 0x2c
 8002eda:	fb01 f303 	mul.w	r3, r1, r3
 8002ede:	4413      	add	r3, r2
 8002ee0:	3361      	adds	r3, #97	; 0x61
 8002ee2:	2203      	movs	r2, #3
 8002ee4:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	68fa      	ldr	r2, [r7, #12]
 8002eec:	b2d2      	uxtb	r2, r2
 8002eee:	4611      	mov	r1, r2
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f003 ff4e 	bl	8006d92 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	015a      	lsls	r2, r3, #5
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	4413      	add	r3, r2
 8002efe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f02:	461a      	mov	r2, r3
 8002f04:	2310      	movs	r3, #16
 8002f06:	6093      	str	r3, [r2, #8]
}
 8002f08:	bf00      	nop
 8002f0a:	3718      	adds	r7, #24
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}

08002f10 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b088      	sub	sp, #32
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
 8002f18:	460b      	mov	r3, r1
 8002f1a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f22:	69fb      	ldr	r3, [r7, #28]
 8002f24:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002f26:	78fb      	ldrb	r3, [r7, #3]
 8002f28:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	015a      	lsls	r2, r3, #5
 8002f2e:	69bb      	ldr	r3, [r7, #24]
 8002f30:	4413      	add	r3, r2
 8002f32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	f003 0304 	and.w	r3, r3, #4
 8002f3c:	2b04      	cmp	r3, #4
 8002f3e:	d11a      	bne.n	8002f76 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	015a      	lsls	r2, r3, #5
 8002f44:	69bb      	ldr	r3, [r7, #24]
 8002f46:	4413      	add	r3, r2
 8002f48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f4c:	461a      	mov	r2, r3
 8002f4e:	2304      	movs	r3, #4
 8002f50:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002f52:	687a      	ldr	r2, [r7, #4]
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	212c      	movs	r1, #44	; 0x2c
 8002f58:	fb01 f303 	mul.w	r3, r1, r3
 8002f5c:	4413      	add	r3, r2
 8002f5e:	3361      	adds	r3, #97	; 0x61
 8002f60:	2206      	movs	r2, #6
 8002f62:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	697a      	ldr	r2, [r7, #20]
 8002f6a:	b2d2      	uxtb	r2, r2
 8002f6c:	4611      	mov	r1, r2
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f003 ff0f 	bl	8006d92 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8002f74:	e331      	b.n	80035da <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	015a      	lsls	r2, r3, #5
 8002f7a:	69bb      	ldr	r3, [r7, #24]
 8002f7c:	4413      	add	r3, r2
 8002f7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	f003 0320 	and.w	r3, r3, #32
 8002f88:	2b20      	cmp	r3, #32
 8002f8a:	d12e      	bne.n	8002fea <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	015a      	lsls	r2, r3, #5
 8002f90:	69bb      	ldr	r3, [r7, #24]
 8002f92:	4413      	add	r3, r2
 8002f94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f98:	461a      	mov	r2, r3
 8002f9a:	2320      	movs	r3, #32
 8002f9c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	212c      	movs	r1, #44	; 0x2c
 8002fa4:	fb01 f303 	mul.w	r3, r1, r3
 8002fa8:	4413      	add	r3, r2
 8002faa:	333d      	adds	r3, #61	; 0x3d
 8002fac:	781b      	ldrb	r3, [r3, #0]
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	f040 8313 	bne.w	80035da <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8002fb4:	687a      	ldr	r2, [r7, #4]
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	212c      	movs	r1, #44	; 0x2c
 8002fba:	fb01 f303 	mul.w	r3, r1, r3
 8002fbe:	4413      	add	r3, r2
 8002fc0:	333d      	adds	r3, #61	; 0x3d
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	212c      	movs	r1, #44	; 0x2c
 8002fcc:	fb01 f303 	mul.w	r3, r1, r3
 8002fd0:	4413      	add	r3, r2
 8002fd2:	3360      	adds	r3, #96	; 0x60
 8002fd4:	2202      	movs	r2, #2
 8002fd6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	697a      	ldr	r2, [r7, #20]
 8002fde:	b2d2      	uxtb	r2, r2
 8002fe0:	4611      	mov	r1, r2
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f003 fed5 	bl	8006d92 <USB_HC_Halt>
}
 8002fe8:	e2f7      	b.n	80035da <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	015a      	lsls	r2, r3, #5
 8002fee:	69bb      	ldr	r3, [r7, #24]
 8002ff0:	4413      	add	r3, r2
 8002ff2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ffc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003000:	d112      	bne.n	8003028 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	015a      	lsls	r2, r3, #5
 8003006:	69bb      	ldr	r3, [r7, #24]
 8003008:	4413      	add	r3, r2
 800300a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800300e:	461a      	mov	r2, r3
 8003010:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003014:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	697a      	ldr	r2, [r7, #20]
 800301c:	b2d2      	uxtb	r2, r2
 800301e:	4611      	mov	r1, r2
 8003020:	4618      	mov	r0, r3
 8003022:	f003 feb6 	bl	8006d92 <USB_HC_Halt>
}
 8003026:	e2d8      	b.n	80035da <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	015a      	lsls	r2, r3, #5
 800302c:	69bb      	ldr	r3, [r7, #24]
 800302e:	4413      	add	r3, r2
 8003030:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	f003 0301 	and.w	r3, r3, #1
 800303a:	2b01      	cmp	r3, #1
 800303c:	d140      	bne.n	80030c0 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800303e:	687a      	ldr	r2, [r7, #4]
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	212c      	movs	r1, #44	; 0x2c
 8003044:	fb01 f303 	mul.w	r3, r1, r3
 8003048:	4413      	add	r3, r2
 800304a:	335c      	adds	r3, #92	; 0x5c
 800304c:	2200      	movs	r2, #0
 800304e:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	015a      	lsls	r2, r3, #5
 8003054:	69bb      	ldr	r3, [r7, #24]
 8003056:	4413      	add	r3, r2
 8003058:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003062:	2b40      	cmp	r3, #64	; 0x40
 8003064:	d111      	bne.n	800308a <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	212c      	movs	r1, #44	; 0x2c
 800306c:	fb01 f303 	mul.w	r3, r1, r3
 8003070:	4413      	add	r3, r2
 8003072:	333d      	adds	r3, #61	; 0x3d
 8003074:	2201      	movs	r2, #1
 8003076:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	015a      	lsls	r2, r3, #5
 800307c:	69bb      	ldr	r3, [r7, #24]
 800307e:	4413      	add	r3, r2
 8003080:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003084:	461a      	mov	r2, r3
 8003086:	2340      	movs	r3, #64	; 0x40
 8003088:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	015a      	lsls	r2, r3, #5
 800308e:	69bb      	ldr	r3, [r7, #24]
 8003090:	4413      	add	r3, r2
 8003092:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003096:	461a      	mov	r2, r3
 8003098:	2301      	movs	r3, #1
 800309a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800309c:	687a      	ldr	r2, [r7, #4]
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	212c      	movs	r1, #44	; 0x2c
 80030a2:	fb01 f303 	mul.w	r3, r1, r3
 80030a6:	4413      	add	r3, r2
 80030a8:	3361      	adds	r3, #97	; 0x61
 80030aa:	2201      	movs	r2, #1
 80030ac:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	697a      	ldr	r2, [r7, #20]
 80030b4:	b2d2      	uxtb	r2, r2
 80030b6:	4611      	mov	r1, r2
 80030b8:	4618      	mov	r0, r3
 80030ba:	f003 fe6a 	bl	8006d92 <USB_HC_Halt>
}
 80030be:	e28c      	b.n	80035da <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	015a      	lsls	r2, r3, #5
 80030c4:	69bb      	ldr	r3, [r7, #24]
 80030c6:	4413      	add	r3, r2
 80030c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030d2:	2b40      	cmp	r3, #64	; 0x40
 80030d4:	d12c      	bne.n	8003130 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 80030d6:	687a      	ldr	r2, [r7, #4]
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	212c      	movs	r1, #44	; 0x2c
 80030dc:	fb01 f303 	mul.w	r3, r1, r3
 80030e0:	4413      	add	r3, r2
 80030e2:	3361      	adds	r3, #97	; 0x61
 80030e4:	2204      	movs	r2, #4
 80030e6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80030e8:	687a      	ldr	r2, [r7, #4]
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	212c      	movs	r1, #44	; 0x2c
 80030ee:	fb01 f303 	mul.w	r3, r1, r3
 80030f2:	4413      	add	r3, r2
 80030f4:	333d      	adds	r3, #61	; 0x3d
 80030f6:	2201      	movs	r2, #1
 80030f8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	212c      	movs	r1, #44	; 0x2c
 8003100:	fb01 f303 	mul.w	r3, r1, r3
 8003104:	4413      	add	r3, r2
 8003106:	335c      	adds	r3, #92	; 0x5c
 8003108:	2200      	movs	r2, #0
 800310a:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	697a      	ldr	r2, [r7, #20]
 8003112:	b2d2      	uxtb	r2, r2
 8003114:	4611      	mov	r1, r2
 8003116:	4618      	mov	r0, r3
 8003118:	f003 fe3b 	bl	8006d92 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	015a      	lsls	r2, r3, #5
 8003120:	69bb      	ldr	r3, [r7, #24]
 8003122:	4413      	add	r3, r2
 8003124:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003128:	461a      	mov	r2, r3
 800312a:	2340      	movs	r3, #64	; 0x40
 800312c:	6093      	str	r3, [r2, #8]
}
 800312e:	e254      	b.n	80035da <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	015a      	lsls	r2, r3, #5
 8003134:	69bb      	ldr	r3, [r7, #24]
 8003136:	4413      	add	r3, r2
 8003138:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	f003 0308 	and.w	r3, r3, #8
 8003142:	2b08      	cmp	r3, #8
 8003144:	d11a      	bne.n	800317c <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	015a      	lsls	r2, r3, #5
 800314a:	69bb      	ldr	r3, [r7, #24]
 800314c:	4413      	add	r3, r2
 800314e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003152:	461a      	mov	r2, r3
 8003154:	2308      	movs	r3, #8
 8003156:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8003158:	687a      	ldr	r2, [r7, #4]
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	212c      	movs	r1, #44	; 0x2c
 800315e:	fb01 f303 	mul.w	r3, r1, r3
 8003162:	4413      	add	r3, r2
 8003164:	3361      	adds	r3, #97	; 0x61
 8003166:	2205      	movs	r2, #5
 8003168:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	697a      	ldr	r2, [r7, #20]
 8003170:	b2d2      	uxtb	r2, r2
 8003172:	4611      	mov	r1, r2
 8003174:	4618      	mov	r0, r3
 8003176:	f003 fe0c 	bl	8006d92 <USB_HC_Halt>
}
 800317a:	e22e      	b.n	80035da <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	015a      	lsls	r2, r3, #5
 8003180:	69bb      	ldr	r3, [r7, #24]
 8003182:	4413      	add	r3, r2
 8003184:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	f003 0310 	and.w	r3, r3, #16
 800318e:	2b10      	cmp	r3, #16
 8003190:	d140      	bne.n	8003214 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003192:	687a      	ldr	r2, [r7, #4]
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	212c      	movs	r1, #44	; 0x2c
 8003198:	fb01 f303 	mul.w	r3, r1, r3
 800319c:	4413      	add	r3, r2
 800319e:	335c      	adds	r3, #92	; 0x5c
 80031a0:	2200      	movs	r2, #0
 80031a2:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80031a4:	687a      	ldr	r2, [r7, #4]
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	212c      	movs	r1, #44	; 0x2c
 80031aa:	fb01 f303 	mul.w	r3, r1, r3
 80031ae:	4413      	add	r3, r2
 80031b0:	3361      	adds	r3, #97	; 0x61
 80031b2:	2203      	movs	r2, #3
 80031b4:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80031b6:	687a      	ldr	r2, [r7, #4]
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	212c      	movs	r1, #44	; 0x2c
 80031bc:	fb01 f303 	mul.w	r3, r1, r3
 80031c0:	4413      	add	r3, r2
 80031c2:	333d      	adds	r3, #61	; 0x3d
 80031c4:	781b      	ldrb	r3, [r3, #0]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d112      	bne.n	80031f0 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80031ca:	687a      	ldr	r2, [r7, #4]
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	212c      	movs	r1, #44	; 0x2c
 80031d0:	fb01 f303 	mul.w	r3, r1, r3
 80031d4:	4413      	add	r3, r2
 80031d6:	333c      	adds	r3, #60	; 0x3c
 80031d8:	781b      	ldrb	r3, [r3, #0]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d108      	bne.n	80031f0 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	212c      	movs	r1, #44	; 0x2c
 80031e4:	fb01 f303 	mul.w	r3, r1, r3
 80031e8:	4413      	add	r3, r2
 80031ea:	333d      	adds	r3, #61	; 0x3d
 80031ec:	2201      	movs	r2, #1
 80031ee:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	697a      	ldr	r2, [r7, #20]
 80031f6:	b2d2      	uxtb	r2, r2
 80031f8:	4611      	mov	r1, r2
 80031fa:	4618      	mov	r0, r3
 80031fc:	f003 fdc9 	bl	8006d92 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	015a      	lsls	r2, r3, #5
 8003204:	69bb      	ldr	r3, [r7, #24]
 8003206:	4413      	add	r3, r2
 8003208:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800320c:	461a      	mov	r2, r3
 800320e:	2310      	movs	r3, #16
 8003210:	6093      	str	r3, [r2, #8]
}
 8003212:	e1e2      	b.n	80035da <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	015a      	lsls	r2, r3, #5
 8003218:	69bb      	ldr	r3, [r7, #24]
 800321a:	4413      	add	r3, r2
 800321c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003226:	2b80      	cmp	r3, #128	; 0x80
 8003228:	d164      	bne.n	80032f4 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	691b      	ldr	r3, [r3, #16]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d111      	bne.n	8003256 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8003232:	687a      	ldr	r2, [r7, #4]
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	212c      	movs	r1, #44	; 0x2c
 8003238:	fb01 f303 	mul.w	r3, r1, r3
 800323c:	4413      	add	r3, r2
 800323e:	3361      	adds	r3, #97	; 0x61
 8003240:	2206      	movs	r2, #6
 8003242:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	697a      	ldr	r2, [r7, #20]
 800324a:	b2d2      	uxtb	r2, r2
 800324c:	4611      	mov	r1, r2
 800324e:	4618      	mov	r0, r3
 8003250:	f003 fd9f 	bl	8006d92 <USB_HC_Halt>
 8003254:	e044      	b.n	80032e0 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8003256:	687a      	ldr	r2, [r7, #4]
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	212c      	movs	r1, #44	; 0x2c
 800325c:	fb01 f303 	mul.w	r3, r1, r3
 8003260:	4413      	add	r3, r2
 8003262:	335c      	adds	r3, #92	; 0x5c
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	1c5a      	adds	r2, r3, #1
 8003268:	6879      	ldr	r1, [r7, #4]
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	202c      	movs	r0, #44	; 0x2c
 800326e:	fb00 f303 	mul.w	r3, r0, r3
 8003272:	440b      	add	r3, r1
 8003274:	335c      	adds	r3, #92	; 0x5c
 8003276:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003278:	687a      	ldr	r2, [r7, #4]
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	212c      	movs	r1, #44	; 0x2c
 800327e:	fb01 f303 	mul.w	r3, r1, r3
 8003282:	4413      	add	r3, r2
 8003284:	335c      	adds	r3, #92	; 0x5c
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	2b02      	cmp	r3, #2
 800328a:	d920      	bls.n	80032ce <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800328c:	687a      	ldr	r2, [r7, #4]
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	212c      	movs	r1, #44	; 0x2c
 8003292:	fb01 f303 	mul.w	r3, r1, r3
 8003296:	4413      	add	r3, r2
 8003298:	335c      	adds	r3, #92	; 0x5c
 800329a:	2200      	movs	r2, #0
 800329c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	212c      	movs	r1, #44	; 0x2c
 80032a4:	fb01 f303 	mul.w	r3, r1, r3
 80032a8:	4413      	add	r3, r2
 80032aa:	3360      	adds	r3, #96	; 0x60
 80032ac:	2204      	movs	r2, #4
 80032ae:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	b2d9      	uxtb	r1, r3
 80032b4:	687a      	ldr	r2, [r7, #4]
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	202c      	movs	r0, #44	; 0x2c
 80032ba:	fb00 f303 	mul.w	r3, r0, r3
 80032be:	4413      	add	r3, r2
 80032c0:	3360      	adds	r3, #96	; 0x60
 80032c2:	781b      	ldrb	r3, [r3, #0]
 80032c4:	461a      	mov	r2, r3
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	f008 fb32 	bl	800b930 <HAL_HCD_HC_NotifyURBChange_Callback>
 80032cc:	e008      	b.n	80032e0 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	212c      	movs	r1, #44	; 0x2c
 80032d4:	fb01 f303 	mul.w	r3, r1, r3
 80032d8:	4413      	add	r3, r2
 80032da:	3360      	adds	r3, #96	; 0x60
 80032dc:	2202      	movs	r2, #2
 80032de:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	015a      	lsls	r2, r3, #5
 80032e4:	69bb      	ldr	r3, [r7, #24]
 80032e6:	4413      	add	r3, r2
 80032e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032ec:	461a      	mov	r2, r3
 80032ee:	2380      	movs	r3, #128	; 0x80
 80032f0:	6093      	str	r3, [r2, #8]
}
 80032f2:	e172      	b.n	80035da <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	015a      	lsls	r2, r3, #5
 80032f8:	69bb      	ldr	r3, [r7, #24]
 80032fa:	4413      	add	r3, r2
 80032fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003306:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800330a:	d11b      	bne.n	8003344 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800330c:	687a      	ldr	r2, [r7, #4]
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	212c      	movs	r1, #44	; 0x2c
 8003312:	fb01 f303 	mul.w	r3, r1, r3
 8003316:	4413      	add	r3, r2
 8003318:	3361      	adds	r3, #97	; 0x61
 800331a:	2208      	movs	r2, #8
 800331c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	697a      	ldr	r2, [r7, #20]
 8003324:	b2d2      	uxtb	r2, r2
 8003326:	4611      	mov	r1, r2
 8003328:	4618      	mov	r0, r3
 800332a:	f003 fd32 	bl	8006d92 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	015a      	lsls	r2, r3, #5
 8003332:	69bb      	ldr	r3, [r7, #24]
 8003334:	4413      	add	r3, r2
 8003336:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800333a:	461a      	mov	r2, r3
 800333c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003340:	6093      	str	r3, [r2, #8]
}
 8003342:	e14a      	b.n	80035da <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	015a      	lsls	r2, r3, #5
 8003348:	69bb      	ldr	r3, [r7, #24]
 800334a:	4413      	add	r3, r2
 800334c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	f003 0302 	and.w	r3, r3, #2
 8003356:	2b02      	cmp	r3, #2
 8003358:	f040 813f 	bne.w	80035da <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800335c:	687a      	ldr	r2, [r7, #4]
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	212c      	movs	r1, #44	; 0x2c
 8003362:	fb01 f303 	mul.w	r3, r1, r3
 8003366:	4413      	add	r3, r2
 8003368:	3361      	adds	r3, #97	; 0x61
 800336a:	781b      	ldrb	r3, [r3, #0]
 800336c:	2b01      	cmp	r3, #1
 800336e:	d17d      	bne.n	800346c <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003370:	687a      	ldr	r2, [r7, #4]
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	212c      	movs	r1, #44	; 0x2c
 8003376:	fb01 f303 	mul.w	r3, r1, r3
 800337a:	4413      	add	r3, r2
 800337c:	3360      	adds	r3, #96	; 0x60
 800337e:	2201      	movs	r2, #1
 8003380:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003382:	687a      	ldr	r2, [r7, #4]
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	212c      	movs	r1, #44	; 0x2c
 8003388:	fb01 f303 	mul.w	r3, r1, r3
 800338c:	4413      	add	r3, r2
 800338e:	333f      	adds	r3, #63	; 0x3f
 8003390:	781b      	ldrb	r3, [r3, #0]
 8003392:	2b02      	cmp	r3, #2
 8003394:	d00a      	beq.n	80033ac <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003396:	687a      	ldr	r2, [r7, #4]
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	212c      	movs	r1, #44	; 0x2c
 800339c:	fb01 f303 	mul.w	r3, r1, r3
 80033a0:	4413      	add	r3, r2
 80033a2:	333f      	adds	r3, #63	; 0x3f
 80033a4:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80033a6:	2b03      	cmp	r3, #3
 80033a8:	f040 8100 	bne.w	80035ac <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	691b      	ldr	r3, [r3, #16]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d113      	bne.n	80033dc <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80033b4:	687a      	ldr	r2, [r7, #4]
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	212c      	movs	r1, #44	; 0x2c
 80033ba:	fb01 f303 	mul.w	r3, r1, r3
 80033be:	4413      	add	r3, r2
 80033c0:	3355      	adds	r3, #85	; 0x55
 80033c2:	781b      	ldrb	r3, [r3, #0]
 80033c4:	f083 0301 	eor.w	r3, r3, #1
 80033c8:	b2d8      	uxtb	r0, r3
 80033ca:	687a      	ldr	r2, [r7, #4]
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	212c      	movs	r1, #44	; 0x2c
 80033d0:	fb01 f303 	mul.w	r3, r1, r3
 80033d4:	4413      	add	r3, r2
 80033d6:	3355      	adds	r3, #85	; 0x55
 80033d8:	4602      	mov	r2, r0
 80033da:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	691b      	ldr	r3, [r3, #16]
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	f040 80e3 	bne.w	80035ac <HCD_HC_OUT_IRQHandler+0x69c>
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	212c      	movs	r1, #44	; 0x2c
 80033ec:	fb01 f303 	mul.w	r3, r1, r3
 80033f0:	4413      	add	r3, r2
 80033f2:	334c      	adds	r3, #76	; 0x4c
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	f000 80d8 	beq.w	80035ac <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80033fc:	687a      	ldr	r2, [r7, #4]
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	212c      	movs	r1, #44	; 0x2c
 8003402:	fb01 f303 	mul.w	r3, r1, r3
 8003406:	4413      	add	r3, r2
 8003408:	334c      	adds	r3, #76	; 0x4c
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	6879      	ldr	r1, [r7, #4]
 800340e:	697a      	ldr	r2, [r7, #20]
 8003410:	202c      	movs	r0, #44	; 0x2c
 8003412:	fb00 f202 	mul.w	r2, r0, r2
 8003416:	440a      	add	r2, r1
 8003418:	3240      	adds	r2, #64	; 0x40
 800341a:	8812      	ldrh	r2, [r2, #0]
 800341c:	4413      	add	r3, r2
 800341e:	3b01      	subs	r3, #1
 8003420:	6879      	ldr	r1, [r7, #4]
 8003422:	697a      	ldr	r2, [r7, #20]
 8003424:	202c      	movs	r0, #44	; 0x2c
 8003426:	fb00 f202 	mul.w	r2, r0, r2
 800342a:	440a      	add	r2, r1
 800342c:	3240      	adds	r2, #64	; 0x40
 800342e:	8812      	ldrh	r2, [r2, #0]
 8003430:	fbb3 f3f2 	udiv	r3, r3, r2
 8003434:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	f003 0301 	and.w	r3, r3, #1
 800343c:	2b00      	cmp	r3, #0
 800343e:	f000 80b5 	beq.w	80035ac <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8003442:	687a      	ldr	r2, [r7, #4]
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	212c      	movs	r1, #44	; 0x2c
 8003448:	fb01 f303 	mul.w	r3, r1, r3
 800344c:	4413      	add	r3, r2
 800344e:	3355      	adds	r3, #85	; 0x55
 8003450:	781b      	ldrb	r3, [r3, #0]
 8003452:	f083 0301 	eor.w	r3, r3, #1
 8003456:	b2d8      	uxtb	r0, r3
 8003458:	687a      	ldr	r2, [r7, #4]
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	212c      	movs	r1, #44	; 0x2c
 800345e:	fb01 f303 	mul.w	r3, r1, r3
 8003462:	4413      	add	r3, r2
 8003464:	3355      	adds	r3, #85	; 0x55
 8003466:	4602      	mov	r2, r0
 8003468:	701a      	strb	r2, [r3, #0]
 800346a:	e09f      	b.n	80035ac <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800346c:	687a      	ldr	r2, [r7, #4]
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	212c      	movs	r1, #44	; 0x2c
 8003472:	fb01 f303 	mul.w	r3, r1, r3
 8003476:	4413      	add	r3, r2
 8003478:	3361      	adds	r3, #97	; 0x61
 800347a:	781b      	ldrb	r3, [r3, #0]
 800347c:	2b03      	cmp	r3, #3
 800347e:	d109      	bne.n	8003494 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003480:	687a      	ldr	r2, [r7, #4]
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	212c      	movs	r1, #44	; 0x2c
 8003486:	fb01 f303 	mul.w	r3, r1, r3
 800348a:	4413      	add	r3, r2
 800348c:	3360      	adds	r3, #96	; 0x60
 800348e:	2202      	movs	r2, #2
 8003490:	701a      	strb	r2, [r3, #0]
 8003492:	e08b      	b.n	80035ac <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003494:	687a      	ldr	r2, [r7, #4]
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	212c      	movs	r1, #44	; 0x2c
 800349a:	fb01 f303 	mul.w	r3, r1, r3
 800349e:	4413      	add	r3, r2
 80034a0:	3361      	adds	r3, #97	; 0x61
 80034a2:	781b      	ldrb	r3, [r3, #0]
 80034a4:	2b04      	cmp	r3, #4
 80034a6:	d109      	bne.n	80034bc <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80034a8:	687a      	ldr	r2, [r7, #4]
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	212c      	movs	r1, #44	; 0x2c
 80034ae:	fb01 f303 	mul.w	r3, r1, r3
 80034b2:	4413      	add	r3, r2
 80034b4:	3360      	adds	r3, #96	; 0x60
 80034b6:	2202      	movs	r2, #2
 80034b8:	701a      	strb	r2, [r3, #0]
 80034ba:	e077      	b.n	80035ac <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80034bc:	687a      	ldr	r2, [r7, #4]
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	212c      	movs	r1, #44	; 0x2c
 80034c2:	fb01 f303 	mul.w	r3, r1, r3
 80034c6:	4413      	add	r3, r2
 80034c8:	3361      	adds	r3, #97	; 0x61
 80034ca:	781b      	ldrb	r3, [r3, #0]
 80034cc:	2b05      	cmp	r3, #5
 80034ce:	d109      	bne.n	80034e4 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80034d0:	687a      	ldr	r2, [r7, #4]
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	212c      	movs	r1, #44	; 0x2c
 80034d6:	fb01 f303 	mul.w	r3, r1, r3
 80034da:	4413      	add	r3, r2
 80034dc:	3360      	adds	r3, #96	; 0x60
 80034de:	2205      	movs	r2, #5
 80034e0:	701a      	strb	r2, [r3, #0]
 80034e2:	e063      	b.n	80035ac <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80034e4:	687a      	ldr	r2, [r7, #4]
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	212c      	movs	r1, #44	; 0x2c
 80034ea:	fb01 f303 	mul.w	r3, r1, r3
 80034ee:	4413      	add	r3, r2
 80034f0:	3361      	adds	r3, #97	; 0x61
 80034f2:	781b      	ldrb	r3, [r3, #0]
 80034f4:	2b06      	cmp	r3, #6
 80034f6:	d009      	beq.n	800350c <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80034f8:	687a      	ldr	r2, [r7, #4]
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	212c      	movs	r1, #44	; 0x2c
 80034fe:	fb01 f303 	mul.w	r3, r1, r3
 8003502:	4413      	add	r3, r2
 8003504:	3361      	adds	r3, #97	; 0x61
 8003506:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003508:	2b08      	cmp	r3, #8
 800350a:	d14f      	bne.n	80035ac <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 800350c:	687a      	ldr	r2, [r7, #4]
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	212c      	movs	r1, #44	; 0x2c
 8003512:	fb01 f303 	mul.w	r3, r1, r3
 8003516:	4413      	add	r3, r2
 8003518:	335c      	adds	r3, #92	; 0x5c
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	1c5a      	adds	r2, r3, #1
 800351e:	6879      	ldr	r1, [r7, #4]
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	202c      	movs	r0, #44	; 0x2c
 8003524:	fb00 f303 	mul.w	r3, r0, r3
 8003528:	440b      	add	r3, r1
 800352a:	335c      	adds	r3, #92	; 0x5c
 800352c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800352e:	687a      	ldr	r2, [r7, #4]
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	212c      	movs	r1, #44	; 0x2c
 8003534:	fb01 f303 	mul.w	r3, r1, r3
 8003538:	4413      	add	r3, r2
 800353a:	335c      	adds	r3, #92	; 0x5c
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	2b02      	cmp	r3, #2
 8003540:	d912      	bls.n	8003568 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	212c      	movs	r1, #44	; 0x2c
 8003548:	fb01 f303 	mul.w	r3, r1, r3
 800354c:	4413      	add	r3, r2
 800354e:	335c      	adds	r3, #92	; 0x5c
 8003550:	2200      	movs	r2, #0
 8003552:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003554:	687a      	ldr	r2, [r7, #4]
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	212c      	movs	r1, #44	; 0x2c
 800355a:	fb01 f303 	mul.w	r3, r1, r3
 800355e:	4413      	add	r3, r2
 8003560:	3360      	adds	r3, #96	; 0x60
 8003562:	2204      	movs	r2, #4
 8003564:	701a      	strb	r2, [r3, #0]
 8003566:	e021      	b.n	80035ac <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003568:	687a      	ldr	r2, [r7, #4]
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	212c      	movs	r1, #44	; 0x2c
 800356e:	fb01 f303 	mul.w	r3, r1, r3
 8003572:	4413      	add	r3, r2
 8003574:	3360      	adds	r3, #96	; 0x60
 8003576:	2202      	movs	r2, #2
 8003578:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	015a      	lsls	r2, r3, #5
 800357e:	69bb      	ldr	r3, [r7, #24]
 8003580:	4413      	add	r3, r2
 8003582:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003590:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003598:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	015a      	lsls	r2, r3, #5
 800359e:	69bb      	ldr	r3, [r7, #24]
 80035a0:	4413      	add	r3, r2
 80035a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035a6:	461a      	mov	r2, r3
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	015a      	lsls	r2, r3, #5
 80035b0:	69bb      	ldr	r3, [r7, #24]
 80035b2:	4413      	add	r3, r2
 80035b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035b8:	461a      	mov	r2, r3
 80035ba:	2302      	movs	r3, #2
 80035bc:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	b2d9      	uxtb	r1, r3
 80035c2:	687a      	ldr	r2, [r7, #4]
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	202c      	movs	r0, #44	; 0x2c
 80035c8:	fb00 f303 	mul.w	r3, r0, r3
 80035cc:	4413      	add	r3, r2
 80035ce:	3360      	adds	r3, #96	; 0x60
 80035d0:	781b      	ldrb	r3, [r3, #0]
 80035d2:	461a      	mov	r2, r3
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	f008 f9ab 	bl	800b930 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80035da:	bf00      	nop
 80035dc:	3720      	adds	r7, #32
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}

080035e2 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80035e2:	b580      	push	{r7, lr}
 80035e4:	b08a      	sub	sp, #40	; 0x28
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f2:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	6a1b      	ldr	r3, [r3, #32]
 80035fa:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80035fc:	69fb      	ldr	r3, [r7, #28]
 80035fe:	f003 030f 	and.w	r3, r3, #15
 8003602:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003604:	69fb      	ldr	r3, [r7, #28]
 8003606:	0c5b      	lsrs	r3, r3, #17
 8003608:	f003 030f 	and.w	r3, r3, #15
 800360c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800360e:	69fb      	ldr	r3, [r7, #28]
 8003610:	091b      	lsrs	r3, r3, #4
 8003612:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003616:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	2b02      	cmp	r3, #2
 800361c:	d004      	beq.n	8003628 <HCD_RXQLVL_IRQHandler+0x46>
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	2b05      	cmp	r3, #5
 8003622:	f000 80a9 	beq.w	8003778 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003626:	e0aa      	b.n	800377e <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	2b00      	cmp	r3, #0
 800362c:	f000 80a6 	beq.w	800377c <HCD_RXQLVL_IRQHandler+0x19a>
 8003630:	687a      	ldr	r2, [r7, #4]
 8003632:	69bb      	ldr	r3, [r7, #24]
 8003634:	212c      	movs	r1, #44	; 0x2c
 8003636:	fb01 f303 	mul.w	r3, r1, r3
 800363a:	4413      	add	r3, r2
 800363c:	3344      	adds	r3, #68	; 0x44
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	2b00      	cmp	r3, #0
 8003642:	f000 809b 	beq.w	800377c <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8003646:	687a      	ldr	r2, [r7, #4]
 8003648:	69bb      	ldr	r3, [r7, #24]
 800364a:	212c      	movs	r1, #44	; 0x2c
 800364c:	fb01 f303 	mul.w	r3, r1, r3
 8003650:	4413      	add	r3, r2
 8003652:	3350      	adds	r3, #80	; 0x50
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	441a      	add	r2, r3
 800365a:	6879      	ldr	r1, [r7, #4]
 800365c:	69bb      	ldr	r3, [r7, #24]
 800365e:	202c      	movs	r0, #44	; 0x2c
 8003660:	fb00 f303 	mul.w	r3, r0, r3
 8003664:	440b      	add	r3, r1
 8003666:	334c      	adds	r3, #76	; 0x4c
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	429a      	cmp	r2, r3
 800366c:	d87a      	bhi.n	8003764 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6818      	ldr	r0, [r3, #0]
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	69bb      	ldr	r3, [r7, #24]
 8003676:	212c      	movs	r1, #44	; 0x2c
 8003678:	fb01 f303 	mul.w	r3, r1, r3
 800367c:	4413      	add	r3, r2
 800367e:	3344      	adds	r3, #68	; 0x44
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	693a      	ldr	r2, [r7, #16]
 8003684:	b292      	uxth	r2, r2
 8003686:	4619      	mov	r1, r3
 8003688:	f002 feda 	bl	8006440 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 800368c:	687a      	ldr	r2, [r7, #4]
 800368e:	69bb      	ldr	r3, [r7, #24]
 8003690:	212c      	movs	r1, #44	; 0x2c
 8003692:	fb01 f303 	mul.w	r3, r1, r3
 8003696:	4413      	add	r3, r2
 8003698:	3344      	adds	r3, #68	; 0x44
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	441a      	add	r2, r3
 80036a0:	6879      	ldr	r1, [r7, #4]
 80036a2:	69bb      	ldr	r3, [r7, #24]
 80036a4:	202c      	movs	r0, #44	; 0x2c
 80036a6:	fb00 f303 	mul.w	r3, r0, r3
 80036aa:	440b      	add	r3, r1
 80036ac:	3344      	adds	r3, #68	; 0x44
 80036ae:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80036b0:	687a      	ldr	r2, [r7, #4]
 80036b2:	69bb      	ldr	r3, [r7, #24]
 80036b4:	212c      	movs	r1, #44	; 0x2c
 80036b6:	fb01 f303 	mul.w	r3, r1, r3
 80036ba:	4413      	add	r3, r2
 80036bc:	3350      	adds	r3, #80	; 0x50
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	441a      	add	r2, r3
 80036c4:	6879      	ldr	r1, [r7, #4]
 80036c6:	69bb      	ldr	r3, [r7, #24]
 80036c8:	202c      	movs	r0, #44	; 0x2c
 80036ca:	fb00 f303 	mul.w	r3, r0, r3
 80036ce:	440b      	add	r3, r1
 80036d0:	3350      	adds	r3, #80	; 0x50
 80036d2:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80036d4:	69bb      	ldr	r3, [r7, #24]
 80036d6:	015a      	lsls	r2, r3, #5
 80036d8:	6a3b      	ldr	r3, [r7, #32]
 80036da:	4413      	add	r3, r2
 80036dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036e0:	691b      	ldr	r3, [r3, #16]
 80036e2:	0cdb      	lsrs	r3, r3, #19
 80036e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036e8:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80036ea:	687a      	ldr	r2, [r7, #4]
 80036ec:	69bb      	ldr	r3, [r7, #24]
 80036ee:	212c      	movs	r1, #44	; 0x2c
 80036f0:	fb01 f303 	mul.w	r3, r1, r3
 80036f4:	4413      	add	r3, r2
 80036f6:	3340      	adds	r3, #64	; 0x40
 80036f8:	881b      	ldrh	r3, [r3, #0]
 80036fa:	461a      	mov	r2, r3
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	4293      	cmp	r3, r2
 8003700:	d13c      	bne.n	800377c <HCD_RXQLVL_IRQHandler+0x19a>
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d039      	beq.n	800377c <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003708:	69bb      	ldr	r3, [r7, #24]
 800370a:	015a      	lsls	r2, r3, #5
 800370c:	6a3b      	ldr	r3, [r7, #32]
 800370e:	4413      	add	r3, r2
 8003710:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800371e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003726:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003728:	69bb      	ldr	r3, [r7, #24]
 800372a:	015a      	lsls	r2, r3, #5
 800372c:	6a3b      	ldr	r3, [r7, #32]
 800372e:	4413      	add	r3, r2
 8003730:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003734:	461a      	mov	r2, r3
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	69bb      	ldr	r3, [r7, #24]
 800373e:	212c      	movs	r1, #44	; 0x2c
 8003740:	fb01 f303 	mul.w	r3, r1, r3
 8003744:	4413      	add	r3, r2
 8003746:	3354      	adds	r3, #84	; 0x54
 8003748:	781b      	ldrb	r3, [r3, #0]
 800374a:	f083 0301 	eor.w	r3, r3, #1
 800374e:	b2d8      	uxtb	r0, r3
 8003750:	687a      	ldr	r2, [r7, #4]
 8003752:	69bb      	ldr	r3, [r7, #24]
 8003754:	212c      	movs	r1, #44	; 0x2c
 8003756:	fb01 f303 	mul.w	r3, r1, r3
 800375a:	4413      	add	r3, r2
 800375c:	3354      	adds	r3, #84	; 0x54
 800375e:	4602      	mov	r2, r0
 8003760:	701a      	strb	r2, [r3, #0]
      break;
 8003762:	e00b      	b.n	800377c <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003764:	687a      	ldr	r2, [r7, #4]
 8003766:	69bb      	ldr	r3, [r7, #24]
 8003768:	212c      	movs	r1, #44	; 0x2c
 800376a:	fb01 f303 	mul.w	r3, r1, r3
 800376e:	4413      	add	r3, r2
 8003770:	3360      	adds	r3, #96	; 0x60
 8003772:	2204      	movs	r2, #4
 8003774:	701a      	strb	r2, [r3, #0]
      break;
 8003776:	e001      	b.n	800377c <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003778:	bf00      	nop
 800377a:	e000      	b.n	800377e <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 800377c:	bf00      	nop
  }
}
 800377e:	bf00      	nop
 8003780:	3728      	adds	r7, #40	; 0x28
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}

08003786 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003786:	b580      	push	{r7, lr}
 8003788:	b086      	sub	sp, #24
 800378a:	af00      	add	r7, sp, #0
 800378c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80037b2:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	f003 0302 	and.w	r3, r3, #2
 80037ba:	2b02      	cmp	r3, #2
 80037bc:	d10b      	bne.n	80037d6 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	f003 0301 	and.w	r3, r3, #1
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d102      	bne.n	80037ce <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f008 f895 	bl	800b8f8 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	f043 0302 	orr.w	r3, r3, #2
 80037d4:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	f003 0308 	and.w	r3, r3, #8
 80037dc:	2b08      	cmp	r3, #8
 80037de:	d132      	bne.n	8003846 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	f043 0308 	orr.w	r3, r3, #8
 80037e6:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f003 0304 	and.w	r3, r3, #4
 80037ee:	2b04      	cmp	r3, #4
 80037f0:	d126      	bne.n	8003840 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	699b      	ldr	r3, [r3, #24]
 80037f6:	2b02      	cmp	r3, #2
 80037f8:	d113      	bne.n	8003822 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003800:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003804:	d106      	bne.n	8003814 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	2102      	movs	r1, #2
 800380c:	4618      	mov	r0, r3
 800380e:	f002 ff85 	bl	800671c <USB_InitFSLSPClkSel>
 8003812:	e011      	b.n	8003838 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	2101      	movs	r1, #1
 800381a:	4618      	mov	r0, r3
 800381c:	f002 ff7e 	bl	800671c <USB_InitFSLSPClkSel>
 8003820:	e00a      	b.n	8003838 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	68db      	ldr	r3, [r3, #12]
 8003826:	2b01      	cmp	r3, #1
 8003828:	d106      	bne.n	8003838 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003830:	461a      	mov	r2, r3
 8003832:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003836:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	f008 f88b 	bl	800b954 <HAL_HCD_PortEnabled_Callback>
 800383e:	e002      	b.n	8003846 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	f008 f895 	bl	800b970 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	f003 0320 	and.w	r3, r3, #32
 800384c:	2b20      	cmp	r3, #32
 800384e:	d103      	bne.n	8003858 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	f043 0320 	orr.w	r3, r3, #32
 8003856:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800385e:	461a      	mov	r2, r3
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	6013      	str	r3, [r2, #0]
}
 8003864:	bf00      	nop
 8003866:	3718      	adds	r7, #24
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}

0800386c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b084      	sub	sp, #16
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d101      	bne.n	800387e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e12b      	b.n	8003ad6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003884:	b2db      	uxtb	r3, r3
 8003886:	2b00      	cmp	r3, #0
 8003888:	d106      	bne.n	8003898 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2200      	movs	r2, #0
 800388e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f7fd fa9e 	bl	8000dd4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2224      	movs	r2, #36	; 0x24
 800389c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f022 0201 	bic.w	r2, r2, #1
 80038ae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80038be:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80038ce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80038d0:	f001 f964 	bl	8004b9c <HAL_RCC_GetPCLK1Freq>
 80038d4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	4a81      	ldr	r2, [pc, #516]	; (8003ae0 <HAL_I2C_Init+0x274>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d807      	bhi.n	80038f0 <HAL_I2C_Init+0x84>
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	4a80      	ldr	r2, [pc, #512]	; (8003ae4 <HAL_I2C_Init+0x278>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	bf94      	ite	ls
 80038e8:	2301      	movls	r3, #1
 80038ea:	2300      	movhi	r3, #0
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	e006      	b.n	80038fe <HAL_I2C_Init+0x92>
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	4a7d      	ldr	r2, [pc, #500]	; (8003ae8 <HAL_I2C_Init+0x27c>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	bf94      	ite	ls
 80038f8:	2301      	movls	r3, #1
 80038fa:	2300      	movhi	r3, #0
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d001      	beq.n	8003906 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e0e7      	b.n	8003ad6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	4a78      	ldr	r2, [pc, #480]	; (8003aec <HAL_I2C_Init+0x280>)
 800390a:	fba2 2303 	umull	r2, r3, r2, r3
 800390e:	0c9b      	lsrs	r3, r3, #18
 8003910:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	68ba      	ldr	r2, [r7, #8]
 8003922:	430a      	orrs	r2, r1
 8003924:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	6a1b      	ldr	r3, [r3, #32]
 800392c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	4a6a      	ldr	r2, [pc, #424]	; (8003ae0 <HAL_I2C_Init+0x274>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d802      	bhi.n	8003940 <HAL_I2C_Init+0xd4>
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	3301      	adds	r3, #1
 800393e:	e009      	b.n	8003954 <HAL_I2C_Init+0xe8>
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003946:	fb02 f303 	mul.w	r3, r2, r3
 800394a:	4a69      	ldr	r2, [pc, #420]	; (8003af0 <HAL_I2C_Init+0x284>)
 800394c:	fba2 2303 	umull	r2, r3, r2, r3
 8003950:	099b      	lsrs	r3, r3, #6
 8003952:	3301      	adds	r3, #1
 8003954:	687a      	ldr	r2, [r7, #4]
 8003956:	6812      	ldr	r2, [r2, #0]
 8003958:	430b      	orrs	r3, r1
 800395a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	69db      	ldr	r3, [r3, #28]
 8003962:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003966:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	495c      	ldr	r1, [pc, #368]	; (8003ae0 <HAL_I2C_Init+0x274>)
 8003970:	428b      	cmp	r3, r1
 8003972:	d819      	bhi.n	80039a8 <HAL_I2C_Init+0x13c>
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	1e59      	subs	r1, r3, #1
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	005b      	lsls	r3, r3, #1
 800397e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003982:	1c59      	adds	r1, r3, #1
 8003984:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003988:	400b      	ands	r3, r1
 800398a:	2b00      	cmp	r3, #0
 800398c:	d00a      	beq.n	80039a4 <HAL_I2C_Init+0x138>
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	1e59      	subs	r1, r3, #1
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	005b      	lsls	r3, r3, #1
 8003998:	fbb1 f3f3 	udiv	r3, r1, r3
 800399c:	3301      	adds	r3, #1
 800399e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039a2:	e051      	b.n	8003a48 <HAL_I2C_Init+0x1dc>
 80039a4:	2304      	movs	r3, #4
 80039a6:	e04f      	b.n	8003a48 <HAL_I2C_Init+0x1dc>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d111      	bne.n	80039d4 <HAL_I2C_Init+0x168>
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	1e58      	subs	r0, r3, #1
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6859      	ldr	r1, [r3, #4]
 80039b8:	460b      	mov	r3, r1
 80039ba:	005b      	lsls	r3, r3, #1
 80039bc:	440b      	add	r3, r1
 80039be:	fbb0 f3f3 	udiv	r3, r0, r3
 80039c2:	3301      	adds	r3, #1
 80039c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	bf0c      	ite	eq
 80039cc:	2301      	moveq	r3, #1
 80039ce:	2300      	movne	r3, #0
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	e012      	b.n	80039fa <HAL_I2C_Init+0x18e>
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	1e58      	subs	r0, r3, #1
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6859      	ldr	r1, [r3, #4]
 80039dc:	460b      	mov	r3, r1
 80039de:	009b      	lsls	r3, r3, #2
 80039e0:	440b      	add	r3, r1
 80039e2:	0099      	lsls	r1, r3, #2
 80039e4:	440b      	add	r3, r1
 80039e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80039ea:	3301      	adds	r3, #1
 80039ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	bf0c      	ite	eq
 80039f4:	2301      	moveq	r3, #1
 80039f6:	2300      	movne	r3, #0
 80039f8:	b2db      	uxtb	r3, r3
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d001      	beq.n	8003a02 <HAL_I2C_Init+0x196>
 80039fe:	2301      	movs	r3, #1
 8003a00:	e022      	b.n	8003a48 <HAL_I2C_Init+0x1dc>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d10e      	bne.n	8003a28 <HAL_I2C_Init+0x1bc>
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	1e58      	subs	r0, r3, #1
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6859      	ldr	r1, [r3, #4]
 8003a12:	460b      	mov	r3, r1
 8003a14:	005b      	lsls	r3, r3, #1
 8003a16:	440b      	add	r3, r1
 8003a18:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a1c:	3301      	adds	r3, #1
 8003a1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a26:	e00f      	b.n	8003a48 <HAL_I2C_Init+0x1dc>
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	1e58      	subs	r0, r3, #1
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6859      	ldr	r1, [r3, #4]
 8003a30:	460b      	mov	r3, r1
 8003a32:	009b      	lsls	r3, r3, #2
 8003a34:	440b      	add	r3, r1
 8003a36:	0099      	lsls	r1, r3, #2
 8003a38:	440b      	add	r3, r1
 8003a3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a3e:	3301      	adds	r3, #1
 8003a40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a44:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a48:	6879      	ldr	r1, [r7, #4]
 8003a4a:	6809      	ldr	r1, [r1, #0]
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	69da      	ldr	r2, [r3, #28]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6a1b      	ldr	r3, [r3, #32]
 8003a62:	431a      	orrs	r2, r3
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	430a      	orrs	r2, r1
 8003a6a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003a76:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	6911      	ldr	r1, [r2, #16]
 8003a7e:	687a      	ldr	r2, [r7, #4]
 8003a80:	68d2      	ldr	r2, [r2, #12]
 8003a82:	4311      	orrs	r1, r2
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	6812      	ldr	r2, [r2, #0]
 8003a88:	430b      	orrs	r3, r1
 8003a8a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	68db      	ldr	r3, [r3, #12]
 8003a92:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	695a      	ldr	r2, [r3, #20]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	699b      	ldr	r3, [r3, #24]
 8003a9e:	431a      	orrs	r2, r3
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	430a      	orrs	r2, r1
 8003aa6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f042 0201 	orr.w	r2, r2, #1
 8003ab6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2200      	movs	r2, #0
 8003abc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2220      	movs	r2, #32
 8003ac2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003ad4:	2300      	movs	r3, #0
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3710      	adds	r7, #16
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}
 8003ade:	bf00      	nop
 8003ae0:	000186a0 	.word	0x000186a0
 8003ae4:	001e847f 	.word	0x001e847f
 8003ae8:	003d08ff 	.word	0x003d08ff
 8003aec:	431bde83 	.word	0x431bde83
 8003af0:	10624dd3 	.word	0x10624dd3

08003af4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b083      	sub	sp, #12
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
 8003afc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	2b20      	cmp	r3, #32
 8003b08:	d129      	bne.n	8003b5e <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2224      	movs	r2, #36	; 0x24
 8003b0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f022 0201 	bic.w	r2, r2, #1
 8003b20:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f022 0210 	bic.w	r2, r2, #16
 8003b30:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	683a      	ldr	r2, [r7, #0]
 8003b3e:	430a      	orrs	r2, r1
 8003b40:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f042 0201 	orr.w	r2, r2, #1
 8003b50:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2220      	movs	r2, #32
 8003b56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	e000      	b.n	8003b60 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8003b5e:	2302      	movs	r3, #2
  }
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	370c      	adds	r7, #12
 8003b64:	46bd      	mov	sp, r7
 8003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6a:	4770      	bx	lr

08003b6c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b085      	sub	sp, #20
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
 8003b74:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003b76:	2300      	movs	r3, #0
 8003b78:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	2b20      	cmp	r3, #32
 8003b84:	d12a      	bne.n	8003bdc <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2224      	movs	r2, #36	; 0x24
 8003b8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f022 0201 	bic.w	r2, r2, #1
 8003b9c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba4:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003ba6:	89fb      	ldrh	r3, [r7, #14]
 8003ba8:	f023 030f 	bic.w	r3, r3, #15
 8003bac:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	b29a      	uxth	r2, r3
 8003bb2:	89fb      	ldrh	r3, [r7, #14]
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	89fa      	ldrh	r2, [r7, #14]
 8003bbe:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f042 0201 	orr.w	r2, r2, #1
 8003bce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2220      	movs	r2, #32
 8003bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	e000      	b.n	8003bde <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003bdc:	2302      	movs	r3, #2
  }
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3714      	adds	r7, #20
 8003be2:	46bd      	mov	sp, r7
 8003be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be8:	4770      	bx	lr
	...

08003bec <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b084      	sub	sp, #16
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d101      	bne.n	8003bfe <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e0bf      	b.n	8003d7e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d106      	bne.n	8003c18 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f7fd f948 	bl	8000ea8 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2202      	movs	r2, #2
 8003c1c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	699a      	ldr	r2, [r3, #24]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8003c2e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	6999      	ldr	r1, [r3, #24]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	685a      	ldr	r2, [r3, #4]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003c44:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	691b      	ldr	r3, [r3, #16]
 8003c4a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	430a      	orrs	r2, r1
 8003c52:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	6899      	ldr	r1, [r3, #8]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	4b4a      	ldr	r3, [pc, #296]	; (8003d88 <HAL_LTDC_Init+0x19c>)
 8003c60:	400b      	ands	r3, r1
 8003c62:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	695b      	ldr	r3, [r3, #20]
 8003c68:	041b      	lsls	r3, r3, #16
 8003c6a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	6899      	ldr	r1, [r3, #8]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	699a      	ldr	r2, [r3, #24]
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	431a      	orrs	r2, r3
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	430a      	orrs	r2, r1
 8003c80:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	68d9      	ldr	r1, [r3, #12]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	4b3e      	ldr	r3, [pc, #248]	; (8003d88 <HAL_LTDC_Init+0x19c>)
 8003c8e:	400b      	ands	r3, r1
 8003c90:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	69db      	ldr	r3, [r3, #28]
 8003c96:	041b      	lsls	r3, r3, #16
 8003c98:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	68d9      	ldr	r1, [r3, #12]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6a1a      	ldr	r2, [r3, #32]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	431a      	orrs	r2, r3
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	430a      	orrs	r2, r1
 8003cae:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	6919      	ldr	r1, [r3, #16]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	4b33      	ldr	r3, [pc, #204]	; (8003d88 <HAL_LTDC_Init+0x19c>)
 8003cbc:	400b      	ands	r3, r1
 8003cbe:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc4:	041b      	lsls	r3, r3, #16
 8003cc6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	6919      	ldr	r1, [r3, #16]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	431a      	orrs	r2, r3
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	430a      	orrs	r2, r1
 8003cdc:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	6959      	ldr	r1, [r3, #20]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681a      	ldr	r2, [r3, #0]
 8003ce8:	4b27      	ldr	r3, [pc, #156]	; (8003d88 <HAL_LTDC_Init+0x19c>)
 8003cea:	400b      	ands	r3, r1
 8003cec:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf2:	041b      	lsls	r3, r3, #16
 8003cf4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	6959      	ldr	r1, [r3, #20]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	431a      	orrs	r2, r3
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	430a      	orrs	r2, r1
 8003d0a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d12:	021b      	lsls	r3, r3, #8
 8003d14:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003d1c:	041b      	lsls	r3, r3, #16
 8003d1e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8003d2e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003d36:	68ba      	ldr	r2, [r7, #8]
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	687a      	ldr	r2, [r7, #4]
 8003d3e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8003d42:	431a      	orrs	r2, r3
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	430a      	orrs	r2, r1
 8003d4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f042 0206 	orr.w	r2, r2, #6
 8003d5a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	699a      	ldr	r2, [r3, #24]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f042 0201 	orr.w	r2, r2, #1
 8003d6a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2201      	movs	r2, #1
 8003d78:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8003d7c:	2300      	movs	r3, #0
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3710      	adds	r7, #16
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	bf00      	nop
 8003d88:	f000f800 	.word	0xf000f800

08003d8c <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b084      	sub	sp, #16
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d9a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003da2:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	f003 0304 	and.w	r3, r3, #4
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d023      	beq.n	8003df6 <HAL_LTDC_IRQHandler+0x6a>
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	f003 0304 	and.w	r3, r3, #4
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d01e      	beq.n	8003df6 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f022 0204 	bic.w	r2, r2, #4
 8003dc6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	2204      	movs	r2, #4
 8003dce:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003dd6:	f043 0201 	orr.w	r2, r3, #1
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2204      	movs	r2, #4
 8003de4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2200      	movs	r2, #0
 8003dec:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8003df0:	6878      	ldr	r0, [r7, #4]
 8003df2:	f000 f86f 	bl	8003ed4 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	f003 0302 	and.w	r3, r3, #2
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d023      	beq.n	8003e48 <HAL_LTDC_IRQHandler+0xbc>
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	f003 0302 	and.w	r3, r3, #2
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d01e      	beq.n	8003e48 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f022 0202 	bic.w	r2, r2, #2
 8003e18:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	2202      	movs	r2, #2
 8003e20:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003e28:	f043 0202 	orr.w	r2, r3, #2
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2204      	movs	r2, #4
 8003e36:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	f000 f846 	bl	8003ed4 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	f003 0301 	and.w	r3, r3, #1
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d01b      	beq.n	8003e8a <HAL_LTDC_IRQHandler+0xfe>
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	f003 0301 	and.w	r3, r3, #1
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d016      	beq.n	8003e8a <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f022 0201 	bic.w	r2, r2, #1
 8003e6a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	2201      	movs	r2, #1
 8003e72:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2201      	movs	r2, #1
 8003e78:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8003e84:	6878      	ldr	r0, [r7, #4]
 8003e86:	f000 f82f 	bl	8003ee8 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	f003 0308 	and.w	r3, r3, #8
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d01b      	beq.n	8003ecc <HAL_LTDC_IRQHandler+0x140>
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	f003 0308 	and.w	r3, r3, #8
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d016      	beq.n	8003ecc <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f022 0208 	bic.w	r2, r2, #8
 8003eac:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	2208      	movs	r2, #8
 8003eb4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2201      	movs	r2, #1
 8003eba:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f000 f818 	bl	8003efc <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8003ecc:	bf00      	nop
 8003ece:	3710      	adds	r7, #16
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}

08003ed4 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8003edc:	bf00      	nop
 8003ede:	370c      	adds	r7, #12
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr

08003ee8 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b083      	sub	sp, #12
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8003ef0:	bf00      	nop
 8003ef2:	370c      	adds	r7, #12
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr

08003efc <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b083      	sub	sp, #12
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8003f04:	bf00      	nop
 8003f06:	370c      	adds	r7, #12
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr

08003f10 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003f10:	b5b0      	push	{r4, r5, r7, lr}
 8003f12:	b084      	sub	sp, #16
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	60f8      	str	r0, [r7, #12]
 8003f18:	60b9      	str	r1, [r7, #8]
 8003f1a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8003f22:	2b01      	cmp	r3, #1
 8003f24:	d101      	bne.n	8003f2a <HAL_LTDC_ConfigLayer+0x1a>
 8003f26:	2302      	movs	r3, #2
 8003f28:	e02c      	b.n	8003f84 <HAL_LTDC_ConfigLayer+0x74>
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2201      	movs	r2, #1
 8003f2e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2202      	movs	r2, #2
 8003f36:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8003f3a:	68fa      	ldr	r2, [r7, #12]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2134      	movs	r1, #52	; 0x34
 8003f40:	fb01 f303 	mul.w	r3, r1, r3
 8003f44:	4413      	add	r3, r2
 8003f46:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	4614      	mov	r4, r2
 8003f4e:	461d      	mov	r5, r3
 8003f50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003f52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003f54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003f56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003f58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003f5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003f5c:	682b      	ldr	r3, [r5, #0]
 8003f5e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003f60:	687a      	ldr	r2, [r7, #4]
 8003f62:	68b9      	ldr	r1, [r7, #8]
 8003f64:	68f8      	ldr	r0, [r7, #12]
 8003f66:	f000 f811 	bl	8003f8c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2201      	movs	r2, #1
 8003f76:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8003f82:	2300      	movs	r3, #0
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	3710      	adds	r7, #16
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bdb0      	pop	{r4, r5, r7, pc}

08003f8c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b089      	sub	sp, #36	; 0x24
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	60f8      	str	r0, [r7, #12]
 8003f94:	60b9      	str	r1, [r7, #8]
 8003f96:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	685a      	ldr	r2, [r3, #4]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	68db      	ldr	r3, [r3, #12]
 8003fa2:	0c1b      	lsrs	r3, r3, #16
 8003fa4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fa8:	4413      	add	r3, r2
 8003faa:	041b      	lsls	r3, r3, #16
 8003fac:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	461a      	mov	r2, r3
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	01db      	lsls	r3, r3, #7
 8003fb8:	4413      	add	r3, r2
 8003fba:	3384      	adds	r3, #132	; 0x84
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	68fa      	ldr	r2, [r7, #12]
 8003fc0:	6812      	ldr	r2, [r2, #0]
 8003fc2:	4611      	mov	r1, r2
 8003fc4:	687a      	ldr	r2, [r7, #4]
 8003fc6:	01d2      	lsls	r2, r2, #7
 8003fc8:	440a      	add	r2, r1
 8003fca:	3284      	adds	r2, #132	; 0x84
 8003fcc:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003fd0:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	68db      	ldr	r3, [r3, #12]
 8003fdc:	0c1b      	lsrs	r3, r3, #16
 8003fde:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003fe2:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003fe4:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4619      	mov	r1, r3
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	01db      	lsls	r3, r3, #7
 8003ff0:	440b      	add	r3, r1
 8003ff2:	3384      	adds	r3, #132	; 0x84
 8003ff4:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003ff6:	69fb      	ldr	r3, [r7, #28]
 8003ff8:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003ffa:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	68da      	ldr	r2, [r3, #12]
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	68db      	ldr	r3, [r3, #12]
 8004006:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800400a:	4413      	add	r3, r2
 800400c:	041b      	lsls	r3, r3, #16
 800400e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	461a      	mov	r2, r3
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	01db      	lsls	r3, r3, #7
 800401a:	4413      	add	r3, r2
 800401c:	3384      	adds	r3, #132	; 0x84
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	68fa      	ldr	r2, [r7, #12]
 8004022:	6812      	ldr	r2, [r2, #0]
 8004024:	4611      	mov	r1, r2
 8004026:	687a      	ldr	r2, [r7, #4]
 8004028:	01d2      	lsls	r2, r2, #7
 800402a:	440a      	add	r2, r1
 800402c:	3284      	adds	r2, #132	; 0x84
 800402e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004032:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	689a      	ldr	r2, [r3, #8]
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	68db      	ldr	r3, [r3, #12]
 800403e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004042:	4413      	add	r3, r2
 8004044:	1c5a      	adds	r2, r3, #1
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4619      	mov	r1, r3
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	01db      	lsls	r3, r3, #7
 8004050:	440b      	add	r3, r1
 8004052:	3384      	adds	r3, #132	; 0x84
 8004054:	4619      	mov	r1, r3
 8004056:	69fb      	ldr	r3, [r7, #28]
 8004058:	4313      	orrs	r3, r2
 800405a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	461a      	mov	r2, r3
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	01db      	lsls	r3, r3, #7
 8004066:	4413      	add	r3, r2
 8004068:	3384      	adds	r3, #132	; 0x84
 800406a:	691b      	ldr	r3, [r3, #16]
 800406c:	68fa      	ldr	r2, [r7, #12]
 800406e:	6812      	ldr	r2, [r2, #0]
 8004070:	4611      	mov	r1, r2
 8004072:	687a      	ldr	r2, [r7, #4]
 8004074:	01d2      	lsls	r2, r2, #7
 8004076:	440a      	add	r2, r1
 8004078:	3284      	adds	r2, #132	; 0x84
 800407a:	f023 0307 	bic.w	r3, r3, #7
 800407e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	461a      	mov	r2, r3
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	01db      	lsls	r3, r3, #7
 800408a:	4413      	add	r3, r2
 800408c:	3384      	adds	r3, #132	; 0x84
 800408e:	461a      	mov	r2, r3
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	691b      	ldr	r3, [r3, #16]
 8004094:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800409c:	021b      	lsls	r3, r3, #8
 800409e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80040a6:	041b      	lsls	r3, r3, #16
 80040a8:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	699b      	ldr	r3, [r3, #24]
 80040ae:	061b      	lsls	r3, r3, #24
 80040b0:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	461a      	mov	r2, r3
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	01db      	lsls	r3, r3, #7
 80040bc:	4413      	add	r3, r2
 80040be:	3384      	adds	r3, #132	; 0x84
 80040c0:	699b      	ldr	r3, [r3, #24]
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	461a      	mov	r2, r3
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	01db      	lsls	r3, r3, #7
 80040cc:	4413      	add	r3, r2
 80040ce:	3384      	adds	r3, #132	; 0x84
 80040d0:	461a      	mov	r2, r3
 80040d2:	2300      	movs	r3, #0
 80040d4:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80040dc:	461a      	mov	r2, r3
 80040de:	69fb      	ldr	r3, [r7, #28]
 80040e0:	431a      	orrs	r2, r3
 80040e2:	69bb      	ldr	r3, [r7, #24]
 80040e4:	431a      	orrs	r2, r3
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4619      	mov	r1, r3
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	01db      	lsls	r3, r3, #7
 80040f0:	440b      	add	r3, r1
 80040f2:	3384      	adds	r3, #132	; 0x84
 80040f4:	4619      	mov	r1, r3
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	4313      	orrs	r3, r2
 80040fa:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	461a      	mov	r2, r3
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	01db      	lsls	r3, r3, #7
 8004106:	4413      	add	r3, r2
 8004108:	3384      	adds	r3, #132	; 0x84
 800410a:	695b      	ldr	r3, [r3, #20]
 800410c:	68fa      	ldr	r2, [r7, #12]
 800410e:	6812      	ldr	r2, [r2, #0]
 8004110:	4611      	mov	r1, r2
 8004112:	687a      	ldr	r2, [r7, #4]
 8004114:	01d2      	lsls	r2, r2, #7
 8004116:	440a      	add	r2, r1
 8004118:	3284      	adds	r2, #132	; 0x84
 800411a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800411e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	461a      	mov	r2, r3
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	01db      	lsls	r3, r3, #7
 800412a:	4413      	add	r3, r2
 800412c:	3384      	adds	r3, #132	; 0x84
 800412e:	461a      	mov	r2, r3
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	695b      	ldr	r3, [r3, #20]
 8004134:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	461a      	mov	r2, r3
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	01db      	lsls	r3, r3, #7
 8004140:	4413      	add	r3, r2
 8004142:	3384      	adds	r3, #132	; 0x84
 8004144:	69db      	ldr	r3, [r3, #28]
 8004146:	68fa      	ldr	r2, [r7, #12]
 8004148:	6812      	ldr	r2, [r2, #0]
 800414a:	4611      	mov	r1, r2
 800414c:	687a      	ldr	r2, [r7, #4]
 800414e:	01d2      	lsls	r2, r2, #7
 8004150:	440a      	add	r2, r1
 8004152:	3284      	adds	r2, #132	; 0x84
 8004154:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004158:	f023 0307 	bic.w	r3, r3, #7
 800415c:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	69da      	ldr	r2, [r3, #28]
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	6a1b      	ldr	r3, [r3, #32]
 8004166:	68f9      	ldr	r1, [r7, #12]
 8004168:	6809      	ldr	r1, [r1, #0]
 800416a:	4608      	mov	r0, r1
 800416c:	6879      	ldr	r1, [r7, #4]
 800416e:	01c9      	lsls	r1, r1, #7
 8004170:	4401      	add	r1, r0
 8004172:	3184      	adds	r1, #132	; 0x84
 8004174:	4313      	orrs	r3, r2
 8004176:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	461a      	mov	r2, r3
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	01db      	lsls	r3, r3, #7
 8004182:	4413      	add	r3, r2
 8004184:	3384      	adds	r3, #132	; 0x84
 8004186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	461a      	mov	r2, r3
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	01db      	lsls	r3, r3, #7
 8004192:	4413      	add	r3, r2
 8004194:	3384      	adds	r3, #132	; 0x84
 8004196:	461a      	mov	r2, r3
 8004198:	2300      	movs	r3, #0
 800419a:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	461a      	mov	r2, r3
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	01db      	lsls	r3, r3, #7
 80041a6:	4413      	add	r3, r2
 80041a8:	3384      	adds	r3, #132	; 0x84
 80041aa:	461a      	mov	r2, r3
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b0:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	691b      	ldr	r3, [r3, #16]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d102      	bne.n	80041c0 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 80041ba:	2304      	movs	r3, #4
 80041bc:	61fb      	str	r3, [r7, #28]
 80041be:	e01b      	b.n	80041f8 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	691b      	ldr	r3, [r3, #16]
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d102      	bne.n	80041ce <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80041c8:	2303      	movs	r3, #3
 80041ca:	61fb      	str	r3, [r7, #28]
 80041cc:	e014      	b.n	80041f8 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	691b      	ldr	r3, [r3, #16]
 80041d2:	2b04      	cmp	r3, #4
 80041d4:	d00b      	beq.n	80041ee <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80041da:	2b02      	cmp	r3, #2
 80041dc:	d007      	beq.n	80041ee <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80041e2:	2b03      	cmp	r3, #3
 80041e4:	d003      	beq.n	80041ee <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80041ea:	2b07      	cmp	r3, #7
 80041ec:	d102      	bne.n	80041f4 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80041ee:	2302      	movs	r3, #2
 80041f0:	61fb      	str	r3, [r7, #28]
 80041f2:	e001      	b.n	80041f8 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80041f4:	2301      	movs	r3, #1
 80041f6:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	461a      	mov	r2, r3
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	01db      	lsls	r3, r3, #7
 8004202:	4413      	add	r3, r2
 8004204:	3384      	adds	r3, #132	; 0x84
 8004206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004208:	68fa      	ldr	r2, [r7, #12]
 800420a:	6812      	ldr	r2, [r2, #0]
 800420c:	4611      	mov	r1, r2
 800420e:	687a      	ldr	r2, [r7, #4]
 8004210:	01d2      	lsls	r2, r2, #7
 8004212:	440a      	add	r2, r1
 8004214:	3284      	adds	r2, #132	; 0x84
 8004216:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800421a:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004220:	69fa      	ldr	r2, [r7, #28]
 8004222:	fb02 f303 	mul.w	r3, r2, r3
 8004226:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	6859      	ldr	r1, [r3, #4]
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	1acb      	subs	r3, r1, r3
 8004232:	69f9      	ldr	r1, [r7, #28]
 8004234:	fb01 f303 	mul.w	r3, r1, r3
 8004238:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800423a:	68f9      	ldr	r1, [r7, #12]
 800423c:	6809      	ldr	r1, [r1, #0]
 800423e:	4608      	mov	r0, r1
 8004240:	6879      	ldr	r1, [r7, #4]
 8004242:	01c9      	lsls	r1, r1, #7
 8004244:	4401      	add	r1, r0
 8004246:	3184      	adds	r1, #132	; 0x84
 8004248:	4313      	orrs	r3, r2
 800424a:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	461a      	mov	r2, r3
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	01db      	lsls	r3, r3, #7
 8004256:	4413      	add	r3, r2
 8004258:	3384      	adds	r3, #132	; 0x84
 800425a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800425c:	68fa      	ldr	r2, [r7, #12]
 800425e:	6812      	ldr	r2, [r2, #0]
 8004260:	4611      	mov	r1, r2
 8004262:	687a      	ldr	r2, [r7, #4]
 8004264:	01d2      	lsls	r2, r2, #7
 8004266:	440a      	add	r2, r1
 8004268:	3284      	adds	r2, #132	; 0x84
 800426a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800426e:	f023 0307 	bic.w	r3, r3, #7
 8004272:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	461a      	mov	r2, r3
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	01db      	lsls	r3, r3, #7
 800427e:	4413      	add	r3, r2
 8004280:	3384      	adds	r3, #132	; 0x84
 8004282:	461a      	mov	r2, r3
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004288:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	461a      	mov	r2, r3
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	01db      	lsls	r3, r3, #7
 8004294:	4413      	add	r3, r2
 8004296:	3384      	adds	r3, #132	; 0x84
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	68fa      	ldr	r2, [r7, #12]
 800429c:	6812      	ldr	r2, [r2, #0]
 800429e:	4611      	mov	r1, r2
 80042a0:	687a      	ldr	r2, [r7, #4]
 80042a2:	01d2      	lsls	r2, r2, #7
 80042a4:	440a      	add	r2, r1
 80042a6:	3284      	adds	r2, #132	; 0x84
 80042a8:	f043 0301 	orr.w	r3, r3, #1
 80042ac:	6013      	str	r3, [r2, #0]
}
 80042ae:	bf00      	nop
 80042b0:	3724      	adds	r7, #36	; 0x24
 80042b2:	46bd      	mov	sp, r7
 80042b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b8:	4770      	bx	lr
	...

080042bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b086      	sub	sp, #24
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d101      	bne.n	80042ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	e267      	b.n	800479e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f003 0301 	and.w	r3, r3, #1
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d075      	beq.n	80043c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80042da:	4b88      	ldr	r3, [pc, #544]	; (80044fc <HAL_RCC_OscConfig+0x240>)
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	f003 030c 	and.w	r3, r3, #12
 80042e2:	2b04      	cmp	r3, #4
 80042e4:	d00c      	beq.n	8004300 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042e6:	4b85      	ldr	r3, [pc, #532]	; (80044fc <HAL_RCC_OscConfig+0x240>)
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80042ee:	2b08      	cmp	r3, #8
 80042f0:	d112      	bne.n	8004318 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042f2:	4b82      	ldr	r3, [pc, #520]	; (80044fc <HAL_RCC_OscConfig+0x240>)
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042fe:	d10b      	bne.n	8004318 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004300:	4b7e      	ldr	r3, [pc, #504]	; (80044fc <HAL_RCC_OscConfig+0x240>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004308:	2b00      	cmp	r3, #0
 800430a:	d05b      	beq.n	80043c4 <HAL_RCC_OscConfig+0x108>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d157      	bne.n	80043c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004314:	2301      	movs	r3, #1
 8004316:	e242      	b.n	800479e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004320:	d106      	bne.n	8004330 <HAL_RCC_OscConfig+0x74>
 8004322:	4b76      	ldr	r3, [pc, #472]	; (80044fc <HAL_RCC_OscConfig+0x240>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a75      	ldr	r2, [pc, #468]	; (80044fc <HAL_RCC_OscConfig+0x240>)
 8004328:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800432c:	6013      	str	r3, [r2, #0]
 800432e:	e01d      	b.n	800436c <HAL_RCC_OscConfig+0xb0>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004338:	d10c      	bne.n	8004354 <HAL_RCC_OscConfig+0x98>
 800433a:	4b70      	ldr	r3, [pc, #448]	; (80044fc <HAL_RCC_OscConfig+0x240>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a6f      	ldr	r2, [pc, #444]	; (80044fc <HAL_RCC_OscConfig+0x240>)
 8004340:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004344:	6013      	str	r3, [r2, #0]
 8004346:	4b6d      	ldr	r3, [pc, #436]	; (80044fc <HAL_RCC_OscConfig+0x240>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a6c      	ldr	r2, [pc, #432]	; (80044fc <HAL_RCC_OscConfig+0x240>)
 800434c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004350:	6013      	str	r3, [r2, #0]
 8004352:	e00b      	b.n	800436c <HAL_RCC_OscConfig+0xb0>
 8004354:	4b69      	ldr	r3, [pc, #420]	; (80044fc <HAL_RCC_OscConfig+0x240>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a68      	ldr	r2, [pc, #416]	; (80044fc <HAL_RCC_OscConfig+0x240>)
 800435a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800435e:	6013      	str	r3, [r2, #0]
 8004360:	4b66      	ldr	r3, [pc, #408]	; (80044fc <HAL_RCC_OscConfig+0x240>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a65      	ldr	r2, [pc, #404]	; (80044fc <HAL_RCC_OscConfig+0x240>)
 8004366:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800436a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d013      	beq.n	800439c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004374:	f7fd f978 	bl	8001668 <HAL_GetTick>
 8004378:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800437a:	e008      	b.n	800438e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800437c:	f7fd f974 	bl	8001668 <HAL_GetTick>
 8004380:	4602      	mov	r2, r0
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	1ad3      	subs	r3, r2, r3
 8004386:	2b64      	cmp	r3, #100	; 0x64
 8004388:	d901      	bls.n	800438e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800438a:	2303      	movs	r3, #3
 800438c:	e207      	b.n	800479e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800438e:	4b5b      	ldr	r3, [pc, #364]	; (80044fc <HAL_RCC_OscConfig+0x240>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004396:	2b00      	cmp	r3, #0
 8004398:	d0f0      	beq.n	800437c <HAL_RCC_OscConfig+0xc0>
 800439a:	e014      	b.n	80043c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800439c:	f7fd f964 	bl	8001668 <HAL_GetTick>
 80043a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043a2:	e008      	b.n	80043b6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043a4:	f7fd f960 	bl	8001668 <HAL_GetTick>
 80043a8:	4602      	mov	r2, r0
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	1ad3      	subs	r3, r2, r3
 80043ae:	2b64      	cmp	r3, #100	; 0x64
 80043b0:	d901      	bls.n	80043b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80043b2:	2303      	movs	r3, #3
 80043b4:	e1f3      	b.n	800479e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043b6:	4b51      	ldr	r3, [pc, #324]	; (80044fc <HAL_RCC_OscConfig+0x240>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d1f0      	bne.n	80043a4 <HAL_RCC_OscConfig+0xe8>
 80043c2:	e000      	b.n	80043c6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 0302 	and.w	r3, r3, #2
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d063      	beq.n	800449a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80043d2:	4b4a      	ldr	r3, [pc, #296]	; (80044fc <HAL_RCC_OscConfig+0x240>)
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	f003 030c 	and.w	r3, r3, #12
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d00b      	beq.n	80043f6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043de:	4b47      	ldr	r3, [pc, #284]	; (80044fc <HAL_RCC_OscConfig+0x240>)
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80043e6:	2b08      	cmp	r3, #8
 80043e8:	d11c      	bne.n	8004424 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043ea:	4b44      	ldr	r3, [pc, #272]	; (80044fc <HAL_RCC_OscConfig+0x240>)
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d116      	bne.n	8004424 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043f6:	4b41      	ldr	r3, [pc, #260]	; (80044fc <HAL_RCC_OscConfig+0x240>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 0302 	and.w	r3, r3, #2
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d005      	beq.n	800440e <HAL_RCC_OscConfig+0x152>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	68db      	ldr	r3, [r3, #12]
 8004406:	2b01      	cmp	r3, #1
 8004408:	d001      	beq.n	800440e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	e1c7      	b.n	800479e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800440e:	4b3b      	ldr	r3, [pc, #236]	; (80044fc <HAL_RCC_OscConfig+0x240>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	691b      	ldr	r3, [r3, #16]
 800441a:	00db      	lsls	r3, r3, #3
 800441c:	4937      	ldr	r1, [pc, #220]	; (80044fc <HAL_RCC_OscConfig+0x240>)
 800441e:	4313      	orrs	r3, r2
 8004420:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004422:	e03a      	b.n	800449a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	68db      	ldr	r3, [r3, #12]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d020      	beq.n	800446e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800442c:	4b34      	ldr	r3, [pc, #208]	; (8004500 <HAL_RCC_OscConfig+0x244>)
 800442e:	2201      	movs	r2, #1
 8004430:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004432:	f7fd f919 	bl	8001668 <HAL_GetTick>
 8004436:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004438:	e008      	b.n	800444c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800443a:	f7fd f915 	bl	8001668 <HAL_GetTick>
 800443e:	4602      	mov	r2, r0
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	1ad3      	subs	r3, r2, r3
 8004444:	2b02      	cmp	r3, #2
 8004446:	d901      	bls.n	800444c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004448:	2303      	movs	r3, #3
 800444a:	e1a8      	b.n	800479e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800444c:	4b2b      	ldr	r3, [pc, #172]	; (80044fc <HAL_RCC_OscConfig+0x240>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f003 0302 	and.w	r3, r3, #2
 8004454:	2b00      	cmp	r3, #0
 8004456:	d0f0      	beq.n	800443a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004458:	4b28      	ldr	r3, [pc, #160]	; (80044fc <HAL_RCC_OscConfig+0x240>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	691b      	ldr	r3, [r3, #16]
 8004464:	00db      	lsls	r3, r3, #3
 8004466:	4925      	ldr	r1, [pc, #148]	; (80044fc <HAL_RCC_OscConfig+0x240>)
 8004468:	4313      	orrs	r3, r2
 800446a:	600b      	str	r3, [r1, #0]
 800446c:	e015      	b.n	800449a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800446e:	4b24      	ldr	r3, [pc, #144]	; (8004500 <HAL_RCC_OscConfig+0x244>)
 8004470:	2200      	movs	r2, #0
 8004472:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004474:	f7fd f8f8 	bl	8001668 <HAL_GetTick>
 8004478:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800447a:	e008      	b.n	800448e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800447c:	f7fd f8f4 	bl	8001668 <HAL_GetTick>
 8004480:	4602      	mov	r2, r0
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	1ad3      	subs	r3, r2, r3
 8004486:	2b02      	cmp	r3, #2
 8004488:	d901      	bls.n	800448e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800448a:	2303      	movs	r3, #3
 800448c:	e187      	b.n	800479e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800448e:	4b1b      	ldr	r3, [pc, #108]	; (80044fc <HAL_RCC_OscConfig+0x240>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f003 0302 	and.w	r3, r3, #2
 8004496:	2b00      	cmp	r3, #0
 8004498:	d1f0      	bne.n	800447c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 0308 	and.w	r3, r3, #8
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d036      	beq.n	8004514 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	695b      	ldr	r3, [r3, #20]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d016      	beq.n	80044dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044ae:	4b15      	ldr	r3, [pc, #84]	; (8004504 <HAL_RCC_OscConfig+0x248>)
 80044b0:	2201      	movs	r2, #1
 80044b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044b4:	f7fd f8d8 	bl	8001668 <HAL_GetTick>
 80044b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044ba:	e008      	b.n	80044ce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044bc:	f7fd f8d4 	bl	8001668 <HAL_GetTick>
 80044c0:	4602      	mov	r2, r0
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	1ad3      	subs	r3, r2, r3
 80044c6:	2b02      	cmp	r3, #2
 80044c8:	d901      	bls.n	80044ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80044ca:	2303      	movs	r3, #3
 80044cc:	e167      	b.n	800479e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044ce:	4b0b      	ldr	r3, [pc, #44]	; (80044fc <HAL_RCC_OscConfig+0x240>)
 80044d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044d2:	f003 0302 	and.w	r3, r3, #2
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d0f0      	beq.n	80044bc <HAL_RCC_OscConfig+0x200>
 80044da:	e01b      	b.n	8004514 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044dc:	4b09      	ldr	r3, [pc, #36]	; (8004504 <HAL_RCC_OscConfig+0x248>)
 80044de:	2200      	movs	r2, #0
 80044e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044e2:	f7fd f8c1 	bl	8001668 <HAL_GetTick>
 80044e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044e8:	e00e      	b.n	8004508 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044ea:	f7fd f8bd 	bl	8001668 <HAL_GetTick>
 80044ee:	4602      	mov	r2, r0
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	1ad3      	subs	r3, r2, r3
 80044f4:	2b02      	cmp	r3, #2
 80044f6:	d907      	bls.n	8004508 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80044f8:	2303      	movs	r3, #3
 80044fa:	e150      	b.n	800479e <HAL_RCC_OscConfig+0x4e2>
 80044fc:	40023800 	.word	0x40023800
 8004500:	42470000 	.word	0x42470000
 8004504:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004508:	4b88      	ldr	r3, [pc, #544]	; (800472c <HAL_RCC_OscConfig+0x470>)
 800450a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800450c:	f003 0302 	and.w	r3, r3, #2
 8004510:	2b00      	cmp	r3, #0
 8004512:	d1ea      	bne.n	80044ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f003 0304 	and.w	r3, r3, #4
 800451c:	2b00      	cmp	r3, #0
 800451e:	f000 8097 	beq.w	8004650 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004522:	2300      	movs	r3, #0
 8004524:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004526:	4b81      	ldr	r3, [pc, #516]	; (800472c <HAL_RCC_OscConfig+0x470>)
 8004528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800452a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800452e:	2b00      	cmp	r3, #0
 8004530:	d10f      	bne.n	8004552 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004532:	2300      	movs	r3, #0
 8004534:	60bb      	str	r3, [r7, #8]
 8004536:	4b7d      	ldr	r3, [pc, #500]	; (800472c <HAL_RCC_OscConfig+0x470>)
 8004538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800453a:	4a7c      	ldr	r2, [pc, #496]	; (800472c <HAL_RCC_OscConfig+0x470>)
 800453c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004540:	6413      	str	r3, [r2, #64]	; 0x40
 8004542:	4b7a      	ldr	r3, [pc, #488]	; (800472c <HAL_RCC_OscConfig+0x470>)
 8004544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004546:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800454a:	60bb      	str	r3, [r7, #8]
 800454c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800454e:	2301      	movs	r3, #1
 8004550:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004552:	4b77      	ldr	r3, [pc, #476]	; (8004730 <HAL_RCC_OscConfig+0x474>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800455a:	2b00      	cmp	r3, #0
 800455c:	d118      	bne.n	8004590 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800455e:	4b74      	ldr	r3, [pc, #464]	; (8004730 <HAL_RCC_OscConfig+0x474>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a73      	ldr	r2, [pc, #460]	; (8004730 <HAL_RCC_OscConfig+0x474>)
 8004564:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004568:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800456a:	f7fd f87d 	bl	8001668 <HAL_GetTick>
 800456e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004570:	e008      	b.n	8004584 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004572:	f7fd f879 	bl	8001668 <HAL_GetTick>
 8004576:	4602      	mov	r2, r0
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	1ad3      	subs	r3, r2, r3
 800457c:	2b02      	cmp	r3, #2
 800457e:	d901      	bls.n	8004584 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004580:	2303      	movs	r3, #3
 8004582:	e10c      	b.n	800479e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004584:	4b6a      	ldr	r3, [pc, #424]	; (8004730 <HAL_RCC_OscConfig+0x474>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800458c:	2b00      	cmp	r3, #0
 800458e:	d0f0      	beq.n	8004572 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	2b01      	cmp	r3, #1
 8004596:	d106      	bne.n	80045a6 <HAL_RCC_OscConfig+0x2ea>
 8004598:	4b64      	ldr	r3, [pc, #400]	; (800472c <HAL_RCC_OscConfig+0x470>)
 800459a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800459c:	4a63      	ldr	r2, [pc, #396]	; (800472c <HAL_RCC_OscConfig+0x470>)
 800459e:	f043 0301 	orr.w	r3, r3, #1
 80045a2:	6713      	str	r3, [r2, #112]	; 0x70
 80045a4:	e01c      	b.n	80045e0 <HAL_RCC_OscConfig+0x324>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	2b05      	cmp	r3, #5
 80045ac:	d10c      	bne.n	80045c8 <HAL_RCC_OscConfig+0x30c>
 80045ae:	4b5f      	ldr	r3, [pc, #380]	; (800472c <HAL_RCC_OscConfig+0x470>)
 80045b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045b2:	4a5e      	ldr	r2, [pc, #376]	; (800472c <HAL_RCC_OscConfig+0x470>)
 80045b4:	f043 0304 	orr.w	r3, r3, #4
 80045b8:	6713      	str	r3, [r2, #112]	; 0x70
 80045ba:	4b5c      	ldr	r3, [pc, #368]	; (800472c <HAL_RCC_OscConfig+0x470>)
 80045bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045be:	4a5b      	ldr	r2, [pc, #364]	; (800472c <HAL_RCC_OscConfig+0x470>)
 80045c0:	f043 0301 	orr.w	r3, r3, #1
 80045c4:	6713      	str	r3, [r2, #112]	; 0x70
 80045c6:	e00b      	b.n	80045e0 <HAL_RCC_OscConfig+0x324>
 80045c8:	4b58      	ldr	r3, [pc, #352]	; (800472c <HAL_RCC_OscConfig+0x470>)
 80045ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045cc:	4a57      	ldr	r2, [pc, #348]	; (800472c <HAL_RCC_OscConfig+0x470>)
 80045ce:	f023 0301 	bic.w	r3, r3, #1
 80045d2:	6713      	str	r3, [r2, #112]	; 0x70
 80045d4:	4b55      	ldr	r3, [pc, #340]	; (800472c <HAL_RCC_OscConfig+0x470>)
 80045d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045d8:	4a54      	ldr	r2, [pc, #336]	; (800472c <HAL_RCC_OscConfig+0x470>)
 80045da:	f023 0304 	bic.w	r3, r3, #4
 80045de:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d015      	beq.n	8004614 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045e8:	f7fd f83e 	bl	8001668 <HAL_GetTick>
 80045ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045ee:	e00a      	b.n	8004606 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045f0:	f7fd f83a 	bl	8001668 <HAL_GetTick>
 80045f4:	4602      	mov	r2, r0
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	1ad3      	subs	r3, r2, r3
 80045fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80045fe:	4293      	cmp	r3, r2
 8004600:	d901      	bls.n	8004606 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004602:	2303      	movs	r3, #3
 8004604:	e0cb      	b.n	800479e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004606:	4b49      	ldr	r3, [pc, #292]	; (800472c <HAL_RCC_OscConfig+0x470>)
 8004608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800460a:	f003 0302 	and.w	r3, r3, #2
 800460e:	2b00      	cmp	r3, #0
 8004610:	d0ee      	beq.n	80045f0 <HAL_RCC_OscConfig+0x334>
 8004612:	e014      	b.n	800463e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004614:	f7fd f828 	bl	8001668 <HAL_GetTick>
 8004618:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800461a:	e00a      	b.n	8004632 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800461c:	f7fd f824 	bl	8001668 <HAL_GetTick>
 8004620:	4602      	mov	r2, r0
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	1ad3      	subs	r3, r2, r3
 8004626:	f241 3288 	movw	r2, #5000	; 0x1388
 800462a:	4293      	cmp	r3, r2
 800462c:	d901      	bls.n	8004632 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800462e:	2303      	movs	r3, #3
 8004630:	e0b5      	b.n	800479e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004632:	4b3e      	ldr	r3, [pc, #248]	; (800472c <HAL_RCC_OscConfig+0x470>)
 8004634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004636:	f003 0302 	and.w	r3, r3, #2
 800463a:	2b00      	cmp	r3, #0
 800463c:	d1ee      	bne.n	800461c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800463e:	7dfb      	ldrb	r3, [r7, #23]
 8004640:	2b01      	cmp	r3, #1
 8004642:	d105      	bne.n	8004650 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004644:	4b39      	ldr	r3, [pc, #228]	; (800472c <HAL_RCC_OscConfig+0x470>)
 8004646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004648:	4a38      	ldr	r2, [pc, #224]	; (800472c <HAL_RCC_OscConfig+0x470>)
 800464a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800464e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	699b      	ldr	r3, [r3, #24]
 8004654:	2b00      	cmp	r3, #0
 8004656:	f000 80a1 	beq.w	800479c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800465a:	4b34      	ldr	r3, [pc, #208]	; (800472c <HAL_RCC_OscConfig+0x470>)
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	f003 030c 	and.w	r3, r3, #12
 8004662:	2b08      	cmp	r3, #8
 8004664:	d05c      	beq.n	8004720 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	699b      	ldr	r3, [r3, #24]
 800466a:	2b02      	cmp	r3, #2
 800466c:	d141      	bne.n	80046f2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800466e:	4b31      	ldr	r3, [pc, #196]	; (8004734 <HAL_RCC_OscConfig+0x478>)
 8004670:	2200      	movs	r2, #0
 8004672:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004674:	f7fc fff8 	bl	8001668 <HAL_GetTick>
 8004678:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800467a:	e008      	b.n	800468e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800467c:	f7fc fff4 	bl	8001668 <HAL_GetTick>
 8004680:	4602      	mov	r2, r0
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	1ad3      	subs	r3, r2, r3
 8004686:	2b02      	cmp	r3, #2
 8004688:	d901      	bls.n	800468e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800468a:	2303      	movs	r3, #3
 800468c:	e087      	b.n	800479e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800468e:	4b27      	ldr	r3, [pc, #156]	; (800472c <HAL_RCC_OscConfig+0x470>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004696:	2b00      	cmp	r3, #0
 8004698:	d1f0      	bne.n	800467c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	69da      	ldr	r2, [r3, #28]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6a1b      	ldr	r3, [r3, #32]
 80046a2:	431a      	orrs	r2, r3
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a8:	019b      	lsls	r3, r3, #6
 80046aa:	431a      	orrs	r2, r3
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046b0:	085b      	lsrs	r3, r3, #1
 80046b2:	3b01      	subs	r3, #1
 80046b4:	041b      	lsls	r3, r3, #16
 80046b6:	431a      	orrs	r2, r3
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046bc:	061b      	lsls	r3, r3, #24
 80046be:	491b      	ldr	r1, [pc, #108]	; (800472c <HAL_RCC_OscConfig+0x470>)
 80046c0:	4313      	orrs	r3, r2
 80046c2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046c4:	4b1b      	ldr	r3, [pc, #108]	; (8004734 <HAL_RCC_OscConfig+0x478>)
 80046c6:	2201      	movs	r2, #1
 80046c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046ca:	f7fc ffcd 	bl	8001668 <HAL_GetTick>
 80046ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046d0:	e008      	b.n	80046e4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046d2:	f7fc ffc9 	bl	8001668 <HAL_GetTick>
 80046d6:	4602      	mov	r2, r0
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	1ad3      	subs	r3, r2, r3
 80046dc:	2b02      	cmp	r3, #2
 80046de:	d901      	bls.n	80046e4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80046e0:	2303      	movs	r3, #3
 80046e2:	e05c      	b.n	800479e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046e4:	4b11      	ldr	r3, [pc, #68]	; (800472c <HAL_RCC_OscConfig+0x470>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d0f0      	beq.n	80046d2 <HAL_RCC_OscConfig+0x416>
 80046f0:	e054      	b.n	800479c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046f2:	4b10      	ldr	r3, [pc, #64]	; (8004734 <HAL_RCC_OscConfig+0x478>)
 80046f4:	2200      	movs	r2, #0
 80046f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046f8:	f7fc ffb6 	bl	8001668 <HAL_GetTick>
 80046fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046fe:	e008      	b.n	8004712 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004700:	f7fc ffb2 	bl	8001668 <HAL_GetTick>
 8004704:	4602      	mov	r2, r0
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	1ad3      	subs	r3, r2, r3
 800470a:	2b02      	cmp	r3, #2
 800470c:	d901      	bls.n	8004712 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800470e:	2303      	movs	r3, #3
 8004710:	e045      	b.n	800479e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004712:	4b06      	ldr	r3, [pc, #24]	; (800472c <HAL_RCC_OscConfig+0x470>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800471a:	2b00      	cmp	r3, #0
 800471c:	d1f0      	bne.n	8004700 <HAL_RCC_OscConfig+0x444>
 800471e:	e03d      	b.n	800479c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	699b      	ldr	r3, [r3, #24]
 8004724:	2b01      	cmp	r3, #1
 8004726:	d107      	bne.n	8004738 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	e038      	b.n	800479e <HAL_RCC_OscConfig+0x4e2>
 800472c:	40023800 	.word	0x40023800
 8004730:	40007000 	.word	0x40007000
 8004734:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004738:	4b1b      	ldr	r3, [pc, #108]	; (80047a8 <HAL_RCC_OscConfig+0x4ec>)
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	699b      	ldr	r3, [r3, #24]
 8004742:	2b01      	cmp	r3, #1
 8004744:	d028      	beq.n	8004798 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004750:	429a      	cmp	r2, r3
 8004752:	d121      	bne.n	8004798 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800475e:	429a      	cmp	r2, r3
 8004760:	d11a      	bne.n	8004798 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004762:	68fa      	ldr	r2, [r7, #12]
 8004764:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004768:	4013      	ands	r3, r2
 800476a:	687a      	ldr	r2, [r7, #4]
 800476c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800476e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004770:	4293      	cmp	r3, r2
 8004772:	d111      	bne.n	8004798 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800477e:	085b      	lsrs	r3, r3, #1
 8004780:	3b01      	subs	r3, #1
 8004782:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004784:	429a      	cmp	r2, r3
 8004786:	d107      	bne.n	8004798 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004792:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004794:	429a      	cmp	r2, r3
 8004796:	d001      	beq.n	800479c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	e000      	b.n	800479e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800479c:	2300      	movs	r3, #0
}
 800479e:	4618      	mov	r0, r3
 80047a0:	3718      	adds	r7, #24
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}
 80047a6:	bf00      	nop
 80047a8:	40023800 	.word	0x40023800

080047ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b084      	sub	sp, #16
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
 80047b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d101      	bne.n	80047c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	e0cc      	b.n	800495a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80047c0:	4b68      	ldr	r3, [pc, #416]	; (8004964 <HAL_RCC_ClockConfig+0x1b8>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f003 030f 	and.w	r3, r3, #15
 80047c8:	683a      	ldr	r2, [r7, #0]
 80047ca:	429a      	cmp	r2, r3
 80047cc:	d90c      	bls.n	80047e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047ce:	4b65      	ldr	r3, [pc, #404]	; (8004964 <HAL_RCC_ClockConfig+0x1b8>)
 80047d0:	683a      	ldr	r2, [r7, #0]
 80047d2:	b2d2      	uxtb	r2, r2
 80047d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047d6:	4b63      	ldr	r3, [pc, #396]	; (8004964 <HAL_RCC_ClockConfig+0x1b8>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 030f 	and.w	r3, r3, #15
 80047de:	683a      	ldr	r2, [r7, #0]
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d001      	beq.n	80047e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80047e4:	2301      	movs	r3, #1
 80047e6:	e0b8      	b.n	800495a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f003 0302 	and.w	r3, r3, #2
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d020      	beq.n	8004836 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 0304 	and.w	r3, r3, #4
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d005      	beq.n	800480c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004800:	4b59      	ldr	r3, [pc, #356]	; (8004968 <HAL_RCC_ClockConfig+0x1bc>)
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	4a58      	ldr	r2, [pc, #352]	; (8004968 <HAL_RCC_ClockConfig+0x1bc>)
 8004806:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800480a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f003 0308 	and.w	r3, r3, #8
 8004814:	2b00      	cmp	r3, #0
 8004816:	d005      	beq.n	8004824 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004818:	4b53      	ldr	r3, [pc, #332]	; (8004968 <HAL_RCC_ClockConfig+0x1bc>)
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	4a52      	ldr	r2, [pc, #328]	; (8004968 <HAL_RCC_ClockConfig+0x1bc>)
 800481e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004822:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004824:	4b50      	ldr	r3, [pc, #320]	; (8004968 <HAL_RCC_ClockConfig+0x1bc>)
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	494d      	ldr	r1, [pc, #308]	; (8004968 <HAL_RCC_ClockConfig+0x1bc>)
 8004832:	4313      	orrs	r3, r2
 8004834:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f003 0301 	and.w	r3, r3, #1
 800483e:	2b00      	cmp	r3, #0
 8004840:	d044      	beq.n	80048cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	2b01      	cmp	r3, #1
 8004848:	d107      	bne.n	800485a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800484a:	4b47      	ldr	r3, [pc, #284]	; (8004968 <HAL_RCC_ClockConfig+0x1bc>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004852:	2b00      	cmp	r3, #0
 8004854:	d119      	bne.n	800488a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	e07f      	b.n	800495a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	2b02      	cmp	r3, #2
 8004860:	d003      	beq.n	800486a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004866:	2b03      	cmp	r3, #3
 8004868:	d107      	bne.n	800487a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800486a:	4b3f      	ldr	r3, [pc, #252]	; (8004968 <HAL_RCC_ClockConfig+0x1bc>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004872:	2b00      	cmp	r3, #0
 8004874:	d109      	bne.n	800488a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	e06f      	b.n	800495a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800487a:	4b3b      	ldr	r3, [pc, #236]	; (8004968 <HAL_RCC_ClockConfig+0x1bc>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f003 0302 	and.w	r3, r3, #2
 8004882:	2b00      	cmp	r3, #0
 8004884:	d101      	bne.n	800488a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	e067      	b.n	800495a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800488a:	4b37      	ldr	r3, [pc, #220]	; (8004968 <HAL_RCC_ClockConfig+0x1bc>)
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	f023 0203 	bic.w	r2, r3, #3
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	4934      	ldr	r1, [pc, #208]	; (8004968 <HAL_RCC_ClockConfig+0x1bc>)
 8004898:	4313      	orrs	r3, r2
 800489a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800489c:	f7fc fee4 	bl	8001668 <HAL_GetTick>
 80048a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048a2:	e00a      	b.n	80048ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048a4:	f7fc fee0 	bl	8001668 <HAL_GetTick>
 80048a8:	4602      	mov	r2, r0
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	1ad3      	subs	r3, r2, r3
 80048ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d901      	bls.n	80048ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80048b6:	2303      	movs	r3, #3
 80048b8:	e04f      	b.n	800495a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048ba:	4b2b      	ldr	r3, [pc, #172]	; (8004968 <HAL_RCC_ClockConfig+0x1bc>)
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	f003 020c 	and.w	r2, r3, #12
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	009b      	lsls	r3, r3, #2
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d1eb      	bne.n	80048a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80048cc:	4b25      	ldr	r3, [pc, #148]	; (8004964 <HAL_RCC_ClockConfig+0x1b8>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f003 030f 	and.w	r3, r3, #15
 80048d4:	683a      	ldr	r2, [r7, #0]
 80048d6:	429a      	cmp	r2, r3
 80048d8:	d20c      	bcs.n	80048f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048da:	4b22      	ldr	r3, [pc, #136]	; (8004964 <HAL_RCC_ClockConfig+0x1b8>)
 80048dc:	683a      	ldr	r2, [r7, #0]
 80048de:	b2d2      	uxtb	r2, r2
 80048e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048e2:	4b20      	ldr	r3, [pc, #128]	; (8004964 <HAL_RCC_ClockConfig+0x1b8>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 030f 	and.w	r3, r3, #15
 80048ea:	683a      	ldr	r2, [r7, #0]
 80048ec:	429a      	cmp	r2, r3
 80048ee:	d001      	beq.n	80048f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80048f0:	2301      	movs	r3, #1
 80048f2:	e032      	b.n	800495a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f003 0304 	and.w	r3, r3, #4
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d008      	beq.n	8004912 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004900:	4b19      	ldr	r3, [pc, #100]	; (8004968 <HAL_RCC_ClockConfig+0x1bc>)
 8004902:	689b      	ldr	r3, [r3, #8]
 8004904:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	68db      	ldr	r3, [r3, #12]
 800490c:	4916      	ldr	r1, [pc, #88]	; (8004968 <HAL_RCC_ClockConfig+0x1bc>)
 800490e:	4313      	orrs	r3, r2
 8004910:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f003 0308 	and.w	r3, r3, #8
 800491a:	2b00      	cmp	r3, #0
 800491c:	d009      	beq.n	8004932 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800491e:	4b12      	ldr	r3, [pc, #72]	; (8004968 <HAL_RCC_ClockConfig+0x1bc>)
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	691b      	ldr	r3, [r3, #16]
 800492a:	00db      	lsls	r3, r3, #3
 800492c:	490e      	ldr	r1, [pc, #56]	; (8004968 <HAL_RCC_ClockConfig+0x1bc>)
 800492e:	4313      	orrs	r3, r2
 8004930:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004932:	f000 f821 	bl	8004978 <HAL_RCC_GetSysClockFreq>
 8004936:	4602      	mov	r2, r0
 8004938:	4b0b      	ldr	r3, [pc, #44]	; (8004968 <HAL_RCC_ClockConfig+0x1bc>)
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	091b      	lsrs	r3, r3, #4
 800493e:	f003 030f 	and.w	r3, r3, #15
 8004942:	490a      	ldr	r1, [pc, #40]	; (800496c <HAL_RCC_ClockConfig+0x1c0>)
 8004944:	5ccb      	ldrb	r3, [r1, r3]
 8004946:	fa22 f303 	lsr.w	r3, r2, r3
 800494a:	4a09      	ldr	r2, [pc, #36]	; (8004970 <HAL_RCC_ClockConfig+0x1c4>)
 800494c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800494e:	4b09      	ldr	r3, [pc, #36]	; (8004974 <HAL_RCC_ClockConfig+0x1c8>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4618      	mov	r0, r3
 8004954:	f7fc fd26 	bl	80013a4 <HAL_InitTick>

  return HAL_OK;
 8004958:	2300      	movs	r3, #0
}
 800495a:	4618      	mov	r0, r3
 800495c:	3710      	adds	r7, #16
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}
 8004962:	bf00      	nop
 8004964:	40023c00 	.word	0x40023c00
 8004968:	40023800 	.word	0x40023800
 800496c:	0800c0a0 	.word	0x0800c0a0
 8004970:	20000000 	.word	0x20000000
 8004974:	20000004 	.word	0x20000004

08004978 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004978:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800497c:	b094      	sub	sp, #80	; 0x50
 800497e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004980:	2300      	movs	r3, #0
 8004982:	647b      	str	r3, [r7, #68]	; 0x44
 8004984:	2300      	movs	r3, #0
 8004986:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004988:	2300      	movs	r3, #0
 800498a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800498c:	2300      	movs	r3, #0
 800498e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004990:	4b79      	ldr	r3, [pc, #484]	; (8004b78 <HAL_RCC_GetSysClockFreq+0x200>)
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	f003 030c 	and.w	r3, r3, #12
 8004998:	2b08      	cmp	r3, #8
 800499a:	d00d      	beq.n	80049b8 <HAL_RCC_GetSysClockFreq+0x40>
 800499c:	2b08      	cmp	r3, #8
 800499e:	f200 80e1 	bhi.w	8004b64 <HAL_RCC_GetSysClockFreq+0x1ec>
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d002      	beq.n	80049ac <HAL_RCC_GetSysClockFreq+0x34>
 80049a6:	2b04      	cmp	r3, #4
 80049a8:	d003      	beq.n	80049b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80049aa:	e0db      	b.n	8004b64 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80049ac:	4b73      	ldr	r3, [pc, #460]	; (8004b7c <HAL_RCC_GetSysClockFreq+0x204>)
 80049ae:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80049b0:	e0db      	b.n	8004b6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80049b2:	4b73      	ldr	r3, [pc, #460]	; (8004b80 <HAL_RCC_GetSysClockFreq+0x208>)
 80049b4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80049b6:	e0d8      	b.n	8004b6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80049b8:	4b6f      	ldr	r3, [pc, #444]	; (8004b78 <HAL_RCC_GetSysClockFreq+0x200>)
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80049c0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80049c2:	4b6d      	ldr	r3, [pc, #436]	; (8004b78 <HAL_RCC_GetSysClockFreq+0x200>)
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d063      	beq.n	8004a96 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049ce:	4b6a      	ldr	r3, [pc, #424]	; (8004b78 <HAL_RCC_GetSysClockFreq+0x200>)
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	099b      	lsrs	r3, r3, #6
 80049d4:	2200      	movs	r2, #0
 80049d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80049d8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80049da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049e0:	633b      	str	r3, [r7, #48]	; 0x30
 80049e2:	2300      	movs	r3, #0
 80049e4:	637b      	str	r3, [r7, #52]	; 0x34
 80049e6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80049ea:	4622      	mov	r2, r4
 80049ec:	462b      	mov	r3, r5
 80049ee:	f04f 0000 	mov.w	r0, #0
 80049f2:	f04f 0100 	mov.w	r1, #0
 80049f6:	0159      	lsls	r1, r3, #5
 80049f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80049fc:	0150      	lsls	r0, r2, #5
 80049fe:	4602      	mov	r2, r0
 8004a00:	460b      	mov	r3, r1
 8004a02:	4621      	mov	r1, r4
 8004a04:	1a51      	subs	r1, r2, r1
 8004a06:	6139      	str	r1, [r7, #16]
 8004a08:	4629      	mov	r1, r5
 8004a0a:	eb63 0301 	sbc.w	r3, r3, r1
 8004a0e:	617b      	str	r3, [r7, #20]
 8004a10:	f04f 0200 	mov.w	r2, #0
 8004a14:	f04f 0300 	mov.w	r3, #0
 8004a18:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004a1c:	4659      	mov	r1, fp
 8004a1e:	018b      	lsls	r3, r1, #6
 8004a20:	4651      	mov	r1, sl
 8004a22:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004a26:	4651      	mov	r1, sl
 8004a28:	018a      	lsls	r2, r1, #6
 8004a2a:	4651      	mov	r1, sl
 8004a2c:	ebb2 0801 	subs.w	r8, r2, r1
 8004a30:	4659      	mov	r1, fp
 8004a32:	eb63 0901 	sbc.w	r9, r3, r1
 8004a36:	f04f 0200 	mov.w	r2, #0
 8004a3a:	f04f 0300 	mov.w	r3, #0
 8004a3e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a42:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a46:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a4a:	4690      	mov	r8, r2
 8004a4c:	4699      	mov	r9, r3
 8004a4e:	4623      	mov	r3, r4
 8004a50:	eb18 0303 	adds.w	r3, r8, r3
 8004a54:	60bb      	str	r3, [r7, #8]
 8004a56:	462b      	mov	r3, r5
 8004a58:	eb49 0303 	adc.w	r3, r9, r3
 8004a5c:	60fb      	str	r3, [r7, #12]
 8004a5e:	f04f 0200 	mov.w	r2, #0
 8004a62:	f04f 0300 	mov.w	r3, #0
 8004a66:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004a6a:	4629      	mov	r1, r5
 8004a6c:	024b      	lsls	r3, r1, #9
 8004a6e:	4621      	mov	r1, r4
 8004a70:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004a74:	4621      	mov	r1, r4
 8004a76:	024a      	lsls	r2, r1, #9
 8004a78:	4610      	mov	r0, r2
 8004a7a:	4619      	mov	r1, r3
 8004a7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a7e:	2200      	movs	r2, #0
 8004a80:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a82:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a84:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004a88:	f7fb fbb2 	bl	80001f0 <__aeabi_uldivmod>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	460b      	mov	r3, r1
 8004a90:	4613      	mov	r3, r2
 8004a92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a94:	e058      	b.n	8004b48 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a96:	4b38      	ldr	r3, [pc, #224]	; (8004b78 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	099b      	lsrs	r3, r3, #6
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	4611      	mov	r1, r2
 8004aa2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004aa6:	623b      	str	r3, [r7, #32]
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	627b      	str	r3, [r7, #36]	; 0x24
 8004aac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004ab0:	4642      	mov	r2, r8
 8004ab2:	464b      	mov	r3, r9
 8004ab4:	f04f 0000 	mov.w	r0, #0
 8004ab8:	f04f 0100 	mov.w	r1, #0
 8004abc:	0159      	lsls	r1, r3, #5
 8004abe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ac2:	0150      	lsls	r0, r2, #5
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	460b      	mov	r3, r1
 8004ac8:	4641      	mov	r1, r8
 8004aca:	ebb2 0a01 	subs.w	sl, r2, r1
 8004ace:	4649      	mov	r1, r9
 8004ad0:	eb63 0b01 	sbc.w	fp, r3, r1
 8004ad4:	f04f 0200 	mov.w	r2, #0
 8004ad8:	f04f 0300 	mov.w	r3, #0
 8004adc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004ae0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004ae4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004ae8:	ebb2 040a 	subs.w	r4, r2, sl
 8004aec:	eb63 050b 	sbc.w	r5, r3, fp
 8004af0:	f04f 0200 	mov.w	r2, #0
 8004af4:	f04f 0300 	mov.w	r3, #0
 8004af8:	00eb      	lsls	r3, r5, #3
 8004afa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004afe:	00e2      	lsls	r2, r4, #3
 8004b00:	4614      	mov	r4, r2
 8004b02:	461d      	mov	r5, r3
 8004b04:	4643      	mov	r3, r8
 8004b06:	18e3      	adds	r3, r4, r3
 8004b08:	603b      	str	r3, [r7, #0]
 8004b0a:	464b      	mov	r3, r9
 8004b0c:	eb45 0303 	adc.w	r3, r5, r3
 8004b10:	607b      	str	r3, [r7, #4]
 8004b12:	f04f 0200 	mov.w	r2, #0
 8004b16:	f04f 0300 	mov.w	r3, #0
 8004b1a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004b1e:	4629      	mov	r1, r5
 8004b20:	028b      	lsls	r3, r1, #10
 8004b22:	4621      	mov	r1, r4
 8004b24:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004b28:	4621      	mov	r1, r4
 8004b2a:	028a      	lsls	r2, r1, #10
 8004b2c:	4610      	mov	r0, r2
 8004b2e:	4619      	mov	r1, r3
 8004b30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b32:	2200      	movs	r2, #0
 8004b34:	61bb      	str	r3, [r7, #24]
 8004b36:	61fa      	str	r2, [r7, #28]
 8004b38:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b3c:	f7fb fb58 	bl	80001f0 <__aeabi_uldivmod>
 8004b40:	4602      	mov	r2, r0
 8004b42:	460b      	mov	r3, r1
 8004b44:	4613      	mov	r3, r2
 8004b46:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004b48:	4b0b      	ldr	r3, [pc, #44]	; (8004b78 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	0c1b      	lsrs	r3, r3, #16
 8004b4e:	f003 0303 	and.w	r3, r3, #3
 8004b52:	3301      	adds	r3, #1
 8004b54:	005b      	lsls	r3, r3, #1
 8004b56:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004b58:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004b5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b60:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004b62:	e002      	b.n	8004b6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b64:	4b05      	ldr	r3, [pc, #20]	; (8004b7c <HAL_RCC_GetSysClockFreq+0x204>)
 8004b66:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004b68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3750      	adds	r7, #80	; 0x50
 8004b70:	46bd      	mov	sp, r7
 8004b72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b76:	bf00      	nop
 8004b78:	40023800 	.word	0x40023800
 8004b7c:	00f42400 	.word	0x00f42400
 8004b80:	007a1200 	.word	0x007a1200

08004b84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b84:	b480      	push	{r7}
 8004b86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b88:	4b03      	ldr	r3, [pc, #12]	; (8004b98 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b94:	4770      	bx	lr
 8004b96:	bf00      	nop
 8004b98:	20000000 	.word	0x20000000

08004b9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004ba0:	f7ff fff0 	bl	8004b84 <HAL_RCC_GetHCLKFreq>
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	4b05      	ldr	r3, [pc, #20]	; (8004bbc <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ba8:	689b      	ldr	r3, [r3, #8]
 8004baa:	0a9b      	lsrs	r3, r3, #10
 8004bac:	f003 0307 	and.w	r3, r3, #7
 8004bb0:	4903      	ldr	r1, [pc, #12]	; (8004bc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004bb2:	5ccb      	ldrb	r3, [r1, r3]
 8004bb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	bd80      	pop	{r7, pc}
 8004bbc:	40023800 	.word	0x40023800
 8004bc0:	0800c0b0 	.word	0x0800c0b0

08004bc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004bc8:	f7ff ffdc 	bl	8004b84 <HAL_RCC_GetHCLKFreq>
 8004bcc:	4602      	mov	r2, r0
 8004bce:	4b05      	ldr	r3, [pc, #20]	; (8004be4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004bd0:	689b      	ldr	r3, [r3, #8]
 8004bd2:	0b5b      	lsrs	r3, r3, #13
 8004bd4:	f003 0307 	and.w	r3, r3, #7
 8004bd8:	4903      	ldr	r1, [pc, #12]	; (8004be8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004bda:	5ccb      	ldrb	r3, [r1, r3]
 8004bdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	bd80      	pop	{r7, pc}
 8004be4:	40023800 	.word	0x40023800
 8004be8:	0800c0b0 	.word	0x0800c0b0

08004bec <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b083      	sub	sp, #12
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
 8004bf4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	220f      	movs	r2, #15
 8004bfa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004bfc:	4b12      	ldr	r3, [pc, #72]	; (8004c48 <HAL_RCC_GetClockConfig+0x5c>)
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	f003 0203 	and.w	r2, r3, #3
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004c08:	4b0f      	ldr	r3, [pc, #60]	; (8004c48 <HAL_RCC_GetClockConfig+0x5c>)
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004c14:	4b0c      	ldr	r3, [pc, #48]	; (8004c48 <HAL_RCC_GetClockConfig+0x5c>)
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004c20:	4b09      	ldr	r3, [pc, #36]	; (8004c48 <HAL_RCC_GetClockConfig+0x5c>)
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	08db      	lsrs	r3, r3, #3
 8004c26:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004c2e:	4b07      	ldr	r3, [pc, #28]	; (8004c4c <HAL_RCC_GetClockConfig+0x60>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f003 020f 	and.w	r2, r3, #15
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	601a      	str	r2, [r3, #0]
}
 8004c3a:	bf00      	nop
 8004c3c:	370c      	adds	r7, #12
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c44:	4770      	bx	lr
 8004c46:	bf00      	nop
 8004c48:	40023800 	.word	0x40023800
 8004c4c:	40023c00 	.word	0x40023c00

08004c50 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b086      	sub	sp, #24
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004c58:	2300      	movs	r3, #0
 8004c5a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f003 0301 	and.w	r3, r3, #1
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d10b      	bne.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d105      	bne.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d075      	beq.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004c84:	4b91      	ldr	r3, [pc, #580]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004c86:	2200      	movs	r2, #0
 8004c88:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004c8a:	f7fc fced 	bl	8001668 <HAL_GetTick>
 8004c8e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c90:	e008      	b.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004c92:	f7fc fce9 	bl	8001668 <HAL_GetTick>
 8004c96:	4602      	mov	r2, r0
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	1ad3      	subs	r3, r2, r3
 8004c9c:	2b02      	cmp	r3, #2
 8004c9e:	d901      	bls.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ca0:	2303      	movs	r3, #3
 8004ca2:	e189      	b.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ca4:	4b8a      	ldr	r3, [pc, #552]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d1f0      	bne.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f003 0301 	and.w	r3, r3, #1
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d009      	beq.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	019a      	lsls	r2, r3, #6
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	071b      	lsls	r3, r3, #28
 8004cc8:	4981      	ldr	r1, [pc, #516]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f003 0302 	and.w	r3, r3, #2
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d01f      	beq.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004cdc:	4b7c      	ldr	r3, [pc, #496]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004cde:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ce2:	0f1b      	lsrs	r3, r3, #28
 8004ce4:	f003 0307 	and.w	r3, r3, #7
 8004ce8:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	019a      	lsls	r2, r3, #6
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	68db      	ldr	r3, [r3, #12]
 8004cf4:	061b      	lsls	r3, r3, #24
 8004cf6:	431a      	orrs	r2, r3
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	071b      	lsls	r3, r3, #28
 8004cfc:	4974      	ldr	r1, [pc, #464]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004d04:	4b72      	ldr	r3, [pc, #456]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004d06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d0a:	f023 021f 	bic.w	r2, r3, #31
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	69db      	ldr	r3, [r3, #28]
 8004d12:	3b01      	subs	r3, #1
 8004d14:	496e      	ldr	r1, [pc, #440]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004d16:	4313      	orrs	r3, r2
 8004d18:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d00d      	beq.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	019a      	lsls	r2, r3, #6
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	68db      	ldr	r3, [r3, #12]
 8004d32:	061b      	lsls	r3, r3, #24
 8004d34:	431a      	orrs	r2, r3
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	689b      	ldr	r3, [r3, #8]
 8004d3a:	071b      	lsls	r3, r3, #28
 8004d3c:	4964      	ldr	r1, [pc, #400]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004d44:	4b61      	ldr	r3, [pc, #388]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004d46:	2201      	movs	r2, #1
 8004d48:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004d4a:	f7fc fc8d 	bl	8001668 <HAL_GetTick>
 8004d4e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004d50:	e008      	b.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004d52:	f7fc fc89 	bl	8001668 <HAL_GetTick>
 8004d56:	4602      	mov	r2, r0
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	1ad3      	subs	r3, r2, r3
 8004d5c:	2b02      	cmp	r3, #2
 8004d5e:	d901      	bls.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d60:	2303      	movs	r3, #3
 8004d62:	e129      	b.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004d64:	4b5a      	ldr	r3, [pc, #360]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d0f0      	beq.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f003 0304 	and.w	r3, r3, #4
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d105      	bne.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d079      	beq.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004d88:	4b52      	ldr	r3, [pc, #328]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004d8e:	f7fc fc6b 	bl	8001668 <HAL_GetTick>
 8004d92:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004d94:	e008      	b.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004d96:	f7fc fc67 	bl	8001668 <HAL_GetTick>
 8004d9a:	4602      	mov	r2, r0
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	1ad3      	subs	r3, r2, r3
 8004da0:	2b02      	cmp	r3, #2
 8004da2:	d901      	bls.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004da4:	2303      	movs	r3, #3
 8004da6:	e107      	b.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004da8:	4b49      	ldr	r3, [pc, #292]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004db0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004db4:	d0ef      	beq.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f003 0304 	and.w	r3, r3, #4
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d020      	beq.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004dc2:	4b43      	ldr	r3, [pc, #268]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004dc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dc8:	0f1b      	lsrs	r3, r3, #28
 8004dca:	f003 0307 	and.w	r3, r3, #7
 8004dce:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	691b      	ldr	r3, [r3, #16]
 8004dd4:	019a      	lsls	r2, r3, #6
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	695b      	ldr	r3, [r3, #20]
 8004dda:	061b      	lsls	r3, r3, #24
 8004ddc:	431a      	orrs	r2, r3
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	071b      	lsls	r3, r3, #28
 8004de2:	493b      	ldr	r1, [pc, #236]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004de4:	4313      	orrs	r3, r2
 8004de6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004dea:	4b39      	ldr	r3, [pc, #228]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004dec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004df0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6a1b      	ldr	r3, [r3, #32]
 8004df8:	3b01      	subs	r3, #1
 8004dfa:	021b      	lsls	r3, r3, #8
 8004dfc:	4934      	ldr	r1, [pc, #208]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f003 0308 	and.w	r3, r3, #8
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d01e      	beq.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004e10:	4b2f      	ldr	r3, [pc, #188]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e16:	0e1b      	lsrs	r3, r3, #24
 8004e18:	f003 030f 	and.w	r3, r3, #15
 8004e1c:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	691b      	ldr	r3, [r3, #16]
 8004e22:	019a      	lsls	r2, r3, #6
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	061b      	lsls	r3, r3, #24
 8004e28:	431a      	orrs	r2, r3
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	699b      	ldr	r3, [r3, #24]
 8004e2e:	071b      	lsls	r3, r3, #28
 8004e30:	4927      	ldr	r1, [pc, #156]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e32:	4313      	orrs	r3, r2
 8004e34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004e38:	4b25      	ldr	r3, [pc, #148]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e3e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e46:	4922      	ldr	r1, [pc, #136]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004e4e:	4b21      	ldr	r3, [pc, #132]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004e50:	2201      	movs	r2, #1
 8004e52:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004e54:	f7fc fc08 	bl	8001668 <HAL_GetTick>
 8004e58:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004e5a:	e008      	b.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004e5c:	f7fc fc04 	bl	8001668 <HAL_GetTick>
 8004e60:	4602      	mov	r2, r0
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	1ad3      	subs	r3, r2, r3
 8004e66:	2b02      	cmp	r3, #2
 8004e68:	d901      	bls.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e6a:	2303      	movs	r3, #3
 8004e6c:	e0a4      	b.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004e6e:	4b18      	ldr	r3, [pc, #96]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e7a:	d1ef      	bne.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f003 0320 	and.w	r3, r3, #32
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	f000 808b 	beq.w	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	60fb      	str	r3, [r7, #12]
 8004e8e:	4b10      	ldr	r3, [pc, #64]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e92:	4a0f      	ldr	r2, [pc, #60]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e98:	6413      	str	r3, [r2, #64]	; 0x40
 8004e9a:	4b0d      	ldr	r3, [pc, #52]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ea2:	60fb      	str	r3, [r7, #12]
 8004ea4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004ea6:	4b0c      	ldr	r3, [pc, #48]	; (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a0b      	ldr	r2, [pc, #44]	; (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8004eac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004eb0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004eb2:	f7fc fbd9 	bl	8001668 <HAL_GetTick>
 8004eb6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004eb8:	e010      	b.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004eba:	f7fc fbd5 	bl	8001668 <HAL_GetTick>
 8004ebe:	4602      	mov	r2, r0
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	1ad3      	subs	r3, r2, r3
 8004ec4:	2b02      	cmp	r3, #2
 8004ec6:	d909      	bls.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8004ec8:	2303      	movs	r3, #3
 8004eca:	e075      	b.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8004ecc:	42470068 	.word	0x42470068
 8004ed0:	40023800 	.word	0x40023800
 8004ed4:	42470070 	.word	0x42470070
 8004ed8:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004edc:	4b38      	ldr	r3, [pc, #224]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d0e8      	beq.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004ee8:	4b36      	ldr	r3, [pc, #216]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004eea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ef0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d02f      	beq.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004efc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f00:	693a      	ldr	r2, [r7, #16]
 8004f02:	429a      	cmp	r2, r3
 8004f04:	d028      	beq.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004f06:	4b2f      	ldr	r3, [pc, #188]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f0e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004f10:	4b2d      	ldr	r3, [pc, #180]	; (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004f12:	2201      	movs	r2, #1
 8004f14:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004f16:	4b2c      	ldr	r3, [pc, #176]	; (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004f18:	2200      	movs	r2, #0
 8004f1a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004f1c:	4a29      	ldr	r2, [pc, #164]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004f22:	4b28      	ldr	r3, [pc, #160]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004f24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f26:	f003 0301 	and.w	r3, r3, #1
 8004f2a:	2b01      	cmp	r3, #1
 8004f2c:	d114      	bne.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004f2e:	f7fc fb9b 	bl	8001668 <HAL_GetTick>
 8004f32:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f34:	e00a      	b.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f36:	f7fc fb97 	bl	8001668 <HAL_GetTick>
 8004f3a:	4602      	mov	r2, r0
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	1ad3      	subs	r3, r2, r3
 8004f40:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d901      	bls.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8004f48:	2303      	movs	r3, #3
 8004f4a:	e035      	b.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f4c:	4b1d      	ldr	r3, [pc, #116]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004f4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f50:	f003 0302 	and.w	r3, r3, #2
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d0ee      	beq.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f60:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f64:	d10d      	bne.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8004f66:	4b17      	ldr	r3, [pc, #92]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004f68:	689b      	ldr	r3, [r3, #8]
 8004f6a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f72:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004f76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f7a:	4912      	ldr	r1, [pc, #72]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	608b      	str	r3, [r1, #8]
 8004f80:	e005      	b.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8004f82:	4b10      	ldr	r3, [pc, #64]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	4a0f      	ldr	r2, [pc, #60]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004f88:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004f8c:	6093      	str	r3, [r2, #8]
 8004f8e:	4b0d      	ldr	r3, [pc, #52]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004f90:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f9a:	490a      	ldr	r1, [pc, #40]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f003 0310 	and.w	r3, r3, #16
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d004      	beq.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8004fb2:	4b06      	ldr	r3, [pc, #24]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8004fb4:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8004fb6:	2300      	movs	r3, #0
}
 8004fb8:	4618      	mov	r0, r3
 8004fba:	3718      	adds	r7, #24
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bd80      	pop	{r7, pc}
 8004fc0:	40007000 	.word	0x40007000
 8004fc4:	40023800 	.word	0x40023800
 8004fc8:	42470e40 	.word	0x42470e40
 8004fcc:	424711e0 	.word	0x424711e0

08004fd0 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b082      	sub	sp, #8
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
 8004fd8:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d101      	bne.n	8004fe4 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	e025      	b.n	8005030 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004fea:	b2db      	uxtb	r3, r3
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d106      	bne.n	8004ffe <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8004ff8:	6878      	ldr	r0, [r7, #4]
 8004ffa:	f7fc f9c9 	bl	8001390 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2202      	movs	r2, #2
 8005002:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	3304      	adds	r3, #4
 800500e:	4619      	mov	r1, r3
 8005010:	4610      	mov	r0, r2
 8005012:	f000 ffdd 	bl	8005fd0 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6818      	ldr	r0, [r3, #0]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	461a      	mov	r2, r3
 8005020:	6839      	ldr	r1, [r7, #0]
 8005022:	f001 f832 	bl	800608a <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2201      	movs	r2, #1
 800502a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800502e:	2300      	movs	r3, #0
}
 8005030:	4618      	mov	r0, r3
 8005032:	3708      	adds	r7, #8
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}

08005038 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b082      	sub	sp, #8
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d101      	bne.n	800504a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	e07b      	b.n	8005142 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800504e:	2b00      	cmp	r3, #0
 8005050:	d108      	bne.n	8005064 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800505a:	d009      	beq.n	8005070 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2200      	movs	r2, #0
 8005060:	61da      	str	r2, [r3, #28]
 8005062:	e005      	b.n	8005070 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2200      	movs	r2, #0
 8005068:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2200      	movs	r2, #0
 800506e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2200      	movs	r2, #0
 8005074:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800507c:	b2db      	uxtb	r3, r3
 800507e:	2b00      	cmp	r3, #0
 8005080:	d106      	bne.n	8005090 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2200      	movs	r2, #0
 8005086:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	f7fc f83c 	bl	8001108 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2202      	movs	r2, #2
 8005094:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	681a      	ldr	r2, [r3, #0]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050a6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80050b8:	431a      	orrs	r2, r3
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	68db      	ldr	r3, [r3, #12]
 80050be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050c2:	431a      	orrs	r2, r3
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	691b      	ldr	r3, [r3, #16]
 80050c8:	f003 0302 	and.w	r3, r3, #2
 80050cc:	431a      	orrs	r2, r3
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	695b      	ldr	r3, [r3, #20]
 80050d2:	f003 0301 	and.w	r3, r3, #1
 80050d6:	431a      	orrs	r2, r3
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	699b      	ldr	r3, [r3, #24]
 80050dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80050e0:	431a      	orrs	r2, r3
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	69db      	ldr	r3, [r3, #28]
 80050e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80050ea:	431a      	orrs	r2, r3
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6a1b      	ldr	r3, [r3, #32]
 80050f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050f4:	ea42 0103 	orr.w	r1, r2, r3
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050fc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	430a      	orrs	r2, r1
 8005106:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	699b      	ldr	r3, [r3, #24]
 800510c:	0c1b      	lsrs	r3, r3, #16
 800510e:	f003 0104 	and.w	r1, r3, #4
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005116:	f003 0210 	and.w	r2, r3, #16
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	430a      	orrs	r2, r1
 8005120:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	69da      	ldr	r2, [r3, #28]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005130:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2200      	movs	r2, #0
 8005136:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2201      	movs	r2, #1
 800513c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005140:	2300      	movs	r3, #0
}
 8005142:	4618      	mov	r0, r3
 8005144:	3708      	adds	r7, #8
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}

0800514a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800514a:	b580      	push	{r7, lr}
 800514c:	b082      	sub	sp, #8
 800514e:	af00      	add	r7, sp, #0
 8005150:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d101      	bne.n	800515c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005158:	2301      	movs	r3, #1
 800515a:	e041      	b.n	80051e0 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005162:	b2db      	uxtb	r3, r3
 8005164:	2b00      	cmp	r3, #0
 8005166:	d106      	bne.n	8005176 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2200      	movs	r2, #0
 800516c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005170:	6878      	ldr	r0, [r7, #4]
 8005172:	f7fc f811 	bl	8001198 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2202      	movs	r2, #2
 800517a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681a      	ldr	r2, [r3, #0]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	3304      	adds	r3, #4
 8005186:	4619      	mov	r1, r3
 8005188:	4610      	mov	r0, r2
 800518a:	f000 fa95 	bl	80056b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2201      	movs	r2, #1
 8005192:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2201      	movs	r2, #1
 800519a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2201      	movs	r2, #1
 80051a2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2201      	movs	r2, #1
 80051aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2201      	movs	r2, #1
 80051b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2201      	movs	r2, #1
 80051ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2201      	movs	r2, #1
 80051c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2201      	movs	r2, #1
 80051ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2201      	movs	r2, #1
 80051d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2201      	movs	r2, #1
 80051da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80051de:	2300      	movs	r3, #0
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	3708      	adds	r7, #8
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}

080051e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b085      	sub	sp, #20
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051f6:	b2db      	uxtb	r3, r3
 80051f8:	2b01      	cmp	r3, #1
 80051fa:	d001      	beq.n	8005200 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80051fc:	2301      	movs	r3, #1
 80051fe:	e04e      	b.n	800529e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2202      	movs	r2, #2
 8005204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	68da      	ldr	r2, [r3, #12]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f042 0201 	orr.w	r2, r2, #1
 8005216:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a23      	ldr	r2, [pc, #140]	; (80052ac <HAL_TIM_Base_Start_IT+0xc4>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d022      	beq.n	8005268 <HAL_TIM_Base_Start_IT+0x80>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800522a:	d01d      	beq.n	8005268 <HAL_TIM_Base_Start_IT+0x80>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a1f      	ldr	r2, [pc, #124]	; (80052b0 <HAL_TIM_Base_Start_IT+0xc8>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d018      	beq.n	8005268 <HAL_TIM_Base_Start_IT+0x80>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a1e      	ldr	r2, [pc, #120]	; (80052b4 <HAL_TIM_Base_Start_IT+0xcc>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d013      	beq.n	8005268 <HAL_TIM_Base_Start_IT+0x80>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a1c      	ldr	r2, [pc, #112]	; (80052b8 <HAL_TIM_Base_Start_IT+0xd0>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d00e      	beq.n	8005268 <HAL_TIM_Base_Start_IT+0x80>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a1b      	ldr	r2, [pc, #108]	; (80052bc <HAL_TIM_Base_Start_IT+0xd4>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d009      	beq.n	8005268 <HAL_TIM_Base_Start_IT+0x80>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a19      	ldr	r2, [pc, #100]	; (80052c0 <HAL_TIM_Base_Start_IT+0xd8>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d004      	beq.n	8005268 <HAL_TIM_Base_Start_IT+0x80>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a18      	ldr	r2, [pc, #96]	; (80052c4 <HAL_TIM_Base_Start_IT+0xdc>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d111      	bne.n	800528c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	689b      	ldr	r3, [r3, #8]
 800526e:	f003 0307 	and.w	r3, r3, #7
 8005272:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	2b06      	cmp	r3, #6
 8005278:	d010      	beq.n	800529c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	681a      	ldr	r2, [r3, #0]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f042 0201 	orr.w	r2, r2, #1
 8005288:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800528a:	e007      	b.n	800529c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	681a      	ldr	r2, [r3, #0]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f042 0201 	orr.w	r2, r2, #1
 800529a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800529c:	2300      	movs	r3, #0
}
 800529e:	4618      	mov	r0, r3
 80052a0:	3714      	adds	r7, #20
 80052a2:	46bd      	mov	sp, r7
 80052a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a8:	4770      	bx	lr
 80052aa:	bf00      	nop
 80052ac:	40010000 	.word	0x40010000
 80052b0:	40000400 	.word	0x40000400
 80052b4:	40000800 	.word	0x40000800
 80052b8:	40000c00 	.word	0x40000c00
 80052bc:	40010400 	.word	0x40010400
 80052c0:	40014000 	.word	0x40014000
 80052c4:	40001800 	.word	0x40001800

080052c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b082      	sub	sp, #8
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	691b      	ldr	r3, [r3, #16]
 80052d6:	f003 0302 	and.w	r3, r3, #2
 80052da:	2b02      	cmp	r3, #2
 80052dc:	d122      	bne.n	8005324 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	68db      	ldr	r3, [r3, #12]
 80052e4:	f003 0302 	and.w	r3, r3, #2
 80052e8:	2b02      	cmp	r3, #2
 80052ea:	d11b      	bne.n	8005324 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f06f 0202 	mvn.w	r2, #2
 80052f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2201      	movs	r2, #1
 80052fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	699b      	ldr	r3, [r3, #24]
 8005302:	f003 0303 	and.w	r3, r3, #3
 8005306:	2b00      	cmp	r3, #0
 8005308:	d003      	beq.n	8005312 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f000 f9b5 	bl	800567a <HAL_TIM_IC_CaptureCallback>
 8005310:	e005      	b.n	800531e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f000 f9a7 	bl	8005666 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005318:	6878      	ldr	r0, [r7, #4]
 800531a:	f000 f9b8 	bl	800568e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2200      	movs	r2, #0
 8005322:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	691b      	ldr	r3, [r3, #16]
 800532a:	f003 0304 	and.w	r3, r3, #4
 800532e:	2b04      	cmp	r3, #4
 8005330:	d122      	bne.n	8005378 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	68db      	ldr	r3, [r3, #12]
 8005338:	f003 0304 	and.w	r3, r3, #4
 800533c:	2b04      	cmp	r3, #4
 800533e:	d11b      	bne.n	8005378 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f06f 0204 	mvn.w	r2, #4
 8005348:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2202      	movs	r2, #2
 800534e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	699b      	ldr	r3, [r3, #24]
 8005356:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800535a:	2b00      	cmp	r3, #0
 800535c:	d003      	beq.n	8005366 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f000 f98b 	bl	800567a <HAL_TIM_IC_CaptureCallback>
 8005364:	e005      	b.n	8005372 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f000 f97d 	bl	8005666 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800536c:	6878      	ldr	r0, [r7, #4]
 800536e:	f000 f98e 	bl	800568e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2200      	movs	r2, #0
 8005376:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	691b      	ldr	r3, [r3, #16]
 800537e:	f003 0308 	and.w	r3, r3, #8
 8005382:	2b08      	cmp	r3, #8
 8005384:	d122      	bne.n	80053cc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	68db      	ldr	r3, [r3, #12]
 800538c:	f003 0308 	and.w	r3, r3, #8
 8005390:	2b08      	cmp	r3, #8
 8005392:	d11b      	bne.n	80053cc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f06f 0208 	mvn.w	r2, #8
 800539c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2204      	movs	r2, #4
 80053a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	69db      	ldr	r3, [r3, #28]
 80053aa:	f003 0303 	and.w	r3, r3, #3
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d003      	beq.n	80053ba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f000 f961 	bl	800567a <HAL_TIM_IC_CaptureCallback>
 80053b8:	e005      	b.n	80053c6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	f000 f953 	bl	8005666 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053c0:	6878      	ldr	r0, [r7, #4]
 80053c2:	f000 f964 	bl	800568e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2200      	movs	r2, #0
 80053ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	691b      	ldr	r3, [r3, #16]
 80053d2:	f003 0310 	and.w	r3, r3, #16
 80053d6:	2b10      	cmp	r3, #16
 80053d8:	d122      	bne.n	8005420 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	68db      	ldr	r3, [r3, #12]
 80053e0:	f003 0310 	and.w	r3, r3, #16
 80053e4:	2b10      	cmp	r3, #16
 80053e6:	d11b      	bne.n	8005420 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f06f 0210 	mvn.w	r2, #16
 80053f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2208      	movs	r2, #8
 80053f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	69db      	ldr	r3, [r3, #28]
 80053fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005402:	2b00      	cmp	r3, #0
 8005404:	d003      	beq.n	800540e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f000 f937 	bl	800567a <HAL_TIM_IC_CaptureCallback>
 800540c:	e005      	b.n	800541a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f000 f929 	bl	8005666 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	f000 f93a 	bl	800568e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2200      	movs	r2, #0
 800541e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	691b      	ldr	r3, [r3, #16]
 8005426:	f003 0301 	and.w	r3, r3, #1
 800542a:	2b01      	cmp	r3, #1
 800542c:	d10e      	bne.n	800544c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	68db      	ldr	r3, [r3, #12]
 8005434:	f003 0301 	and.w	r3, r3, #1
 8005438:	2b01      	cmp	r3, #1
 800543a:	d107      	bne.n	800544c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f06f 0201 	mvn.w	r2, #1
 8005444:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005446:	6878      	ldr	r0, [r7, #4]
 8005448:	f7fb fc36 	bl	8000cb8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	691b      	ldr	r3, [r3, #16]
 8005452:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005456:	2b80      	cmp	r3, #128	; 0x80
 8005458:	d10e      	bne.n	8005478 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	68db      	ldr	r3, [r3, #12]
 8005460:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005464:	2b80      	cmp	r3, #128	; 0x80
 8005466:	d107      	bne.n	8005478 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005470:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f000 fae0 	bl	8005a38 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	691b      	ldr	r3, [r3, #16]
 800547e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005482:	2b40      	cmp	r3, #64	; 0x40
 8005484:	d10e      	bne.n	80054a4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	68db      	ldr	r3, [r3, #12]
 800548c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005490:	2b40      	cmp	r3, #64	; 0x40
 8005492:	d107      	bne.n	80054a4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800549c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f000 f8ff 	bl	80056a2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	691b      	ldr	r3, [r3, #16]
 80054aa:	f003 0320 	and.w	r3, r3, #32
 80054ae:	2b20      	cmp	r3, #32
 80054b0:	d10e      	bne.n	80054d0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	68db      	ldr	r3, [r3, #12]
 80054b8:	f003 0320 	and.w	r3, r3, #32
 80054bc:	2b20      	cmp	r3, #32
 80054be:	d107      	bne.n	80054d0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f06f 0220 	mvn.w	r2, #32
 80054c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f000 faaa 	bl	8005a24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80054d0:	bf00      	nop
 80054d2:	3708      	adds	r7, #8
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bd80      	pop	{r7, pc}

080054d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b084      	sub	sp, #16
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
 80054e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80054e2:	2300      	movs	r3, #0
 80054e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054ec:	2b01      	cmp	r3, #1
 80054ee:	d101      	bne.n	80054f4 <HAL_TIM_ConfigClockSource+0x1c>
 80054f0:	2302      	movs	r3, #2
 80054f2:	e0b4      	b.n	800565e <HAL_TIM_ConfigClockSource+0x186>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2201      	movs	r2, #1
 80054f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2202      	movs	r2, #2
 8005500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	689b      	ldr	r3, [r3, #8]
 800550a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005512:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800551a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	68ba      	ldr	r2, [r7, #8]
 8005522:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800552c:	d03e      	beq.n	80055ac <HAL_TIM_ConfigClockSource+0xd4>
 800552e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005532:	f200 8087 	bhi.w	8005644 <HAL_TIM_ConfigClockSource+0x16c>
 8005536:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800553a:	f000 8086 	beq.w	800564a <HAL_TIM_ConfigClockSource+0x172>
 800553e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005542:	d87f      	bhi.n	8005644 <HAL_TIM_ConfigClockSource+0x16c>
 8005544:	2b70      	cmp	r3, #112	; 0x70
 8005546:	d01a      	beq.n	800557e <HAL_TIM_ConfigClockSource+0xa6>
 8005548:	2b70      	cmp	r3, #112	; 0x70
 800554a:	d87b      	bhi.n	8005644 <HAL_TIM_ConfigClockSource+0x16c>
 800554c:	2b60      	cmp	r3, #96	; 0x60
 800554e:	d050      	beq.n	80055f2 <HAL_TIM_ConfigClockSource+0x11a>
 8005550:	2b60      	cmp	r3, #96	; 0x60
 8005552:	d877      	bhi.n	8005644 <HAL_TIM_ConfigClockSource+0x16c>
 8005554:	2b50      	cmp	r3, #80	; 0x50
 8005556:	d03c      	beq.n	80055d2 <HAL_TIM_ConfigClockSource+0xfa>
 8005558:	2b50      	cmp	r3, #80	; 0x50
 800555a:	d873      	bhi.n	8005644 <HAL_TIM_ConfigClockSource+0x16c>
 800555c:	2b40      	cmp	r3, #64	; 0x40
 800555e:	d058      	beq.n	8005612 <HAL_TIM_ConfigClockSource+0x13a>
 8005560:	2b40      	cmp	r3, #64	; 0x40
 8005562:	d86f      	bhi.n	8005644 <HAL_TIM_ConfigClockSource+0x16c>
 8005564:	2b30      	cmp	r3, #48	; 0x30
 8005566:	d064      	beq.n	8005632 <HAL_TIM_ConfigClockSource+0x15a>
 8005568:	2b30      	cmp	r3, #48	; 0x30
 800556a:	d86b      	bhi.n	8005644 <HAL_TIM_ConfigClockSource+0x16c>
 800556c:	2b20      	cmp	r3, #32
 800556e:	d060      	beq.n	8005632 <HAL_TIM_ConfigClockSource+0x15a>
 8005570:	2b20      	cmp	r3, #32
 8005572:	d867      	bhi.n	8005644 <HAL_TIM_ConfigClockSource+0x16c>
 8005574:	2b00      	cmp	r3, #0
 8005576:	d05c      	beq.n	8005632 <HAL_TIM_ConfigClockSource+0x15a>
 8005578:	2b10      	cmp	r3, #16
 800557a:	d05a      	beq.n	8005632 <HAL_TIM_ConfigClockSource+0x15a>
 800557c:	e062      	b.n	8005644 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6818      	ldr	r0, [r3, #0]
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	6899      	ldr	r1, [r3, #8]
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	685a      	ldr	r2, [r3, #4]
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	68db      	ldr	r3, [r3, #12]
 800558e:	f000 f9ad 	bl	80058ec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	689b      	ldr	r3, [r3, #8]
 8005598:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80055a0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	68ba      	ldr	r2, [r7, #8]
 80055a8:	609a      	str	r2, [r3, #8]
      break;
 80055aa:	e04f      	b.n	800564c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6818      	ldr	r0, [r3, #0]
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	6899      	ldr	r1, [r3, #8]
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	685a      	ldr	r2, [r3, #4]
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	68db      	ldr	r3, [r3, #12]
 80055bc:	f000 f996 	bl	80058ec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	689a      	ldr	r2, [r3, #8]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80055ce:	609a      	str	r2, [r3, #8]
      break;
 80055d0:	e03c      	b.n	800564c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6818      	ldr	r0, [r3, #0]
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	6859      	ldr	r1, [r3, #4]
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	68db      	ldr	r3, [r3, #12]
 80055de:	461a      	mov	r2, r3
 80055e0:	f000 f90a 	bl	80057f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	2150      	movs	r1, #80	; 0x50
 80055ea:	4618      	mov	r0, r3
 80055ec:	f000 f963 	bl	80058b6 <TIM_ITRx_SetConfig>
      break;
 80055f0:	e02c      	b.n	800564c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6818      	ldr	r0, [r3, #0]
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	6859      	ldr	r1, [r3, #4]
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	68db      	ldr	r3, [r3, #12]
 80055fe:	461a      	mov	r2, r3
 8005600:	f000 f929 	bl	8005856 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	2160      	movs	r1, #96	; 0x60
 800560a:	4618      	mov	r0, r3
 800560c:	f000 f953 	bl	80058b6 <TIM_ITRx_SetConfig>
      break;
 8005610:	e01c      	b.n	800564c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6818      	ldr	r0, [r3, #0]
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	6859      	ldr	r1, [r3, #4]
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	68db      	ldr	r3, [r3, #12]
 800561e:	461a      	mov	r2, r3
 8005620:	f000 f8ea 	bl	80057f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	2140      	movs	r1, #64	; 0x40
 800562a:	4618      	mov	r0, r3
 800562c:	f000 f943 	bl	80058b6 <TIM_ITRx_SetConfig>
      break;
 8005630:	e00c      	b.n	800564c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681a      	ldr	r2, [r3, #0]
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4619      	mov	r1, r3
 800563c:	4610      	mov	r0, r2
 800563e:	f000 f93a 	bl	80058b6 <TIM_ITRx_SetConfig>
      break;
 8005642:	e003      	b.n	800564c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005644:	2301      	movs	r3, #1
 8005646:	73fb      	strb	r3, [r7, #15]
      break;
 8005648:	e000      	b.n	800564c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800564a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2201      	movs	r2, #1
 8005650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2200      	movs	r2, #0
 8005658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800565c:	7bfb      	ldrb	r3, [r7, #15]
}
 800565e:	4618      	mov	r0, r3
 8005660:	3710      	adds	r7, #16
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}

08005666 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005666:	b480      	push	{r7}
 8005668:	b083      	sub	sp, #12
 800566a:	af00      	add	r7, sp, #0
 800566c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800566e:	bf00      	nop
 8005670:	370c      	adds	r7, #12
 8005672:	46bd      	mov	sp, r7
 8005674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005678:	4770      	bx	lr

0800567a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800567a:	b480      	push	{r7}
 800567c:	b083      	sub	sp, #12
 800567e:	af00      	add	r7, sp, #0
 8005680:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005682:	bf00      	nop
 8005684:	370c      	adds	r7, #12
 8005686:	46bd      	mov	sp, r7
 8005688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568c:	4770      	bx	lr

0800568e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800568e:	b480      	push	{r7}
 8005690:	b083      	sub	sp, #12
 8005692:	af00      	add	r7, sp, #0
 8005694:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005696:	bf00      	nop
 8005698:	370c      	adds	r7, #12
 800569a:	46bd      	mov	sp, r7
 800569c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a0:	4770      	bx	lr

080056a2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80056a2:	b480      	push	{r7}
 80056a4:	b083      	sub	sp, #12
 80056a6:	af00      	add	r7, sp, #0
 80056a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80056aa:	bf00      	nop
 80056ac:	370c      	adds	r7, #12
 80056ae:	46bd      	mov	sp, r7
 80056b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b4:	4770      	bx	lr
	...

080056b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b085      	sub	sp, #20
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
 80056c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	4a40      	ldr	r2, [pc, #256]	; (80057cc <TIM_Base_SetConfig+0x114>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d013      	beq.n	80056f8 <TIM_Base_SetConfig+0x40>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056d6:	d00f      	beq.n	80056f8 <TIM_Base_SetConfig+0x40>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	4a3d      	ldr	r2, [pc, #244]	; (80057d0 <TIM_Base_SetConfig+0x118>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d00b      	beq.n	80056f8 <TIM_Base_SetConfig+0x40>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	4a3c      	ldr	r2, [pc, #240]	; (80057d4 <TIM_Base_SetConfig+0x11c>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d007      	beq.n	80056f8 <TIM_Base_SetConfig+0x40>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	4a3b      	ldr	r2, [pc, #236]	; (80057d8 <TIM_Base_SetConfig+0x120>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d003      	beq.n	80056f8 <TIM_Base_SetConfig+0x40>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	4a3a      	ldr	r2, [pc, #232]	; (80057dc <TIM_Base_SetConfig+0x124>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d108      	bne.n	800570a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	685b      	ldr	r3, [r3, #4]
 8005704:	68fa      	ldr	r2, [r7, #12]
 8005706:	4313      	orrs	r3, r2
 8005708:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	4a2f      	ldr	r2, [pc, #188]	; (80057cc <TIM_Base_SetConfig+0x114>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d02b      	beq.n	800576a <TIM_Base_SetConfig+0xb2>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005718:	d027      	beq.n	800576a <TIM_Base_SetConfig+0xb2>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	4a2c      	ldr	r2, [pc, #176]	; (80057d0 <TIM_Base_SetConfig+0x118>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d023      	beq.n	800576a <TIM_Base_SetConfig+0xb2>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	4a2b      	ldr	r2, [pc, #172]	; (80057d4 <TIM_Base_SetConfig+0x11c>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d01f      	beq.n	800576a <TIM_Base_SetConfig+0xb2>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	4a2a      	ldr	r2, [pc, #168]	; (80057d8 <TIM_Base_SetConfig+0x120>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d01b      	beq.n	800576a <TIM_Base_SetConfig+0xb2>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	4a29      	ldr	r2, [pc, #164]	; (80057dc <TIM_Base_SetConfig+0x124>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d017      	beq.n	800576a <TIM_Base_SetConfig+0xb2>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	4a28      	ldr	r2, [pc, #160]	; (80057e0 <TIM_Base_SetConfig+0x128>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d013      	beq.n	800576a <TIM_Base_SetConfig+0xb2>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	4a27      	ldr	r2, [pc, #156]	; (80057e4 <TIM_Base_SetConfig+0x12c>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d00f      	beq.n	800576a <TIM_Base_SetConfig+0xb2>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	4a26      	ldr	r2, [pc, #152]	; (80057e8 <TIM_Base_SetConfig+0x130>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d00b      	beq.n	800576a <TIM_Base_SetConfig+0xb2>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	4a25      	ldr	r2, [pc, #148]	; (80057ec <TIM_Base_SetConfig+0x134>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d007      	beq.n	800576a <TIM_Base_SetConfig+0xb2>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	4a24      	ldr	r2, [pc, #144]	; (80057f0 <TIM_Base_SetConfig+0x138>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d003      	beq.n	800576a <TIM_Base_SetConfig+0xb2>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	4a23      	ldr	r2, [pc, #140]	; (80057f4 <TIM_Base_SetConfig+0x13c>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d108      	bne.n	800577c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005770:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	68db      	ldr	r3, [r3, #12]
 8005776:	68fa      	ldr	r2, [r7, #12]
 8005778:	4313      	orrs	r3, r2
 800577a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	695b      	ldr	r3, [r3, #20]
 8005786:	4313      	orrs	r3, r2
 8005788:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	68fa      	ldr	r2, [r7, #12]
 800578e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	689a      	ldr	r2, [r3, #8]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	681a      	ldr	r2, [r3, #0]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	4a0a      	ldr	r2, [pc, #40]	; (80057cc <TIM_Base_SetConfig+0x114>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d003      	beq.n	80057b0 <TIM_Base_SetConfig+0xf8>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	4a0c      	ldr	r2, [pc, #48]	; (80057dc <TIM_Base_SetConfig+0x124>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d103      	bne.n	80057b8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	691a      	ldr	r2, [r3, #16]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2201      	movs	r2, #1
 80057bc:	615a      	str	r2, [r3, #20]
}
 80057be:	bf00      	nop
 80057c0:	3714      	adds	r7, #20
 80057c2:	46bd      	mov	sp, r7
 80057c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c8:	4770      	bx	lr
 80057ca:	bf00      	nop
 80057cc:	40010000 	.word	0x40010000
 80057d0:	40000400 	.word	0x40000400
 80057d4:	40000800 	.word	0x40000800
 80057d8:	40000c00 	.word	0x40000c00
 80057dc:	40010400 	.word	0x40010400
 80057e0:	40014000 	.word	0x40014000
 80057e4:	40014400 	.word	0x40014400
 80057e8:	40014800 	.word	0x40014800
 80057ec:	40001800 	.word	0x40001800
 80057f0:	40001c00 	.word	0x40001c00
 80057f4:	40002000 	.word	0x40002000

080057f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b087      	sub	sp, #28
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	60f8      	str	r0, [r7, #12]
 8005800:	60b9      	str	r1, [r7, #8]
 8005802:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	6a1b      	ldr	r3, [r3, #32]
 8005808:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	6a1b      	ldr	r3, [r3, #32]
 800580e:	f023 0201 	bic.w	r2, r3, #1
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	699b      	ldr	r3, [r3, #24]
 800581a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005822:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	011b      	lsls	r3, r3, #4
 8005828:	693a      	ldr	r2, [r7, #16]
 800582a:	4313      	orrs	r3, r2
 800582c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	f023 030a 	bic.w	r3, r3, #10
 8005834:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005836:	697a      	ldr	r2, [r7, #20]
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	4313      	orrs	r3, r2
 800583c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	693a      	ldr	r2, [r7, #16]
 8005842:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	697a      	ldr	r2, [r7, #20]
 8005848:	621a      	str	r2, [r3, #32]
}
 800584a:	bf00      	nop
 800584c:	371c      	adds	r7, #28
 800584e:	46bd      	mov	sp, r7
 8005850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005854:	4770      	bx	lr

08005856 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005856:	b480      	push	{r7}
 8005858:	b087      	sub	sp, #28
 800585a:	af00      	add	r7, sp, #0
 800585c:	60f8      	str	r0, [r7, #12]
 800585e:	60b9      	str	r1, [r7, #8]
 8005860:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	6a1b      	ldr	r3, [r3, #32]
 8005866:	f023 0210 	bic.w	r2, r3, #16
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	699b      	ldr	r3, [r3, #24]
 8005872:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	6a1b      	ldr	r3, [r3, #32]
 8005878:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005880:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	031b      	lsls	r3, r3, #12
 8005886:	697a      	ldr	r2, [r7, #20]
 8005888:	4313      	orrs	r3, r2
 800588a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800588c:	693b      	ldr	r3, [r7, #16]
 800588e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005892:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	011b      	lsls	r3, r3, #4
 8005898:	693a      	ldr	r2, [r7, #16]
 800589a:	4313      	orrs	r3, r2
 800589c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	697a      	ldr	r2, [r7, #20]
 80058a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	693a      	ldr	r2, [r7, #16]
 80058a8:	621a      	str	r2, [r3, #32]
}
 80058aa:	bf00      	nop
 80058ac:	371c      	adds	r7, #28
 80058ae:	46bd      	mov	sp, r7
 80058b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b4:	4770      	bx	lr

080058b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80058b6:	b480      	push	{r7}
 80058b8:	b085      	sub	sp, #20
 80058ba:	af00      	add	r7, sp, #0
 80058bc:	6078      	str	r0, [r7, #4]
 80058be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	689b      	ldr	r3, [r3, #8]
 80058c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80058ce:	683a      	ldr	r2, [r7, #0]
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	4313      	orrs	r3, r2
 80058d4:	f043 0307 	orr.w	r3, r3, #7
 80058d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	68fa      	ldr	r2, [r7, #12]
 80058de:	609a      	str	r2, [r3, #8]
}
 80058e0:	bf00      	nop
 80058e2:	3714      	adds	r7, #20
 80058e4:	46bd      	mov	sp, r7
 80058e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ea:	4770      	bx	lr

080058ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80058ec:	b480      	push	{r7}
 80058ee:	b087      	sub	sp, #28
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	60f8      	str	r0, [r7, #12]
 80058f4:	60b9      	str	r1, [r7, #8]
 80058f6:	607a      	str	r2, [r7, #4]
 80058f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	689b      	ldr	r3, [r3, #8]
 80058fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005906:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	021a      	lsls	r2, r3, #8
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	431a      	orrs	r2, r3
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	4313      	orrs	r3, r2
 8005914:	697a      	ldr	r2, [r7, #20]
 8005916:	4313      	orrs	r3, r2
 8005918:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	697a      	ldr	r2, [r7, #20]
 800591e:	609a      	str	r2, [r3, #8]
}
 8005920:	bf00      	nop
 8005922:	371c      	adds	r7, #28
 8005924:	46bd      	mov	sp, r7
 8005926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592a:	4770      	bx	lr

0800592c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800592c:	b480      	push	{r7}
 800592e:	b085      	sub	sp, #20
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
 8005934:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800593c:	2b01      	cmp	r3, #1
 800593e:	d101      	bne.n	8005944 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005940:	2302      	movs	r3, #2
 8005942:	e05a      	b.n	80059fa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2201      	movs	r2, #1
 8005948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2202      	movs	r2, #2
 8005950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	689b      	ldr	r3, [r3, #8]
 8005962:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800596a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	68fa      	ldr	r2, [r7, #12]
 8005972:	4313      	orrs	r3, r2
 8005974:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	68fa      	ldr	r2, [r7, #12]
 800597c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a21      	ldr	r2, [pc, #132]	; (8005a08 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d022      	beq.n	80059ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005990:	d01d      	beq.n	80059ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a1d      	ldr	r2, [pc, #116]	; (8005a0c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d018      	beq.n	80059ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a1b      	ldr	r2, [pc, #108]	; (8005a10 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d013      	beq.n	80059ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a1a      	ldr	r2, [pc, #104]	; (8005a14 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d00e      	beq.n	80059ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a18      	ldr	r2, [pc, #96]	; (8005a18 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d009      	beq.n	80059ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4a17      	ldr	r2, [pc, #92]	; (8005a1c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d004      	beq.n	80059ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a15      	ldr	r2, [pc, #84]	; (8005a20 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d10c      	bne.n	80059e8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	68ba      	ldr	r2, [r7, #8]
 80059dc:	4313      	orrs	r3, r2
 80059de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	68ba      	ldr	r2, [r7, #8]
 80059e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2201      	movs	r2, #1
 80059ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2200      	movs	r2, #0
 80059f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80059f8:	2300      	movs	r3, #0
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	3714      	adds	r7, #20
 80059fe:	46bd      	mov	sp, r7
 8005a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a04:	4770      	bx	lr
 8005a06:	bf00      	nop
 8005a08:	40010000 	.word	0x40010000
 8005a0c:	40000400 	.word	0x40000400
 8005a10:	40000800 	.word	0x40000800
 8005a14:	40000c00 	.word	0x40000c00
 8005a18:	40010400 	.word	0x40010400
 8005a1c:	40014000 	.word	0x40014000
 8005a20:	40001800 	.word	0x40001800

08005a24 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005a24:	b480      	push	{r7}
 8005a26:	b083      	sub	sp, #12
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005a2c:	bf00      	nop
 8005a2e:	370c      	adds	r7, #12
 8005a30:	46bd      	mov	sp, r7
 8005a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a36:	4770      	bx	lr

08005a38 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b083      	sub	sp, #12
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a40:	bf00      	nop
 8005a42:	370c      	adds	r7, #12
 8005a44:	46bd      	mov	sp, r7
 8005a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4a:	4770      	bx	lr

08005a4c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b082      	sub	sp, #8
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d101      	bne.n	8005a5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	e03f      	b.n	8005ade <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a64:	b2db      	uxtb	r3, r3
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d106      	bne.n	8005a78 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	f7fb fbb2 	bl	80011dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2224      	movs	r2, #36	; 0x24
 8005a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	68da      	ldr	r2, [r3, #12]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005a8e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005a90:	6878      	ldr	r0, [r7, #4]
 8005a92:	f000 f829 	bl	8005ae8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	691a      	ldr	r2, [r3, #16]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005aa4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	695a      	ldr	r2, [r3, #20]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005ab4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	68da      	ldr	r2, [r3, #12]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005ac4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2220      	movs	r2, #32
 8005ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2220      	movs	r2, #32
 8005ad8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005adc:	2300      	movs	r3, #0
}
 8005ade:	4618      	mov	r0, r3
 8005ae0:	3708      	adds	r7, #8
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd80      	pop	{r7, pc}
	...

08005ae8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ae8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005aec:	b0c0      	sub	sp, #256	; 0x100
 8005aee:	af00      	add	r7, sp, #0
 8005af0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005af4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	691b      	ldr	r3, [r3, #16]
 8005afc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005b00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b04:	68d9      	ldr	r1, [r3, #12]
 8005b06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b0a:	681a      	ldr	r2, [r3, #0]
 8005b0c:	ea40 0301 	orr.w	r3, r0, r1
 8005b10:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005b12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b16:	689a      	ldr	r2, [r3, #8]
 8005b18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b1c:	691b      	ldr	r3, [r3, #16]
 8005b1e:	431a      	orrs	r2, r3
 8005b20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b24:	695b      	ldr	r3, [r3, #20]
 8005b26:	431a      	orrs	r2, r3
 8005b28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b2c:	69db      	ldr	r3, [r3, #28]
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	68db      	ldr	r3, [r3, #12]
 8005b3c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005b40:	f021 010c 	bic.w	r1, r1, #12
 8005b44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b48:	681a      	ldr	r2, [r3, #0]
 8005b4a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005b4e:	430b      	orrs	r3, r1
 8005b50:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005b52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	695b      	ldr	r3, [r3, #20]
 8005b5a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005b5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b62:	6999      	ldr	r1, [r3, #24]
 8005b64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b68:	681a      	ldr	r2, [r3, #0]
 8005b6a:	ea40 0301 	orr.w	r3, r0, r1
 8005b6e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005b70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b74:	681a      	ldr	r2, [r3, #0]
 8005b76:	4b8f      	ldr	r3, [pc, #572]	; (8005db4 <UART_SetConfig+0x2cc>)
 8005b78:	429a      	cmp	r2, r3
 8005b7a:	d005      	beq.n	8005b88 <UART_SetConfig+0xa0>
 8005b7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b80:	681a      	ldr	r2, [r3, #0]
 8005b82:	4b8d      	ldr	r3, [pc, #564]	; (8005db8 <UART_SetConfig+0x2d0>)
 8005b84:	429a      	cmp	r2, r3
 8005b86:	d104      	bne.n	8005b92 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005b88:	f7ff f81c 	bl	8004bc4 <HAL_RCC_GetPCLK2Freq>
 8005b8c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005b90:	e003      	b.n	8005b9a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005b92:	f7ff f803 	bl	8004b9c <HAL_RCC_GetPCLK1Freq>
 8005b96:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b9e:	69db      	ldr	r3, [r3, #28]
 8005ba0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ba4:	f040 810c 	bne.w	8005dc0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005ba8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005bac:	2200      	movs	r2, #0
 8005bae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005bb2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005bb6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005bba:	4622      	mov	r2, r4
 8005bbc:	462b      	mov	r3, r5
 8005bbe:	1891      	adds	r1, r2, r2
 8005bc0:	65b9      	str	r1, [r7, #88]	; 0x58
 8005bc2:	415b      	adcs	r3, r3
 8005bc4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005bc6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005bca:	4621      	mov	r1, r4
 8005bcc:	eb12 0801 	adds.w	r8, r2, r1
 8005bd0:	4629      	mov	r1, r5
 8005bd2:	eb43 0901 	adc.w	r9, r3, r1
 8005bd6:	f04f 0200 	mov.w	r2, #0
 8005bda:	f04f 0300 	mov.w	r3, #0
 8005bde:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005be2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005be6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005bea:	4690      	mov	r8, r2
 8005bec:	4699      	mov	r9, r3
 8005bee:	4623      	mov	r3, r4
 8005bf0:	eb18 0303 	adds.w	r3, r8, r3
 8005bf4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005bf8:	462b      	mov	r3, r5
 8005bfa:	eb49 0303 	adc.w	r3, r9, r3
 8005bfe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005c02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c06:	685b      	ldr	r3, [r3, #4]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005c0e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005c12:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005c16:	460b      	mov	r3, r1
 8005c18:	18db      	adds	r3, r3, r3
 8005c1a:	653b      	str	r3, [r7, #80]	; 0x50
 8005c1c:	4613      	mov	r3, r2
 8005c1e:	eb42 0303 	adc.w	r3, r2, r3
 8005c22:	657b      	str	r3, [r7, #84]	; 0x54
 8005c24:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005c28:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005c2c:	f7fa fae0 	bl	80001f0 <__aeabi_uldivmod>
 8005c30:	4602      	mov	r2, r0
 8005c32:	460b      	mov	r3, r1
 8005c34:	4b61      	ldr	r3, [pc, #388]	; (8005dbc <UART_SetConfig+0x2d4>)
 8005c36:	fba3 2302 	umull	r2, r3, r3, r2
 8005c3a:	095b      	lsrs	r3, r3, #5
 8005c3c:	011c      	lsls	r4, r3, #4
 8005c3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c42:	2200      	movs	r2, #0
 8005c44:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005c48:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005c4c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005c50:	4642      	mov	r2, r8
 8005c52:	464b      	mov	r3, r9
 8005c54:	1891      	adds	r1, r2, r2
 8005c56:	64b9      	str	r1, [r7, #72]	; 0x48
 8005c58:	415b      	adcs	r3, r3
 8005c5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c5c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005c60:	4641      	mov	r1, r8
 8005c62:	eb12 0a01 	adds.w	sl, r2, r1
 8005c66:	4649      	mov	r1, r9
 8005c68:	eb43 0b01 	adc.w	fp, r3, r1
 8005c6c:	f04f 0200 	mov.w	r2, #0
 8005c70:	f04f 0300 	mov.w	r3, #0
 8005c74:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005c78:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005c7c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005c80:	4692      	mov	sl, r2
 8005c82:	469b      	mov	fp, r3
 8005c84:	4643      	mov	r3, r8
 8005c86:	eb1a 0303 	adds.w	r3, sl, r3
 8005c8a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005c8e:	464b      	mov	r3, r9
 8005c90:	eb4b 0303 	adc.w	r3, fp, r3
 8005c94:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005c98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c9c:	685b      	ldr	r3, [r3, #4]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005ca4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005ca8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005cac:	460b      	mov	r3, r1
 8005cae:	18db      	adds	r3, r3, r3
 8005cb0:	643b      	str	r3, [r7, #64]	; 0x40
 8005cb2:	4613      	mov	r3, r2
 8005cb4:	eb42 0303 	adc.w	r3, r2, r3
 8005cb8:	647b      	str	r3, [r7, #68]	; 0x44
 8005cba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005cbe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005cc2:	f7fa fa95 	bl	80001f0 <__aeabi_uldivmod>
 8005cc6:	4602      	mov	r2, r0
 8005cc8:	460b      	mov	r3, r1
 8005cca:	4611      	mov	r1, r2
 8005ccc:	4b3b      	ldr	r3, [pc, #236]	; (8005dbc <UART_SetConfig+0x2d4>)
 8005cce:	fba3 2301 	umull	r2, r3, r3, r1
 8005cd2:	095b      	lsrs	r3, r3, #5
 8005cd4:	2264      	movs	r2, #100	; 0x64
 8005cd6:	fb02 f303 	mul.w	r3, r2, r3
 8005cda:	1acb      	subs	r3, r1, r3
 8005cdc:	00db      	lsls	r3, r3, #3
 8005cde:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005ce2:	4b36      	ldr	r3, [pc, #216]	; (8005dbc <UART_SetConfig+0x2d4>)
 8005ce4:	fba3 2302 	umull	r2, r3, r3, r2
 8005ce8:	095b      	lsrs	r3, r3, #5
 8005cea:	005b      	lsls	r3, r3, #1
 8005cec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005cf0:	441c      	add	r4, r3
 8005cf2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005cfc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005d00:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005d04:	4642      	mov	r2, r8
 8005d06:	464b      	mov	r3, r9
 8005d08:	1891      	adds	r1, r2, r2
 8005d0a:	63b9      	str	r1, [r7, #56]	; 0x38
 8005d0c:	415b      	adcs	r3, r3
 8005d0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d10:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005d14:	4641      	mov	r1, r8
 8005d16:	1851      	adds	r1, r2, r1
 8005d18:	6339      	str	r1, [r7, #48]	; 0x30
 8005d1a:	4649      	mov	r1, r9
 8005d1c:	414b      	adcs	r3, r1
 8005d1e:	637b      	str	r3, [r7, #52]	; 0x34
 8005d20:	f04f 0200 	mov.w	r2, #0
 8005d24:	f04f 0300 	mov.w	r3, #0
 8005d28:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005d2c:	4659      	mov	r1, fp
 8005d2e:	00cb      	lsls	r3, r1, #3
 8005d30:	4651      	mov	r1, sl
 8005d32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d36:	4651      	mov	r1, sl
 8005d38:	00ca      	lsls	r2, r1, #3
 8005d3a:	4610      	mov	r0, r2
 8005d3c:	4619      	mov	r1, r3
 8005d3e:	4603      	mov	r3, r0
 8005d40:	4642      	mov	r2, r8
 8005d42:	189b      	adds	r3, r3, r2
 8005d44:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005d48:	464b      	mov	r3, r9
 8005d4a:	460a      	mov	r2, r1
 8005d4c:	eb42 0303 	adc.w	r3, r2, r3
 8005d50:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005d54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d58:	685b      	ldr	r3, [r3, #4]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005d60:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005d64:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005d68:	460b      	mov	r3, r1
 8005d6a:	18db      	adds	r3, r3, r3
 8005d6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d6e:	4613      	mov	r3, r2
 8005d70:	eb42 0303 	adc.w	r3, r2, r3
 8005d74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d76:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005d7a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005d7e:	f7fa fa37 	bl	80001f0 <__aeabi_uldivmod>
 8005d82:	4602      	mov	r2, r0
 8005d84:	460b      	mov	r3, r1
 8005d86:	4b0d      	ldr	r3, [pc, #52]	; (8005dbc <UART_SetConfig+0x2d4>)
 8005d88:	fba3 1302 	umull	r1, r3, r3, r2
 8005d8c:	095b      	lsrs	r3, r3, #5
 8005d8e:	2164      	movs	r1, #100	; 0x64
 8005d90:	fb01 f303 	mul.w	r3, r1, r3
 8005d94:	1ad3      	subs	r3, r2, r3
 8005d96:	00db      	lsls	r3, r3, #3
 8005d98:	3332      	adds	r3, #50	; 0x32
 8005d9a:	4a08      	ldr	r2, [pc, #32]	; (8005dbc <UART_SetConfig+0x2d4>)
 8005d9c:	fba2 2303 	umull	r2, r3, r2, r3
 8005da0:	095b      	lsrs	r3, r3, #5
 8005da2:	f003 0207 	and.w	r2, r3, #7
 8005da6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4422      	add	r2, r4
 8005dae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005db0:	e105      	b.n	8005fbe <UART_SetConfig+0x4d6>
 8005db2:	bf00      	nop
 8005db4:	40011000 	.word	0x40011000
 8005db8:	40011400 	.word	0x40011400
 8005dbc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005dc0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005dca:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005dce:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005dd2:	4642      	mov	r2, r8
 8005dd4:	464b      	mov	r3, r9
 8005dd6:	1891      	adds	r1, r2, r2
 8005dd8:	6239      	str	r1, [r7, #32]
 8005dda:	415b      	adcs	r3, r3
 8005ddc:	627b      	str	r3, [r7, #36]	; 0x24
 8005dde:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005de2:	4641      	mov	r1, r8
 8005de4:	1854      	adds	r4, r2, r1
 8005de6:	4649      	mov	r1, r9
 8005de8:	eb43 0501 	adc.w	r5, r3, r1
 8005dec:	f04f 0200 	mov.w	r2, #0
 8005df0:	f04f 0300 	mov.w	r3, #0
 8005df4:	00eb      	lsls	r3, r5, #3
 8005df6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005dfa:	00e2      	lsls	r2, r4, #3
 8005dfc:	4614      	mov	r4, r2
 8005dfe:	461d      	mov	r5, r3
 8005e00:	4643      	mov	r3, r8
 8005e02:	18e3      	adds	r3, r4, r3
 8005e04:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005e08:	464b      	mov	r3, r9
 8005e0a:	eb45 0303 	adc.w	r3, r5, r3
 8005e0e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005e12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005e1e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005e22:	f04f 0200 	mov.w	r2, #0
 8005e26:	f04f 0300 	mov.w	r3, #0
 8005e2a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005e2e:	4629      	mov	r1, r5
 8005e30:	008b      	lsls	r3, r1, #2
 8005e32:	4621      	mov	r1, r4
 8005e34:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e38:	4621      	mov	r1, r4
 8005e3a:	008a      	lsls	r2, r1, #2
 8005e3c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005e40:	f7fa f9d6 	bl	80001f0 <__aeabi_uldivmod>
 8005e44:	4602      	mov	r2, r0
 8005e46:	460b      	mov	r3, r1
 8005e48:	4b60      	ldr	r3, [pc, #384]	; (8005fcc <UART_SetConfig+0x4e4>)
 8005e4a:	fba3 2302 	umull	r2, r3, r3, r2
 8005e4e:	095b      	lsrs	r3, r3, #5
 8005e50:	011c      	lsls	r4, r3, #4
 8005e52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e56:	2200      	movs	r2, #0
 8005e58:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005e5c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005e60:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005e64:	4642      	mov	r2, r8
 8005e66:	464b      	mov	r3, r9
 8005e68:	1891      	adds	r1, r2, r2
 8005e6a:	61b9      	str	r1, [r7, #24]
 8005e6c:	415b      	adcs	r3, r3
 8005e6e:	61fb      	str	r3, [r7, #28]
 8005e70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005e74:	4641      	mov	r1, r8
 8005e76:	1851      	adds	r1, r2, r1
 8005e78:	6139      	str	r1, [r7, #16]
 8005e7a:	4649      	mov	r1, r9
 8005e7c:	414b      	adcs	r3, r1
 8005e7e:	617b      	str	r3, [r7, #20]
 8005e80:	f04f 0200 	mov.w	r2, #0
 8005e84:	f04f 0300 	mov.w	r3, #0
 8005e88:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005e8c:	4659      	mov	r1, fp
 8005e8e:	00cb      	lsls	r3, r1, #3
 8005e90:	4651      	mov	r1, sl
 8005e92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e96:	4651      	mov	r1, sl
 8005e98:	00ca      	lsls	r2, r1, #3
 8005e9a:	4610      	mov	r0, r2
 8005e9c:	4619      	mov	r1, r3
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	4642      	mov	r2, r8
 8005ea2:	189b      	adds	r3, r3, r2
 8005ea4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005ea8:	464b      	mov	r3, r9
 8005eaa:	460a      	mov	r2, r1
 8005eac:	eb42 0303 	adc.w	r3, r2, r3
 8005eb0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005eb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	67bb      	str	r3, [r7, #120]	; 0x78
 8005ebe:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005ec0:	f04f 0200 	mov.w	r2, #0
 8005ec4:	f04f 0300 	mov.w	r3, #0
 8005ec8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005ecc:	4649      	mov	r1, r9
 8005ece:	008b      	lsls	r3, r1, #2
 8005ed0:	4641      	mov	r1, r8
 8005ed2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ed6:	4641      	mov	r1, r8
 8005ed8:	008a      	lsls	r2, r1, #2
 8005eda:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005ede:	f7fa f987 	bl	80001f0 <__aeabi_uldivmod>
 8005ee2:	4602      	mov	r2, r0
 8005ee4:	460b      	mov	r3, r1
 8005ee6:	4b39      	ldr	r3, [pc, #228]	; (8005fcc <UART_SetConfig+0x4e4>)
 8005ee8:	fba3 1302 	umull	r1, r3, r3, r2
 8005eec:	095b      	lsrs	r3, r3, #5
 8005eee:	2164      	movs	r1, #100	; 0x64
 8005ef0:	fb01 f303 	mul.w	r3, r1, r3
 8005ef4:	1ad3      	subs	r3, r2, r3
 8005ef6:	011b      	lsls	r3, r3, #4
 8005ef8:	3332      	adds	r3, #50	; 0x32
 8005efa:	4a34      	ldr	r2, [pc, #208]	; (8005fcc <UART_SetConfig+0x4e4>)
 8005efc:	fba2 2303 	umull	r2, r3, r2, r3
 8005f00:	095b      	lsrs	r3, r3, #5
 8005f02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005f06:	441c      	add	r4, r3
 8005f08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	673b      	str	r3, [r7, #112]	; 0x70
 8005f10:	677a      	str	r2, [r7, #116]	; 0x74
 8005f12:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005f16:	4642      	mov	r2, r8
 8005f18:	464b      	mov	r3, r9
 8005f1a:	1891      	adds	r1, r2, r2
 8005f1c:	60b9      	str	r1, [r7, #8]
 8005f1e:	415b      	adcs	r3, r3
 8005f20:	60fb      	str	r3, [r7, #12]
 8005f22:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005f26:	4641      	mov	r1, r8
 8005f28:	1851      	adds	r1, r2, r1
 8005f2a:	6039      	str	r1, [r7, #0]
 8005f2c:	4649      	mov	r1, r9
 8005f2e:	414b      	adcs	r3, r1
 8005f30:	607b      	str	r3, [r7, #4]
 8005f32:	f04f 0200 	mov.w	r2, #0
 8005f36:	f04f 0300 	mov.w	r3, #0
 8005f3a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005f3e:	4659      	mov	r1, fp
 8005f40:	00cb      	lsls	r3, r1, #3
 8005f42:	4651      	mov	r1, sl
 8005f44:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f48:	4651      	mov	r1, sl
 8005f4a:	00ca      	lsls	r2, r1, #3
 8005f4c:	4610      	mov	r0, r2
 8005f4e:	4619      	mov	r1, r3
 8005f50:	4603      	mov	r3, r0
 8005f52:	4642      	mov	r2, r8
 8005f54:	189b      	adds	r3, r3, r2
 8005f56:	66bb      	str	r3, [r7, #104]	; 0x68
 8005f58:	464b      	mov	r3, r9
 8005f5a:	460a      	mov	r2, r1
 8005f5c:	eb42 0303 	adc.w	r3, r2, r3
 8005f60:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005f62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	663b      	str	r3, [r7, #96]	; 0x60
 8005f6c:	667a      	str	r2, [r7, #100]	; 0x64
 8005f6e:	f04f 0200 	mov.w	r2, #0
 8005f72:	f04f 0300 	mov.w	r3, #0
 8005f76:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005f7a:	4649      	mov	r1, r9
 8005f7c:	008b      	lsls	r3, r1, #2
 8005f7e:	4641      	mov	r1, r8
 8005f80:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f84:	4641      	mov	r1, r8
 8005f86:	008a      	lsls	r2, r1, #2
 8005f88:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005f8c:	f7fa f930 	bl	80001f0 <__aeabi_uldivmod>
 8005f90:	4602      	mov	r2, r0
 8005f92:	460b      	mov	r3, r1
 8005f94:	4b0d      	ldr	r3, [pc, #52]	; (8005fcc <UART_SetConfig+0x4e4>)
 8005f96:	fba3 1302 	umull	r1, r3, r3, r2
 8005f9a:	095b      	lsrs	r3, r3, #5
 8005f9c:	2164      	movs	r1, #100	; 0x64
 8005f9e:	fb01 f303 	mul.w	r3, r1, r3
 8005fa2:	1ad3      	subs	r3, r2, r3
 8005fa4:	011b      	lsls	r3, r3, #4
 8005fa6:	3332      	adds	r3, #50	; 0x32
 8005fa8:	4a08      	ldr	r2, [pc, #32]	; (8005fcc <UART_SetConfig+0x4e4>)
 8005faa:	fba2 2303 	umull	r2, r3, r2, r3
 8005fae:	095b      	lsrs	r3, r3, #5
 8005fb0:	f003 020f 	and.w	r2, r3, #15
 8005fb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4422      	add	r2, r4
 8005fbc:	609a      	str	r2, [r3, #8]
}
 8005fbe:	bf00      	nop
 8005fc0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005fca:	bf00      	nop
 8005fcc:	51eb851f 	.word	0x51eb851f

08005fd0 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b083      	sub	sp, #12
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
 8005fd8:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d123      	bne.n	800602a <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005fea:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005fee:	683a      	ldr	r2, [r7, #0]
 8005ff0:	6851      	ldr	r1, [r2, #4]
 8005ff2:	683a      	ldr	r2, [r7, #0]
 8005ff4:	6892      	ldr	r2, [r2, #8]
 8005ff6:	4311      	orrs	r1, r2
 8005ff8:	683a      	ldr	r2, [r7, #0]
 8005ffa:	68d2      	ldr	r2, [r2, #12]
 8005ffc:	4311      	orrs	r1, r2
 8005ffe:	683a      	ldr	r2, [r7, #0]
 8006000:	6912      	ldr	r2, [r2, #16]
 8006002:	4311      	orrs	r1, r2
 8006004:	683a      	ldr	r2, [r7, #0]
 8006006:	6952      	ldr	r2, [r2, #20]
 8006008:	4311      	orrs	r1, r2
 800600a:	683a      	ldr	r2, [r7, #0]
 800600c:	6992      	ldr	r2, [r2, #24]
 800600e:	4311      	orrs	r1, r2
 8006010:	683a      	ldr	r2, [r7, #0]
 8006012:	69d2      	ldr	r2, [r2, #28]
 8006014:	4311      	orrs	r1, r2
 8006016:	683a      	ldr	r2, [r7, #0]
 8006018:	6a12      	ldr	r2, [r2, #32]
 800601a:	4311      	orrs	r1, r2
 800601c:	683a      	ldr	r2, [r7, #0]
 800601e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006020:	430a      	orrs	r2, r1
 8006022:	431a      	orrs	r2, r3
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	601a      	str	r2, [r3, #0]
 8006028:	e028      	b.n	800607c <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	69d9      	ldr	r1, [r3, #28]
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	6a1b      	ldr	r3, [r3, #32]
 800603a:	4319      	orrs	r1, r3
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006040:	430b      	orrs	r3, r1
 8006042:	431a      	orrs	r2, r3
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006050:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006054:	683a      	ldr	r2, [r7, #0]
 8006056:	6851      	ldr	r1, [r2, #4]
 8006058:	683a      	ldr	r2, [r7, #0]
 800605a:	6892      	ldr	r2, [r2, #8]
 800605c:	4311      	orrs	r1, r2
 800605e:	683a      	ldr	r2, [r7, #0]
 8006060:	68d2      	ldr	r2, [r2, #12]
 8006062:	4311      	orrs	r1, r2
 8006064:	683a      	ldr	r2, [r7, #0]
 8006066:	6912      	ldr	r2, [r2, #16]
 8006068:	4311      	orrs	r1, r2
 800606a:	683a      	ldr	r2, [r7, #0]
 800606c:	6952      	ldr	r2, [r2, #20]
 800606e:	4311      	orrs	r1, r2
 8006070:	683a      	ldr	r2, [r7, #0]
 8006072:	6992      	ldr	r2, [r2, #24]
 8006074:	430a      	orrs	r2, r1
 8006076:	431a      	orrs	r2, r3
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800607c:	2300      	movs	r3, #0
}
 800607e:	4618      	mov	r0, r3
 8006080:	370c      	adds	r7, #12
 8006082:	46bd      	mov	sp, r7
 8006084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006088:	4770      	bx	lr

0800608a <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800608a:	b480      	push	{r7}
 800608c:	b085      	sub	sp, #20
 800608e:	af00      	add	r7, sp, #0
 8006090:	60f8      	str	r0, [r7, #12]
 8006092:	60b9      	str	r1, [r7, #8]
 8006094:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d128      	bne.n	80060ee <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	689b      	ldr	r3, [r3, #8]
 80060a0:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	1e59      	subs	r1, r3, #1
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	685b      	ldr	r3, [r3, #4]
 80060ae:	3b01      	subs	r3, #1
 80060b0:	011b      	lsls	r3, r3, #4
 80060b2:	4319      	orrs	r1, r3
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	689b      	ldr	r3, [r3, #8]
 80060b8:	3b01      	subs	r3, #1
 80060ba:	021b      	lsls	r3, r3, #8
 80060bc:	4319      	orrs	r1, r3
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	68db      	ldr	r3, [r3, #12]
 80060c2:	3b01      	subs	r3, #1
 80060c4:	031b      	lsls	r3, r3, #12
 80060c6:	4319      	orrs	r1, r3
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	691b      	ldr	r3, [r3, #16]
 80060cc:	3b01      	subs	r3, #1
 80060ce:	041b      	lsls	r3, r3, #16
 80060d0:	4319      	orrs	r1, r3
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	695b      	ldr	r3, [r3, #20]
 80060d6:	3b01      	subs	r3, #1
 80060d8:	051b      	lsls	r3, r3, #20
 80060da:	4319      	orrs	r1, r3
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	699b      	ldr	r3, [r3, #24]
 80060e0:	3b01      	subs	r3, #1
 80060e2:	061b      	lsls	r3, r3, #24
 80060e4:	430b      	orrs	r3, r1
 80060e6:	431a      	orrs	r2, r3
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	609a      	str	r2, [r3, #8]
 80060ec:	e02f      	b.n	800614e <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	689b      	ldr	r3, [r3, #8]
 80060f2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80060f6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80060fa:	68ba      	ldr	r2, [r7, #8]
 80060fc:	68d2      	ldr	r2, [r2, #12]
 80060fe:	3a01      	subs	r2, #1
 8006100:	0311      	lsls	r1, r2, #12
 8006102:	68ba      	ldr	r2, [r7, #8]
 8006104:	6952      	ldr	r2, [r2, #20]
 8006106:	3a01      	subs	r2, #1
 8006108:	0512      	lsls	r2, r2, #20
 800610a:	430a      	orrs	r2, r1
 800610c:	431a      	orrs	r2, r3
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	68db      	ldr	r3, [r3, #12]
 8006116:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	1e59      	subs	r1, r3, #1
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	3b01      	subs	r3, #1
 8006126:	011b      	lsls	r3, r3, #4
 8006128:	4319      	orrs	r1, r3
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	689b      	ldr	r3, [r3, #8]
 800612e:	3b01      	subs	r3, #1
 8006130:	021b      	lsls	r3, r3, #8
 8006132:	4319      	orrs	r1, r3
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	691b      	ldr	r3, [r3, #16]
 8006138:	3b01      	subs	r3, #1
 800613a:	041b      	lsls	r3, r3, #16
 800613c:	4319      	orrs	r1, r3
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	699b      	ldr	r3, [r3, #24]
 8006142:	3b01      	subs	r3, #1
 8006144:	061b      	lsls	r3, r3, #24
 8006146:	430b      	orrs	r3, r1
 8006148:	431a      	orrs	r2, r3
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800614e:	2300      	movs	r3, #0
}
 8006150:	4618      	mov	r0, r3
 8006152:	3714      	adds	r7, #20
 8006154:	46bd      	mov	sp, r7
 8006156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615a:	4770      	bx	lr

0800615c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800615c:	b084      	sub	sp, #16
 800615e:	b580      	push	{r7, lr}
 8006160:	b084      	sub	sp, #16
 8006162:	af00      	add	r7, sp, #0
 8006164:	6078      	str	r0, [r7, #4]
 8006166:	f107 001c 	add.w	r0, r7, #28
 800616a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800616e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006170:	2b01      	cmp	r3, #1
 8006172:	d122      	bne.n	80061ba <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006178:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	68db      	ldr	r3, [r3, #12]
 8006184:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006188:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800618c:	687a      	ldr	r2, [r7, #4]
 800618e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	68db      	ldr	r3, [r3, #12]
 8006194:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800619c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800619e:	2b01      	cmp	r3, #1
 80061a0:	d105      	bne.n	80061ae <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	68db      	ldr	r3, [r3, #12]
 80061a6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	f000 f9c0 	bl	8006534 <USB_CoreReset>
 80061b4:	4603      	mov	r3, r0
 80061b6:	73fb      	strb	r3, [r7, #15]
 80061b8:	e01a      	b.n	80061f0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	68db      	ldr	r3, [r3, #12]
 80061be:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f000 f9b4 	bl	8006534 <USB_CoreReset>
 80061cc:	4603      	mov	r3, r0
 80061ce:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80061d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d106      	bne.n	80061e4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061da:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	639a      	str	r2, [r3, #56]	; 0x38
 80061e2:	e005      	b.n	80061f0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061e8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80061f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061f2:	2b01      	cmp	r3, #1
 80061f4:	d10b      	bne.n	800620e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	689b      	ldr	r3, [r3, #8]
 80061fa:	f043 0206 	orr.w	r2, r3, #6
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	689b      	ldr	r3, [r3, #8]
 8006206:	f043 0220 	orr.w	r2, r3, #32
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800620e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006210:	4618      	mov	r0, r3
 8006212:	3710      	adds	r7, #16
 8006214:	46bd      	mov	sp, r7
 8006216:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800621a:	b004      	add	sp, #16
 800621c:	4770      	bx	lr

0800621e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800621e:	b480      	push	{r7}
 8006220:	b083      	sub	sp, #12
 8006222:	af00      	add	r7, sp, #0
 8006224:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	689b      	ldr	r3, [r3, #8]
 800622a:	f043 0201 	orr.w	r2, r3, #1
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006232:	2300      	movs	r3, #0
}
 8006234:	4618      	mov	r0, r3
 8006236:	370c      	adds	r7, #12
 8006238:	46bd      	mov	sp, r7
 800623a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623e:	4770      	bx	lr

08006240 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006240:	b480      	push	{r7}
 8006242:	b083      	sub	sp, #12
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	689b      	ldr	r3, [r3, #8]
 800624c:	f023 0201 	bic.w	r2, r3, #1
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006254:	2300      	movs	r3, #0
}
 8006256:	4618      	mov	r0, r3
 8006258:	370c      	adds	r7, #12
 800625a:	46bd      	mov	sp, r7
 800625c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006260:	4770      	bx	lr

08006262 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006262:	b580      	push	{r7, lr}
 8006264:	b084      	sub	sp, #16
 8006266:	af00      	add	r7, sp, #0
 8006268:	6078      	str	r0, [r7, #4]
 800626a:	460b      	mov	r3, r1
 800626c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800626e:	2300      	movs	r3, #0
 8006270:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	68db      	ldr	r3, [r3, #12]
 8006276:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800627e:	78fb      	ldrb	r3, [r7, #3]
 8006280:	2b01      	cmp	r3, #1
 8006282:	d115      	bne.n	80062b0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	68db      	ldr	r3, [r3, #12]
 8006288:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006290:	2001      	movs	r0, #1
 8006292:	f7fb f9f5 	bl	8001680 <HAL_Delay>
      ms++;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	3301      	adds	r3, #1
 800629a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800629c:	6878      	ldr	r0, [r7, #4]
 800629e:	f000 f93a 	bl	8006516 <USB_GetMode>
 80062a2:	4603      	mov	r3, r0
 80062a4:	2b01      	cmp	r3, #1
 80062a6:	d01e      	beq.n	80062e6 <USB_SetCurrentMode+0x84>
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	2b31      	cmp	r3, #49	; 0x31
 80062ac:	d9f0      	bls.n	8006290 <USB_SetCurrentMode+0x2e>
 80062ae:	e01a      	b.n	80062e6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80062b0:	78fb      	ldrb	r3, [r7, #3]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d115      	bne.n	80062e2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	68db      	ldr	r3, [r3, #12]
 80062ba:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80062c2:	2001      	movs	r0, #1
 80062c4:	f7fb f9dc 	bl	8001680 <HAL_Delay>
      ms++;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	3301      	adds	r3, #1
 80062cc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f000 f921 	bl	8006516 <USB_GetMode>
 80062d4:	4603      	mov	r3, r0
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d005      	beq.n	80062e6 <USB_SetCurrentMode+0x84>
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	2b31      	cmp	r3, #49	; 0x31
 80062de:	d9f0      	bls.n	80062c2 <USB_SetCurrentMode+0x60>
 80062e0:	e001      	b.n	80062e6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80062e2:	2301      	movs	r3, #1
 80062e4:	e005      	b.n	80062f2 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	2b32      	cmp	r3, #50	; 0x32
 80062ea:	d101      	bne.n	80062f0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80062ec:	2301      	movs	r3, #1
 80062ee:	e000      	b.n	80062f2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80062f0:	2300      	movs	r3, #0
}
 80062f2:	4618      	mov	r0, r3
 80062f4:	3710      	adds	r7, #16
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bd80      	pop	{r7, pc}
	...

080062fc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80062fc:	b480      	push	{r7}
 80062fe:	b085      	sub	sp, #20
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
 8006304:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006306:	2300      	movs	r3, #0
 8006308:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	3301      	adds	r3, #1
 800630e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	4a13      	ldr	r2, [pc, #76]	; (8006360 <USB_FlushTxFifo+0x64>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d901      	bls.n	800631c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006318:	2303      	movs	r3, #3
 800631a:	e01b      	b.n	8006354 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	691b      	ldr	r3, [r3, #16]
 8006320:	2b00      	cmp	r3, #0
 8006322:	daf2      	bge.n	800630a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006324:	2300      	movs	r3, #0
 8006326:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	019b      	lsls	r3, r3, #6
 800632c:	f043 0220 	orr.w	r2, r3, #32
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	3301      	adds	r3, #1
 8006338:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	4a08      	ldr	r2, [pc, #32]	; (8006360 <USB_FlushTxFifo+0x64>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d901      	bls.n	8006346 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006342:	2303      	movs	r3, #3
 8006344:	e006      	b.n	8006354 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	691b      	ldr	r3, [r3, #16]
 800634a:	f003 0320 	and.w	r3, r3, #32
 800634e:	2b20      	cmp	r3, #32
 8006350:	d0f0      	beq.n	8006334 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006352:	2300      	movs	r3, #0
}
 8006354:	4618      	mov	r0, r3
 8006356:	3714      	adds	r7, #20
 8006358:	46bd      	mov	sp, r7
 800635a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635e:	4770      	bx	lr
 8006360:	00030d40 	.word	0x00030d40

08006364 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006364:	b480      	push	{r7}
 8006366:	b085      	sub	sp, #20
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800636c:	2300      	movs	r3, #0
 800636e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	3301      	adds	r3, #1
 8006374:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	4a11      	ldr	r2, [pc, #68]	; (80063c0 <USB_FlushRxFifo+0x5c>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d901      	bls.n	8006382 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800637e:	2303      	movs	r3, #3
 8006380:	e018      	b.n	80063b4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	691b      	ldr	r3, [r3, #16]
 8006386:	2b00      	cmp	r3, #0
 8006388:	daf2      	bge.n	8006370 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800638a:	2300      	movs	r3, #0
 800638c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2210      	movs	r2, #16
 8006392:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	3301      	adds	r3, #1
 8006398:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	4a08      	ldr	r2, [pc, #32]	; (80063c0 <USB_FlushRxFifo+0x5c>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d901      	bls.n	80063a6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80063a2:	2303      	movs	r3, #3
 80063a4:	e006      	b.n	80063b4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	691b      	ldr	r3, [r3, #16]
 80063aa:	f003 0310 	and.w	r3, r3, #16
 80063ae:	2b10      	cmp	r3, #16
 80063b0:	d0f0      	beq.n	8006394 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80063b2:	2300      	movs	r3, #0
}
 80063b4:	4618      	mov	r0, r3
 80063b6:	3714      	adds	r7, #20
 80063b8:	46bd      	mov	sp, r7
 80063ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063be:	4770      	bx	lr
 80063c0:	00030d40 	.word	0x00030d40

080063c4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80063c4:	b480      	push	{r7}
 80063c6:	b089      	sub	sp, #36	; 0x24
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	60f8      	str	r0, [r7, #12]
 80063cc:	60b9      	str	r1, [r7, #8]
 80063ce:	4611      	mov	r1, r2
 80063d0:	461a      	mov	r2, r3
 80063d2:	460b      	mov	r3, r1
 80063d4:	71fb      	strb	r3, [r7, #7]
 80063d6:	4613      	mov	r3, r2
 80063d8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80063e2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d123      	bne.n	8006432 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80063ea:	88bb      	ldrh	r3, [r7, #4]
 80063ec:	3303      	adds	r3, #3
 80063ee:	089b      	lsrs	r3, r3, #2
 80063f0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80063f2:	2300      	movs	r3, #0
 80063f4:	61bb      	str	r3, [r7, #24]
 80063f6:	e018      	b.n	800642a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80063f8:	79fb      	ldrb	r3, [r7, #7]
 80063fa:	031a      	lsls	r2, r3, #12
 80063fc:	697b      	ldr	r3, [r7, #20]
 80063fe:	4413      	add	r3, r2
 8006400:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006404:	461a      	mov	r2, r3
 8006406:	69fb      	ldr	r3, [r7, #28]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800640c:	69fb      	ldr	r3, [r7, #28]
 800640e:	3301      	adds	r3, #1
 8006410:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006412:	69fb      	ldr	r3, [r7, #28]
 8006414:	3301      	adds	r3, #1
 8006416:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006418:	69fb      	ldr	r3, [r7, #28]
 800641a:	3301      	adds	r3, #1
 800641c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800641e:	69fb      	ldr	r3, [r7, #28]
 8006420:	3301      	adds	r3, #1
 8006422:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006424:	69bb      	ldr	r3, [r7, #24]
 8006426:	3301      	adds	r3, #1
 8006428:	61bb      	str	r3, [r7, #24]
 800642a:	69ba      	ldr	r2, [r7, #24]
 800642c:	693b      	ldr	r3, [r7, #16]
 800642e:	429a      	cmp	r2, r3
 8006430:	d3e2      	bcc.n	80063f8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006432:	2300      	movs	r3, #0
}
 8006434:	4618      	mov	r0, r3
 8006436:	3724      	adds	r7, #36	; 0x24
 8006438:	46bd      	mov	sp, r7
 800643a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643e:	4770      	bx	lr

08006440 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006440:	b480      	push	{r7}
 8006442:	b08b      	sub	sp, #44	; 0x2c
 8006444:	af00      	add	r7, sp, #0
 8006446:	60f8      	str	r0, [r7, #12]
 8006448:	60b9      	str	r1, [r7, #8]
 800644a:	4613      	mov	r3, r2
 800644c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006456:	88fb      	ldrh	r3, [r7, #6]
 8006458:	089b      	lsrs	r3, r3, #2
 800645a:	b29b      	uxth	r3, r3
 800645c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800645e:	88fb      	ldrh	r3, [r7, #6]
 8006460:	f003 0303 	and.w	r3, r3, #3
 8006464:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006466:	2300      	movs	r3, #0
 8006468:	623b      	str	r3, [r7, #32]
 800646a:	e014      	b.n	8006496 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800646c:	69bb      	ldr	r3, [r7, #24]
 800646e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006472:	681a      	ldr	r2, [r3, #0]
 8006474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006476:	601a      	str	r2, [r3, #0]
    pDest++;
 8006478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800647a:	3301      	adds	r3, #1
 800647c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800647e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006480:	3301      	adds	r3, #1
 8006482:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006486:	3301      	adds	r3, #1
 8006488:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800648a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800648c:	3301      	adds	r3, #1
 800648e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006490:	6a3b      	ldr	r3, [r7, #32]
 8006492:	3301      	adds	r3, #1
 8006494:	623b      	str	r3, [r7, #32]
 8006496:	6a3a      	ldr	r2, [r7, #32]
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	429a      	cmp	r2, r3
 800649c:	d3e6      	bcc.n	800646c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800649e:	8bfb      	ldrh	r3, [r7, #30]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d01e      	beq.n	80064e2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80064a4:	2300      	movs	r3, #0
 80064a6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80064a8:	69bb      	ldr	r3, [r7, #24]
 80064aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064ae:	461a      	mov	r2, r3
 80064b0:	f107 0310 	add.w	r3, r7, #16
 80064b4:	6812      	ldr	r2, [r2, #0]
 80064b6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80064b8:	693a      	ldr	r2, [r7, #16]
 80064ba:	6a3b      	ldr	r3, [r7, #32]
 80064bc:	b2db      	uxtb	r3, r3
 80064be:	00db      	lsls	r3, r3, #3
 80064c0:	fa22 f303 	lsr.w	r3, r2, r3
 80064c4:	b2da      	uxtb	r2, r3
 80064c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c8:	701a      	strb	r2, [r3, #0]
      i++;
 80064ca:	6a3b      	ldr	r3, [r7, #32]
 80064cc:	3301      	adds	r3, #1
 80064ce:	623b      	str	r3, [r7, #32]
      pDest++;
 80064d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d2:	3301      	adds	r3, #1
 80064d4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80064d6:	8bfb      	ldrh	r3, [r7, #30]
 80064d8:	3b01      	subs	r3, #1
 80064da:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80064dc:	8bfb      	ldrh	r3, [r7, #30]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d1ea      	bne.n	80064b8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80064e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80064e4:	4618      	mov	r0, r3
 80064e6:	372c      	adds	r7, #44	; 0x2c
 80064e8:	46bd      	mov	sp, r7
 80064ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ee:	4770      	bx	lr

080064f0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80064f0:	b480      	push	{r7}
 80064f2:	b085      	sub	sp, #20
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	695b      	ldr	r3, [r3, #20]
 80064fc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	699b      	ldr	r3, [r3, #24]
 8006502:	68fa      	ldr	r2, [r7, #12]
 8006504:	4013      	ands	r3, r2
 8006506:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006508:	68fb      	ldr	r3, [r7, #12]
}
 800650a:	4618      	mov	r0, r3
 800650c:	3714      	adds	r7, #20
 800650e:	46bd      	mov	sp, r7
 8006510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006514:	4770      	bx	lr

08006516 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006516:	b480      	push	{r7}
 8006518:	b083      	sub	sp, #12
 800651a:	af00      	add	r7, sp, #0
 800651c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	695b      	ldr	r3, [r3, #20]
 8006522:	f003 0301 	and.w	r3, r3, #1
}
 8006526:	4618      	mov	r0, r3
 8006528:	370c      	adds	r7, #12
 800652a:	46bd      	mov	sp, r7
 800652c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006530:	4770      	bx	lr
	...

08006534 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006534:	b480      	push	{r7}
 8006536:	b085      	sub	sp, #20
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800653c:	2300      	movs	r3, #0
 800653e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	3301      	adds	r3, #1
 8006544:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	4a13      	ldr	r2, [pc, #76]	; (8006598 <USB_CoreReset+0x64>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d901      	bls.n	8006552 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800654e:	2303      	movs	r3, #3
 8006550:	e01b      	b.n	800658a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	691b      	ldr	r3, [r3, #16]
 8006556:	2b00      	cmp	r3, #0
 8006558:	daf2      	bge.n	8006540 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800655a:	2300      	movs	r3, #0
 800655c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	691b      	ldr	r3, [r3, #16]
 8006562:	f043 0201 	orr.w	r2, r3, #1
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	3301      	adds	r3, #1
 800656e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	4a09      	ldr	r2, [pc, #36]	; (8006598 <USB_CoreReset+0x64>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d901      	bls.n	800657c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006578:	2303      	movs	r3, #3
 800657a:	e006      	b.n	800658a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	691b      	ldr	r3, [r3, #16]
 8006580:	f003 0301 	and.w	r3, r3, #1
 8006584:	2b01      	cmp	r3, #1
 8006586:	d0f0      	beq.n	800656a <USB_CoreReset+0x36>

  return HAL_OK;
 8006588:	2300      	movs	r3, #0
}
 800658a:	4618      	mov	r0, r3
 800658c:	3714      	adds	r7, #20
 800658e:	46bd      	mov	sp, r7
 8006590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006594:	4770      	bx	lr
 8006596:	bf00      	nop
 8006598:	00030d40 	.word	0x00030d40

0800659c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800659c:	b084      	sub	sp, #16
 800659e:	b580      	push	{r7, lr}
 80065a0:	b086      	sub	sp, #24
 80065a2:	af00      	add	r7, sp, #0
 80065a4:	6078      	str	r0, [r7, #4]
 80065a6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80065aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80065ae:	2300      	movs	r3, #0
 80065b0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80065bc:	461a      	mov	r2, r3
 80065be:	2300      	movs	r3, #0
 80065c0:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065c6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065d2:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065de:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d018      	beq.n	8006624 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80065f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065f4:	2b01      	cmp	r3, #1
 80065f6:	d10a      	bne.n	800660e <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	68fa      	ldr	r2, [r7, #12]
 8006602:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006606:	f043 0304 	orr.w	r3, r3, #4
 800660a:	6013      	str	r3, [r2, #0]
 800660c:	e014      	b.n	8006638 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	68fa      	ldr	r2, [r7, #12]
 8006618:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800661c:	f023 0304 	bic.w	r3, r3, #4
 8006620:	6013      	str	r3, [r2, #0]
 8006622:	e009      	b.n	8006638 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	68fa      	ldr	r2, [r7, #12]
 800662e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006632:	f023 0304 	bic.w	r3, r3, #4
 8006636:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006638:	2110      	movs	r1, #16
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f7ff fe5e 	bl	80062fc <USB_FlushTxFifo>
 8006640:	4603      	mov	r3, r0
 8006642:	2b00      	cmp	r3, #0
 8006644:	d001      	beq.n	800664a <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8006646:	2301      	movs	r3, #1
 8006648:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	f7ff fe8a 	bl	8006364 <USB_FlushRxFifo>
 8006650:	4603      	mov	r3, r0
 8006652:	2b00      	cmp	r3, #0
 8006654:	d001      	beq.n	800665a <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8006656:	2301      	movs	r3, #1
 8006658:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800665a:	2300      	movs	r3, #0
 800665c:	613b      	str	r3, [r7, #16]
 800665e:	e015      	b.n	800668c <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	015a      	lsls	r2, r3, #5
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	4413      	add	r3, r2
 8006668:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800666c:	461a      	mov	r2, r3
 800666e:	f04f 33ff 	mov.w	r3, #4294967295
 8006672:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006674:	693b      	ldr	r3, [r7, #16]
 8006676:	015a      	lsls	r2, r3, #5
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	4413      	add	r3, r2
 800667c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006680:	461a      	mov	r2, r3
 8006682:	2300      	movs	r3, #0
 8006684:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8006686:	693b      	ldr	r3, [r7, #16]
 8006688:	3301      	adds	r3, #1
 800668a:	613b      	str	r3, [r7, #16]
 800668c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800668e:	693a      	ldr	r2, [r7, #16]
 8006690:	429a      	cmp	r2, r3
 8006692:	d3e5      	bcc.n	8006660 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2200      	movs	r2, #0
 8006698:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	f04f 32ff 	mov.w	r2, #4294967295
 80066a0:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d00b      	beq.n	80066c6 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80066b4:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	4a13      	ldr	r2, [pc, #76]	; (8006708 <USB_HostInit+0x16c>)
 80066ba:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	4a13      	ldr	r2, [pc, #76]	; (800670c <USB_HostInit+0x170>)
 80066c0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80066c4:	e009      	b.n	80066da <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2280      	movs	r2, #128	; 0x80
 80066ca:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	4a10      	ldr	r2, [pc, #64]	; (8006710 <USB_HostInit+0x174>)
 80066d0:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	4a0f      	ldr	r2, [pc, #60]	; (8006714 <USB_HostInit+0x178>)
 80066d6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80066da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d105      	bne.n	80066ec <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	699b      	ldr	r3, [r3, #24]
 80066e4:	f043 0210 	orr.w	r2, r3, #16
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	699a      	ldr	r2, [r3, #24]
 80066f0:	4b09      	ldr	r3, [pc, #36]	; (8006718 <USB_HostInit+0x17c>)
 80066f2:	4313      	orrs	r3, r2
 80066f4:	687a      	ldr	r2, [r7, #4]
 80066f6:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80066f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80066fa:	4618      	mov	r0, r3
 80066fc:	3718      	adds	r7, #24
 80066fe:	46bd      	mov	sp, r7
 8006700:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006704:	b004      	add	sp, #16
 8006706:	4770      	bx	lr
 8006708:	01000200 	.word	0x01000200
 800670c:	00e00300 	.word	0x00e00300
 8006710:	00600080 	.word	0x00600080
 8006714:	004000e0 	.word	0x004000e0
 8006718:	a3200008 	.word	0xa3200008

0800671c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800671c:	b480      	push	{r7}
 800671e:	b085      	sub	sp, #20
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
 8006724:	460b      	mov	r3, r1
 8006726:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	68fa      	ldr	r2, [r7, #12]
 8006736:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800673a:	f023 0303 	bic.w	r3, r3, #3
 800673e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006746:	681a      	ldr	r2, [r3, #0]
 8006748:	78fb      	ldrb	r3, [r7, #3]
 800674a:	f003 0303 	and.w	r3, r3, #3
 800674e:	68f9      	ldr	r1, [r7, #12]
 8006750:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006754:	4313      	orrs	r3, r2
 8006756:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006758:	78fb      	ldrb	r3, [r7, #3]
 800675a:	2b01      	cmp	r3, #1
 800675c:	d107      	bne.n	800676e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006764:	461a      	mov	r2, r3
 8006766:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800676a:	6053      	str	r3, [r2, #4]
 800676c:	e009      	b.n	8006782 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800676e:	78fb      	ldrb	r3, [r7, #3]
 8006770:	2b02      	cmp	r3, #2
 8006772:	d106      	bne.n	8006782 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800677a:	461a      	mov	r2, r3
 800677c:	f241 7370 	movw	r3, #6000	; 0x1770
 8006780:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8006782:	2300      	movs	r3, #0
}
 8006784:	4618      	mov	r0, r3
 8006786:	3714      	adds	r7, #20
 8006788:	46bd      	mov	sp, r7
 800678a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678e:	4770      	bx	lr

08006790 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b084      	sub	sp, #16
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800679c:	2300      	movs	r3, #0
 800679e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80067b0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	68fa      	ldr	r2, [r7, #12]
 80067b6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80067ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067be:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80067c0:	2064      	movs	r0, #100	; 0x64
 80067c2:	f7fa ff5d 	bl	8001680 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	68fa      	ldr	r2, [r7, #12]
 80067ca:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80067ce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80067d2:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80067d4:	200a      	movs	r0, #10
 80067d6:	f7fa ff53 	bl	8001680 <HAL_Delay>

  return HAL_OK;
 80067da:	2300      	movs	r3, #0
}
 80067dc:	4618      	mov	r0, r3
 80067de:	3710      	adds	r7, #16
 80067e0:	46bd      	mov	sp, r7
 80067e2:	bd80      	pop	{r7, pc}

080067e4 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80067e4:	b480      	push	{r7}
 80067e6:	b085      	sub	sp, #20
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
 80067ec:	460b      	mov	r3, r1
 80067ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80067f4:	2300      	movs	r3, #0
 80067f6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006802:	68bb      	ldr	r3, [r7, #8]
 8006804:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006808:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006810:	2b00      	cmp	r3, #0
 8006812:	d109      	bne.n	8006828 <USB_DriveVbus+0x44>
 8006814:	78fb      	ldrb	r3, [r7, #3]
 8006816:	2b01      	cmp	r3, #1
 8006818:	d106      	bne.n	8006828 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	68fa      	ldr	r2, [r7, #12]
 800681e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006822:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006826:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800682e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006832:	d109      	bne.n	8006848 <USB_DriveVbus+0x64>
 8006834:	78fb      	ldrb	r3, [r7, #3]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d106      	bne.n	8006848 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800683a:	68bb      	ldr	r3, [r7, #8]
 800683c:	68fa      	ldr	r2, [r7, #12]
 800683e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006842:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006846:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006848:	2300      	movs	r3, #0
}
 800684a:	4618      	mov	r0, r3
 800684c:	3714      	adds	r7, #20
 800684e:	46bd      	mov	sp, r7
 8006850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006854:	4770      	bx	lr

08006856 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006856:	b480      	push	{r7}
 8006858:	b085      	sub	sp, #20
 800685a:	af00      	add	r7, sp, #0
 800685c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006862:	2300      	movs	r3, #0
 8006864:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	0c5b      	lsrs	r3, r3, #17
 8006874:	f003 0303 	and.w	r3, r3, #3
}
 8006878:	4618      	mov	r0, r3
 800687a:	3714      	adds	r7, #20
 800687c:	46bd      	mov	sp, r7
 800687e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006882:	4770      	bx	lr

08006884 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8006884:	b480      	push	{r7}
 8006886:	b085      	sub	sp, #20
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006896:	689b      	ldr	r3, [r3, #8]
 8006898:	b29b      	uxth	r3, r3
}
 800689a:	4618      	mov	r0, r3
 800689c:	3714      	adds	r7, #20
 800689e:	46bd      	mov	sp, r7
 80068a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a4:	4770      	bx	lr
	...

080068a8 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b088      	sub	sp, #32
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
 80068b0:	4608      	mov	r0, r1
 80068b2:	4611      	mov	r1, r2
 80068b4:	461a      	mov	r2, r3
 80068b6:	4603      	mov	r3, r0
 80068b8:	70fb      	strb	r3, [r7, #3]
 80068ba:	460b      	mov	r3, r1
 80068bc:	70bb      	strb	r3, [r7, #2]
 80068be:	4613      	mov	r3, r2
 80068c0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80068c2:	2300      	movs	r3, #0
 80068c4:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80068ca:	78fb      	ldrb	r3, [r7, #3]
 80068cc:	015a      	lsls	r2, r3, #5
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	4413      	add	r3, r2
 80068d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068d6:	461a      	mov	r2, r3
 80068d8:	f04f 33ff 	mov.w	r3, #4294967295
 80068dc:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80068de:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80068e2:	2b03      	cmp	r3, #3
 80068e4:	d87e      	bhi.n	80069e4 <USB_HC_Init+0x13c>
 80068e6:	a201      	add	r2, pc, #4	; (adr r2, 80068ec <USB_HC_Init+0x44>)
 80068e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068ec:	080068fd 	.word	0x080068fd
 80068f0:	080069a7 	.word	0x080069a7
 80068f4:	080068fd 	.word	0x080068fd
 80068f8:	08006969 	.word	0x08006969
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80068fc:	78fb      	ldrb	r3, [r7, #3]
 80068fe:	015a      	lsls	r2, r3, #5
 8006900:	693b      	ldr	r3, [r7, #16]
 8006902:	4413      	add	r3, r2
 8006904:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006908:	461a      	mov	r2, r3
 800690a:	f240 439d 	movw	r3, #1181	; 0x49d
 800690e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006910:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006914:	2b00      	cmp	r3, #0
 8006916:	da10      	bge.n	800693a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006918:	78fb      	ldrb	r3, [r7, #3]
 800691a:	015a      	lsls	r2, r3, #5
 800691c:	693b      	ldr	r3, [r7, #16]
 800691e:	4413      	add	r3, r2
 8006920:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006924:	68db      	ldr	r3, [r3, #12]
 8006926:	78fa      	ldrb	r2, [r7, #3]
 8006928:	0151      	lsls	r1, r2, #5
 800692a:	693a      	ldr	r2, [r7, #16]
 800692c:	440a      	add	r2, r1
 800692e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006932:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006936:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8006938:	e057      	b.n	80069ea <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800693e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006942:	2b00      	cmp	r3, #0
 8006944:	d051      	beq.n	80069ea <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8006946:	78fb      	ldrb	r3, [r7, #3]
 8006948:	015a      	lsls	r2, r3, #5
 800694a:	693b      	ldr	r3, [r7, #16]
 800694c:	4413      	add	r3, r2
 800694e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006952:	68db      	ldr	r3, [r3, #12]
 8006954:	78fa      	ldrb	r2, [r7, #3]
 8006956:	0151      	lsls	r1, r2, #5
 8006958:	693a      	ldr	r2, [r7, #16]
 800695a:	440a      	add	r2, r1
 800695c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006960:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006964:	60d3      	str	r3, [r2, #12]
      break;
 8006966:	e040      	b.n	80069ea <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006968:	78fb      	ldrb	r3, [r7, #3]
 800696a:	015a      	lsls	r2, r3, #5
 800696c:	693b      	ldr	r3, [r7, #16]
 800696e:	4413      	add	r3, r2
 8006970:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006974:	461a      	mov	r2, r3
 8006976:	f240 639d 	movw	r3, #1693	; 0x69d
 800697a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800697c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006980:	2b00      	cmp	r3, #0
 8006982:	da34      	bge.n	80069ee <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006984:	78fb      	ldrb	r3, [r7, #3]
 8006986:	015a      	lsls	r2, r3, #5
 8006988:	693b      	ldr	r3, [r7, #16]
 800698a:	4413      	add	r3, r2
 800698c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006990:	68db      	ldr	r3, [r3, #12]
 8006992:	78fa      	ldrb	r2, [r7, #3]
 8006994:	0151      	lsls	r1, r2, #5
 8006996:	693a      	ldr	r2, [r7, #16]
 8006998:	440a      	add	r2, r1
 800699a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800699e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069a2:	60d3      	str	r3, [r2, #12]
      }

      break;
 80069a4:	e023      	b.n	80069ee <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80069a6:	78fb      	ldrb	r3, [r7, #3]
 80069a8:	015a      	lsls	r2, r3, #5
 80069aa:	693b      	ldr	r3, [r7, #16]
 80069ac:	4413      	add	r3, r2
 80069ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069b2:	461a      	mov	r2, r3
 80069b4:	f240 2325 	movw	r3, #549	; 0x225
 80069b8:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80069ba:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	da17      	bge.n	80069f2 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80069c2:	78fb      	ldrb	r3, [r7, #3]
 80069c4:	015a      	lsls	r2, r3, #5
 80069c6:	693b      	ldr	r3, [r7, #16]
 80069c8:	4413      	add	r3, r2
 80069ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069ce:	68db      	ldr	r3, [r3, #12]
 80069d0:	78fa      	ldrb	r2, [r7, #3]
 80069d2:	0151      	lsls	r1, r2, #5
 80069d4:	693a      	ldr	r2, [r7, #16]
 80069d6:	440a      	add	r2, r1
 80069d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80069dc:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80069e0:	60d3      	str	r3, [r2, #12]
      }
      break;
 80069e2:	e006      	b.n	80069f2 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80069e4:	2301      	movs	r3, #1
 80069e6:	77fb      	strb	r3, [r7, #31]
      break;
 80069e8:	e004      	b.n	80069f4 <USB_HC_Init+0x14c>
      break;
 80069ea:	bf00      	nop
 80069ec:	e002      	b.n	80069f4 <USB_HC_Init+0x14c>
      break;
 80069ee:	bf00      	nop
 80069f0:	e000      	b.n	80069f4 <USB_HC_Init+0x14c>
      break;
 80069f2:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80069f4:	78fb      	ldrb	r3, [r7, #3]
 80069f6:	015a      	lsls	r2, r3, #5
 80069f8:	693b      	ldr	r3, [r7, #16]
 80069fa:	4413      	add	r3, r2
 80069fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a00:	68db      	ldr	r3, [r3, #12]
 8006a02:	78fa      	ldrb	r2, [r7, #3]
 8006a04:	0151      	lsls	r1, r2, #5
 8006a06:	693a      	ldr	r2, [r7, #16]
 8006a08:	440a      	add	r2, r1
 8006a0a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a0e:	f043 0302 	orr.w	r3, r3, #2
 8006a12:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006a14:	693b      	ldr	r3, [r7, #16]
 8006a16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a1a:	699a      	ldr	r2, [r3, #24]
 8006a1c:	78fb      	ldrb	r3, [r7, #3]
 8006a1e:	f003 030f 	and.w	r3, r3, #15
 8006a22:	2101      	movs	r1, #1
 8006a24:	fa01 f303 	lsl.w	r3, r1, r3
 8006a28:	6939      	ldr	r1, [r7, #16]
 8006a2a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006a2e:	4313      	orrs	r3, r2
 8006a30:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	699b      	ldr	r3, [r3, #24]
 8006a36:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006a3e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	da03      	bge.n	8006a4e <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006a46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a4a:	61bb      	str	r3, [r7, #24]
 8006a4c:	e001      	b.n	8006a52 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8006a4e:	2300      	movs	r3, #0
 8006a50:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f7ff feff 	bl	8006856 <USB_GetHostSpeed>
 8006a58:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8006a5a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006a5e:	2b02      	cmp	r3, #2
 8006a60:	d106      	bne.n	8006a70 <USB_HC_Init+0x1c8>
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	2b02      	cmp	r3, #2
 8006a66:	d003      	beq.n	8006a70 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006a68:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006a6c:	617b      	str	r3, [r7, #20]
 8006a6e:	e001      	b.n	8006a74 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006a70:	2300      	movs	r3, #0
 8006a72:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006a74:	787b      	ldrb	r3, [r7, #1]
 8006a76:	059b      	lsls	r3, r3, #22
 8006a78:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006a7c:	78bb      	ldrb	r3, [r7, #2]
 8006a7e:	02db      	lsls	r3, r3, #11
 8006a80:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006a84:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006a86:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006a8a:	049b      	lsls	r3, r3, #18
 8006a8c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006a90:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006a92:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8006a94:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006a98:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006a9a:	69bb      	ldr	r3, [r7, #24]
 8006a9c:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006a9e:	78fb      	ldrb	r3, [r7, #3]
 8006aa0:	0159      	lsls	r1, r3, #5
 8006aa2:	693b      	ldr	r3, [r7, #16]
 8006aa4:	440b      	add	r3, r1
 8006aa6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006aaa:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006ab0:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8006ab2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006ab6:	2b03      	cmp	r3, #3
 8006ab8:	d003      	beq.n	8006ac2 <USB_HC_Init+0x21a>
 8006aba:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006abe:	2b01      	cmp	r3, #1
 8006ac0:	d10f      	bne.n	8006ae2 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006ac2:	78fb      	ldrb	r3, [r7, #3]
 8006ac4:	015a      	lsls	r2, r3, #5
 8006ac6:	693b      	ldr	r3, [r7, #16]
 8006ac8:	4413      	add	r3, r2
 8006aca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	78fa      	ldrb	r2, [r7, #3]
 8006ad2:	0151      	lsls	r1, r2, #5
 8006ad4:	693a      	ldr	r2, [r7, #16]
 8006ad6:	440a      	add	r2, r1
 8006ad8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006adc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006ae0:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006ae2:	7ffb      	ldrb	r3, [r7, #31]
}
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	3720      	adds	r7, #32
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bd80      	pop	{r7, pc}

08006aec <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b08c      	sub	sp, #48	; 0x30
 8006af0:	af02      	add	r7, sp, #8
 8006af2:	60f8      	str	r0, [r7, #12]
 8006af4:	60b9      	str	r1, [r7, #8]
 8006af6:	4613      	mov	r3, r2
 8006af8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	785b      	ldrb	r3, [r3, #1]
 8006b02:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8006b04:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006b08:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d02d      	beq.n	8006b72 <USB_HC_StartXfer+0x86>
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	791b      	ldrb	r3, [r3, #4]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d129      	bne.n	8006b72 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8006b1e:	79fb      	ldrb	r3, [r7, #7]
 8006b20:	2b01      	cmp	r3, #1
 8006b22:	d117      	bne.n	8006b54 <USB_HC_StartXfer+0x68>
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	79db      	ldrb	r3, [r3, #7]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d003      	beq.n	8006b34 <USB_HC_StartXfer+0x48>
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	79db      	ldrb	r3, [r3, #7]
 8006b30:	2b02      	cmp	r3, #2
 8006b32:	d10f      	bne.n	8006b54 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8006b34:	69fb      	ldr	r3, [r7, #28]
 8006b36:	015a      	lsls	r2, r3, #5
 8006b38:	6a3b      	ldr	r3, [r7, #32]
 8006b3a:	4413      	add	r3, r2
 8006b3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b40:	68db      	ldr	r3, [r3, #12]
 8006b42:	69fa      	ldr	r2, [r7, #28]
 8006b44:	0151      	lsls	r1, r2, #5
 8006b46:	6a3a      	ldr	r2, [r7, #32]
 8006b48:	440a      	add	r2, r1
 8006b4a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006b4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b52:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8006b54:	79fb      	ldrb	r3, [r7, #7]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d10b      	bne.n	8006b72 <USB_HC_StartXfer+0x86>
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	795b      	ldrb	r3, [r3, #5]
 8006b5e:	2b01      	cmp	r3, #1
 8006b60:	d107      	bne.n	8006b72 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	785b      	ldrb	r3, [r3, #1]
 8006b66:	4619      	mov	r1, r3
 8006b68:	68f8      	ldr	r0, [r7, #12]
 8006b6a:	f000 fa0f 	bl	8006f8c <USB_DoPing>
      return HAL_OK;
 8006b6e:	2300      	movs	r3, #0
 8006b70:	e0f8      	b.n	8006d64 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8006b72:	68bb      	ldr	r3, [r7, #8]
 8006b74:	695b      	ldr	r3, [r3, #20]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d018      	beq.n	8006bac <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	695b      	ldr	r3, [r3, #20]
 8006b7e:	68ba      	ldr	r2, [r7, #8]
 8006b80:	8912      	ldrh	r2, [r2, #8]
 8006b82:	4413      	add	r3, r2
 8006b84:	3b01      	subs	r3, #1
 8006b86:	68ba      	ldr	r2, [r7, #8]
 8006b88:	8912      	ldrh	r2, [r2, #8]
 8006b8a:	fbb3 f3f2 	udiv	r3, r3, r2
 8006b8e:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8006b90:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006b92:	8b7b      	ldrh	r3, [r7, #26]
 8006b94:	429a      	cmp	r2, r3
 8006b96:	d90b      	bls.n	8006bb0 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8006b98:	8b7b      	ldrh	r3, [r7, #26]
 8006b9a:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006b9c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006b9e:	68ba      	ldr	r2, [r7, #8]
 8006ba0:	8912      	ldrh	r2, [r2, #8]
 8006ba2:	fb03 f202 	mul.w	r2, r3, r2
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	611a      	str	r2, [r3, #16]
 8006baa:	e001      	b.n	8006bb0 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8006bac:	2301      	movs	r3, #1
 8006bae:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	78db      	ldrb	r3, [r3, #3]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d007      	beq.n	8006bc8 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006bb8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006bba:	68ba      	ldr	r2, [r7, #8]
 8006bbc:	8912      	ldrh	r2, [r2, #8]
 8006bbe:	fb03 f202 	mul.w	r2, r3, r2
 8006bc2:	68bb      	ldr	r3, [r7, #8]
 8006bc4:	611a      	str	r2, [r3, #16]
 8006bc6:	e003      	b.n	8006bd0 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	695a      	ldr	r2, [r3, #20]
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	691b      	ldr	r3, [r3, #16]
 8006bd4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006bd8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006bda:	04d9      	lsls	r1, r3, #19
 8006bdc:	4b63      	ldr	r3, [pc, #396]	; (8006d6c <USB_HC_StartXfer+0x280>)
 8006bde:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006be0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	7a9b      	ldrb	r3, [r3, #10]
 8006be6:	075b      	lsls	r3, r3, #29
 8006be8:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006bec:	69f9      	ldr	r1, [r7, #28]
 8006bee:	0148      	lsls	r0, r1, #5
 8006bf0:	6a39      	ldr	r1, [r7, #32]
 8006bf2:	4401      	add	r1, r0
 8006bf4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006bf8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006bfa:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006bfc:	79fb      	ldrb	r3, [r7, #7]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d009      	beq.n	8006c16 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	68d9      	ldr	r1, [r3, #12]
 8006c06:	69fb      	ldr	r3, [r7, #28]
 8006c08:	015a      	lsls	r2, r3, #5
 8006c0a:	6a3b      	ldr	r3, [r7, #32]
 8006c0c:	4413      	add	r3, r2
 8006c0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c12:	460a      	mov	r2, r1
 8006c14:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006c16:	6a3b      	ldr	r3, [r7, #32]
 8006c18:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c1c:	689b      	ldr	r3, [r3, #8]
 8006c1e:	f003 0301 	and.w	r3, r3, #1
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	bf0c      	ite	eq
 8006c26:	2301      	moveq	r3, #1
 8006c28:	2300      	movne	r3, #0
 8006c2a:	b2db      	uxtb	r3, r3
 8006c2c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006c2e:	69fb      	ldr	r3, [r7, #28]
 8006c30:	015a      	lsls	r2, r3, #5
 8006c32:	6a3b      	ldr	r3, [r7, #32]
 8006c34:	4413      	add	r3, r2
 8006c36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	69fa      	ldr	r2, [r7, #28]
 8006c3e:	0151      	lsls	r1, r2, #5
 8006c40:	6a3a      	ldr	r2, [r7, #32]
 8006c42:	440a      	add	r2, r1
 8006c44:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c48:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006c4c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006c4e:	69fb      	ldr	r3, [r7, #28]
 8006c50:	015a      	lsls	r2, r3, #5
 8006c52:	6a3b      	ldr	r3, [r7, #32]
 8006c54:	4413      	add	r3, r2
 8006c56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c5a:	681a      	ldr	r2, [r3, #0]
 8006c5c:	7e7b      	ldrb	r3, [r7, #25]
 8006c5e:	075b      	lsls	r3, r3, #29
 8006c60:	69f9      	ldr	r1, [r7, #28]
 8006c62:	0148      	lsls	r0, r1, #5
 8006c64:	6a39      	ldr	r1, [r7, #32]
 8006c66:	4401      	add	r1, r0
 8006c68:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006c6c:	4313      	orrs	r3, r2
 8006c6e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006c70:	69fb      	ldr	r3, [r7, #28]
 8006c72:	015a      	lsls	r2, r3, #5
 8006c74:	6a3b      	ldr	r3, [r7, #32]
 8006c76:	4413      	add	r3, r2
 8006c78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006c80:	693b      	ldr	r3, [r7, #16]
 8006c82:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006c86:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	78db      	ldrb	r3, [r3, #3]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d004      	beq.n	8006c9a <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006c90:	693b      	ldr	r3, [r7, #16]
 8006c92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c96:	613b      	str	r3, [r7, #16]
 8006c98:	e003      	b.n	8006ca2 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006c9a:	693b      	ldr	r3, [r7, #16]
 8006c9c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006ca0:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006ca2:	693b      	ldr	r3, [r7, #16]
 8006ca4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006ca8:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006caa:	69fb      	ldr	r3, [r7, #28]
 8006cac:	015a      	lsls	r2, r3, #5
 8006cae:	6a3b      	ldr	r3, [r7, #32]
 8006cb0:	4413      	add	r3, r2
 8006cb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cb6:	461a      	mov	r2, r3
 8006cb8:	693b      	ldr	r3, [r7, #16]
 8006cba:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006cbc:	79fb      	ldrb	r3, [r7, #7]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d001      	beq.n	8006cc6 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	e04e      	b.n	8006d64 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	78db      	ldrb	r3, [r3, #3]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d149      	bne.n	8006d62 <USB_HC_StartXfer+0x276>
 8006cce:	68bb      	ldr	r3, [r7, #8]
 8006cd0:	695b      	ldr	r3, [r3, #20]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d045      	beq.n	8006d62 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	79db      	ldrb	r3, [r3, #7]
 8006cda:	2b03      	cmp	r3, #3
 8006cdc:	d830      	bhi.n	8006d40 <USB_HC_StartXfer+0x254>
 8006cde:	a201      	add	r2, pc, #4	; (adr r2, 8006ce4 <USB_HC_StartXfer+0x1f8>)
 8006ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ce4:	08006cf5 	.word	0x08006cf5
 8006ce8:	08006d19 	.word	0x08006d19
 8006cec:	08006cf5 	.word	0x08006cf5
 8006cf0:	08006d19 	.word	0x08006d19
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	695b      	ldr	r3, [r3, #20]
 8006cf8:	3303      	adds	r3, #3
 8006cfa:	089b      	lsrs	r3, r3, #2
 8006cfc:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006cfe:	8afa      	ldrh	r2, [r7, #22]
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d04:	b29b      	uxth	r3, r3
 8006d06:	429a      	cmp	r2, r3
 8006d08:	d91c      	bls.n	8006d44 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	699b      	ldr	r3, [r3, #24]
 8006d0e:	f043 0220 	orr.w	r2, r3, #32
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	619a      	str	r2, [r3, #24]
        }
        break;
 8006d16:	e015      	b.n	8006d44 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	695b      	ldr	r3, [r3, #20]
 8006d1c:	3303      	adds	r3, #3
 8006d1e:	089b      	lsrs	r3, r3, #2
 8006d20:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006d22:	8afa      	ldrh	r2, [r7, #22]
 8006d24:	6a3b      	ldr	r3, [r7, #32]
 8006d26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d2a:	691b      	ldr	r3, [r3, #16]
 8006d2c:	b29b      	uxth	r3, r3
 8006d2e:	429a      	cmp	r2, r3
 8006d30:	d90a      	bls.n	8006d48 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	699b      	ldr	r3, [r3, #24]
 8006d36:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	619a      	str	r2, [r3, #24]
        }
        break;
 8006d3e:	e003      	b.n	8006d48 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8006d40:	bf00      	nop
 8006d42:	e002      	b.n	8006d4a <USB_HC_StartXfer+0x25e>
        break;
 8006d44:	bf00      	nop
 8006d46:	e000      	b.n	8006d4a <USB_HC_StartXfer+0x25e>
        break;
 8006d48:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	68d9      	ldr	r1, [r3, #12]
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	785a      	ldrb	r2, [r3, #1]
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	695b      	ldr	r3, [r3, #20]
 8006d56:	b29b      	uxth	r3, r3
 8006d58:	2000      	movs	r0, #0
 8006d5a:	9000      	str	r0, [sp, #0]
 8006d5c:	68f8      	ldr	r0, [r7, #12]
 8006d5e:	f7ff fb31 	bl	80063c4 <USB_WritePacket>
  }

  return HAL_OK;
 8006d62:	2300      	movs	r3, #0
}
 8006d64:	4618      	mov	r0, r3
 8006d66:	3728      	adds	r7, #40	; 0x28
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	bd80      	pop	{r7, pc}
 8006d6c:	1ff80000 	.word	0x1ff80000

08006d70 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006d70:	b480      	push	{r7}
 8006d72:	b085      	sub	sp, #20
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d82:	695b      	ldr	r3, [r3, #20]
 8006d84:	b29b      	uxth	r3, r3
}
 8006d86:	4618      	mov	r0, r3
 8006d88:	3714      	adds	r7, #20
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d90:	4770      	bx	lr

08006d92 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006d92:	b480      	push	{r7}
 8006d94:	b089      	sub	sp, #36	; 0x24
 8006d96:	af00      	add	r7, sp, #0
 8006d98:	6078      	str	r0, [r7, #4]
 8006d9a:	460b      	mov	r3, r1
 8006d9c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8006da2:	78fb      	ldrb	r3, [r7, #3]
 8006da4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8006da6:	2300      	movs	r3, #0
 8006da8:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006daa:	69bb      	ldr	r3, [r7, #24]
 8006dac:	015a      	lsls	r2, r3, #5
 8006dae:	69fb      	ldr	r3, [r7, #28]
 8006db0:	4413      	add	r3, r2
 8006db2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	0c9b      	lsrs	r3, r3, #18
 8006dba:	f003 0303 	and.w	r3, r3, #3
 8006dbe:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006dc0:	69bb      	ldr	r3, [r7, #24]
 8006dc2:	015a      	lsls	r2, r3, #5
 8006dc4:	69fb      	ldr	r3, [r7, #28]
 8006dc6:	4413      	add	r3, r2
 8006dc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	0fdb      	lsrs	r3, r3, #31
 8006dd0:	f003 0301 	and.w	r3, r3, #1
 8006dd4:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	689b      	ldr	r3, [r3, #8]
 8006dda:	f003 0320 	and.w	r3, r3, #32
 8006dde:	2b20      	cmp	r3, #32
 8006de0:	d104      	bne.n	8006dec <USB_HC_Halt+0x5a>
 8006de2:	693b      	ldr	r3, [r7, #16]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d101      	bne.n	8006dec <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8006de8:	2300      	movs	r3, #0
 8006dea:	e0c8      	b.n	8006f7e <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006dec:	697b      	ldr	r3, [r7, #20]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d002      	beq.n	8006df8 <USB_HC_Halt+0x66>
 8006df2:	697b      	ldr	r3, [r7, #20]
 8006df4:	2b02      	cmp	r3, #2
 8006df6:	d163      	bne.n	8006ec0 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006df8:	69bb      	ldr	r3, [r7, #24]
 8006dfa:	015a      	lsls	r2, r3, #5
 8006dfc:	69fb      	ldr	r3, [r7, #28]
 8006dfe:	4413      	add	r3, r2
 8006e00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	69ba      	ldr	r2, [r7, #24]
 8006e08:	0151      	lsls	r1, r2, #5
 8006e0a:	69fa      	ldr	r2, [r7, #28]
 8006e0c:	440a      	add	r2, r1
 8006e0e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e12:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006e16:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	689b      	ldr	r3, [r3, #8]
 8006e1c:	f003 0320 	and.w	r3, r3, #32
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	f040 80ab 	bne.w	8006f7c <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e2a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d133      	bne.n	8006e9a <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006e32:	69bb      	ldr	r3, [r7, #24]
 8006e34:	015a      	lsls	r2, r3, #5
 8006e36:	69fb      	ldr	r3, [r7, #28]
 8006e38:	4413      	add	r3, r2
 8006e3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	69ba      	ldr	r2, [r7, #24]
 8006e42:	0151      	lsls	r1, r2, #5
 8006e44:	69fa      	ldr	r2, [r7, #28]
 8006e46:	440a      	add	r2, r1
 8006e48:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e4c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006e50:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006e52:	69bb      	ldr	r3, [r7, #24]
 8006e54:	015a      	lsls	r2, r3, #5
 8006e56:	69fb      	ldr	r3, [r7, #28]
 8006e58:	4413      	add	r3, r2
 8006e5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	69ba      	ldr	r2, [r7, #24]
 8006e62:	0151      	lsls	r1, r2, #5
 8006e64:	69fa      	ldr	r2, [r7, #28]
 8006e66:	440a      	add	r2, r1
 8006e68:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e6c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006e70:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	3301      	adds	r3, #1
 8006e76:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006e7e:	d81d      	bhi.n	8006ebc <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006e80:	69bb      	ldr	r3, [r7, #24]
 8006e82:	015a      	lsls	r2, r3, #5
 8006e84:	69fb      	ldr	r3, [r7, #28]
 8006e86:	4413      	add	r3, r2
 8006e88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e92:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e96:	d0ec      	beq.n	8006e72 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006e98:	e070      	b.n	8006f7c <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006e9a:	69bb      	ldr	r3, [r7, #24]
 8006e9c:	015a      	lsls	r2, r3, #5
 8006e9e:	69fb      	ldr	r3, [r7, #28]
 8006ea0:	4413      	add	r3, r2
 8006ea2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	69ba      	ldr	r2, [r7, #24]
 8006eaa:	0151      	lsls	r1, r2, #5
 8006eac:	69fa      	ldr	r2, [r7, #28]
 8006eae:	440a      	add	r2, r1
 8006eb0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006eb4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006eb8:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006eba:	e05f      	b.n	8006f7c <USB_HC_Halt+0x1ea>
            break;
 8006ebc:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006ebe:	e05d      	b.n	8006f7c <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006ec0:	69bb      	ldr	r3, [r7, #24]
 8006ec2:	015a      	lsls	r2, r3, #5
 8006ec4:	69fb      	ldr	r3, [r7, #28]
 8006ec6:	4413      	add	r3, r2
 8006ec8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	69ba      	ldr	r2, [r7, #24]
 8006ed0:	0151      	lsls	r1, r2, #5
 8006ed2:	69fa      	ldr	r2, [r7, #28]
 8006ed4:	440a      	add	r2, r1
 8006ed6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006eda:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006ede:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006ee0:	69fb      	ldr	r3, [r7, #28]
 8006ee2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ee6:	691b      	ldr	r3, [r3, #16]
 8006ee8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d133      	bne.n	8006f58 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006ef0:	69bb      	ldr	r3, [r7, #24]
 8006ef2:	015a      	lsls	r2, r3, #5
 8006ef4:	69fb      	ldr	r3, [r7, #28]
 8006ef6:	4413      	add	r3, r2
 8006ef8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	69ba      	ldr	r2, [r7, #24]
 8006f00:	0151      	lsls	r1, r2, #5
 8006f02:	69fa      	ldr	r2, [r7, #28]
 8006f04:	440a      	add	r2, r1
 8006f06:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006f0a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006f0e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006f10:	69bb      	ldr	r3, [r7, #24]
 8006f12:	015a      	lsls	r2, r3, #5
 8006f14:	69fb      	ldr	r3, [r7, #28]
 8006f16:	4413      	add	r3, r2
 8006f18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	69ba      	ldr	r2, [r7, #24]
 8006f20:	0151      	lsls	r1, r2, #5
 8006f22:	69fa      	ldr	r2, [r7, #28]
 8006f24:	440a      	add	r2, r1
 8006f26:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006f2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006f2e:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	3301      	adds	r3, #1
 8006f34:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006f3c:	d81d      	bhi.n	8006f7a <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006f3e:	69bb      	ldr	r3, [r7, #24]
 8006f40:	015a      	lsls	r2, r3, #5
 8006f42:	69fb      	ldr	r3, [r7, #28]
 8006f44:	4413      	add	r3, r2
 8006f46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006f50:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006f54:	d0ec      	beq.n	8006f30 <USB_HC_Halt+0x19e>
 8006f56:	e011      	b.n	8006f7c <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006f58:	69bb      	ldr	r3, [r7, #24]
 8006f5a:	015a      	lsls	r2, r3, #5
 8006f5c:	69fb      	ldr	r3, [r7, #28]
 8006f5e:	4413      	add	r3, r2
 8006f60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	69ba      	ldr	r2, [r7, #24]
 8006f68:	0151      	lsls	r1, r2, #5
 8006f6a:	69fa      	ldr	r2, [r7, #28]
 8006f6c:	440a      	add	r2, r1
 8006f6e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006f72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006f76:	6013      	str	r3, [r2, #0]
 8006f78:	e000      	b.n	8006f7c <USB_HC_Halt+0x1ea>
          break;
 8006f7a:	bf00      	nop
    }
  }

  return HAL_OK;
 8006f7c:	2300      	movs	r3, #0
}
 8006f7e:	4618      	mov	r0, r3
 8006f80:	3724      	adds	r7, #36	; 0x24
 8006f82:	46bd      	mov	sp, r7
 8006f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f88:	4770      	bx	lr
	...

08006f8c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	b087      	sub	sp, #28
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
 8006f94:	460b      	mov	r3, r1
 8006f96:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006f9c:	78fb      	ldrb	r3, [r7, #3]
 8006f9e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	04da      	lsls	r2, r3, #19
 8006fa8:	4b15      	ldr	r3, [pc, #84]	; (8007000 <USB_DoPing+0x74>)
 8006faa:	4013      	ands	r3, r2
 8006fac:	693a      	ldr	r2, [r7, #16]
 8006fae:	0151      	lsls	r1, r2, #5
 8006fb0:	697a      	ldr	r2, [r7, #20]
 8006fb2:	440a      	add	r2, r1
 8006fb4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006fb8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006fbc:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006fbe:	693b      	ldr	r3, [r7, #16]
 8006fc0:	015a      	lsls	r2, r3, #5
 8006fc2:	697b      	ldr	r3, [r7, #20]
 8006fc4:	4413      	add	r3, r2
 8006fc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006fce:	68bb      	ldr	r3, [r7, #8]
 8006fd0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006fd4:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006fd6:	68bb      	ldr	r3, [r7, #8]
 8006fd8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006fdc:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006fde:	693b      	ldr	r3, [r7, #16]
 8006fe0:	015a      	lsls	r2, r3, #5
 8006fe2:	697b      	ldr	r3, [r7, #20]
 8006fe4:	4413      	add	r3, r2
 8006fe6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fea:	461a      	mov	r2, r3
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006ff0:	2300      	movs	r3, #0
}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	371c      	adds	r7, #28
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffc:	4770      	bx	lr
 8006ffe:	bf00      	nop
 8007000:	1ff80000 	.word	0x1ff80000

08007004 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b088      	sub	sp, #32
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800700c:	2300      	movs	r3, #0
 800700e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8007014:	2300      	movs	r3, #0
 8007016:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007018:	6878      	ldr	r0, [r7, #4]
 800701a:	f7ff f911 	bl	8006240 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800701e:	2110      	movs	r1, #16
 8007020:	6878      	ldr	r0, [r7, #4]
 8007022:	f7ff f96b 	bl	80062fc <USB_FlushTxFifo>
 8007026:	4603      	mov	r3, r0
 8007028:	2b00      	cmp	r3, #0
 800702a:	d001      	beq.n	8007030 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800702c:	2301      	movs	r3, #1
 800702e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007030:	6878      	ldr	r0, [r7, #4]
 8007032:	f7ff f997 	bl	8006364 <USB_FlushRxFifo>
 8007036:	4603      	mov	r3, r0
 8007038:	2b00      	cmp	r3, #0
 800703a:	d001      	beq.n	8007040 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800703c:	2301      	movs	r3, #1
 800703e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007040:	2300      	movs	r3, #0
 8007042:	61bb      	str	r3, [r7, #24]
 8007044:	e01f      	b.n	8007086 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8007046:	69bb      	ldr	r3, [r7, #24]
 8007048:	015a      	lsls	r2, r3, #5
 800704a:	697b      	ldr	r3, [r7, #20]
 800704c:	4413      	add	r3, r2
 800704e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8007056:	693b      	ldr	r3, [r7, #16]
 8007058:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800705c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800705e:	693b      	ldr	r3, [r7, #16]
 8007060:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007064:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007066:	693b      	ldr	r3, [r7, #16]
 8007068:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800706c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800706e:	69bb      	ldr	r3, [r7, #24]
 8007070:	015a      	lsls	r2, r3, #5
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	4413      	add	r3, r2
 8007076:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800707a:	461a      	mov	r2, r3
 800707c:	693b      	ldr	r3, [r7, #16]
 800707e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007080:	69bb      	ldr	r3, [r7, #24]
 8007082:	3301      	adds	r3, #1
 8007084:	61bb      	str	r3, [r7, #24]
 8007086:	69bb      	ldr	r3, [r7, #24]
 8007088:	2b0f      	cmp	r3, #15
 800708a:	d9dc      	bls.n	8007046 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800708c:	2300      	movs	r3, #0
 800708e:	61bb      	str	r3, [r7, #24]
 8007090:	e034      	b.n	80070fc <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8007092:	69bb      	ldr	r3, [r7, #24]
 8007094:	015a      	lsls	r2, r3, #5
 8007096:	697b      	ldr	r3, [r7, #20]
 8007098:	4413      	add	r3, r2
 800709a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80070a2:	693b      	ldr	r3, [r7, #16]
 80070a4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80070a8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80070aa:	693b      	ldr	r3, [r7, #16]
 80070ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80070b0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80070b2:	693b      	ldr	r3, [r7, #16]
 80070b4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80070b8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80070ba:	69bb      	ldr	r3, [r7, #24]
 80070bc:	015a      	lsls	r2, r3, #5
 80070be:	697b      	ldr	r3, [r7, #20]
 80070c0:	4413      	add	r3, r2
 80070c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070c6:	461a      	mov	r2, r3
 80070c8:	693b      	ldr	r3, [r7, #16]
 80070ca:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	3301      	adds	r3, #1
 80070d0:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80070d8:	d80c      	bhi.n	80070f4 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80070da:	69bb      	ldr	r3, [r7, #24]
 80070dc:	015a      	lsls	r2, r3, #5
 80070de:	697b      	ldr	r3, [r7, #20]
 80070e0:	4413      	add	r3, r2
 80070e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80070ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80070f0:	d0ec      	beq.n	80070cc <USB_StopHost+0xc8>
 80070f2:	e000      	b.n	80070f6 <USB_StopHost+0xf2>
        break;
 80070f4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80070f6:	69bb      	ldr	r3, [r7, #24]
 80070f8:	3301      	adds	r3, #1
 80070fa:	61bb      	str	r3, [r7, #24]
 80070fc:	69bb      	ldr	r3, [r7, #24]
 80070fe:	2b0f      	cmp	r3, #15
 8007100:	d9c7      	bls.n	8007092 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8007102:	697b      	ldr	r3, [r7, #20]
 8007104:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007108:	461a      	mov	r2, r3
 800710a:	f04f 33ff 	mov.w	r3, #4294967295
 800710e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	f04f 32ff 	mov.w	r2, #4294967295
 8007116:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8007118:	6878      	ldr	r0, [r7, #4]
 800711a:	f7ff f880 	bl	800621e <USB_EnableGlobalInt>

  return ret;
 800711e:	7ffb      	ldrb	r3, [r7, #31]
}
 8007120:	4618      	mov	r0, r3
 8007122:	3720      	adds	r7, #32
 8007124:	46bd      	mov	sp, r7
 8007126:	bd80      	pop	{r7, pc}

08007128 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8007128:	b590      	push	{r4, r7, lr}
 800712a:	b089      	sub	sp, #36	; 0x24
 800712c:	af04      	add	r7, sp, #16
 800712e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8007130:	2301      	movs	r3, #1
 8007132:	2202      	movs	r2, #2
 8007134:	2102      	movs	r1, #2
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	f000 fcb8 	bl	8007aac <USBH_FindInterface>
 800713c:	4603      	mov	r3, r0
 800713e:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007140:	7bfb      	ldrb	r3, [r7, #15]
 8007142:	2bff      	cmp	r3, #255	; 0xff
 8007144:	d002      	beq.n	800714c <USBH_CDC_InterfaceInit+0x24>
 8007146:	7bfb      	ldrb	r3, [r7, #15]
 8007148:	2b01      	cmp	r3, #1
 800714a:	d901      	bls.n	8007150 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800714c:	2302      	movs	r3, #2
 800714e:	e13d      	b.n	80073cc <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8007150:	7bfb      	ldrb	r3, [r7, #15]
 8007152:	4619      	mov	r1, r3
 8007154:	6878      	ldr	r0, [r7, #4]
 8007156:	f000 fc8d 	bl	8007a74 <USBH_SelectInterface>
 800715a:	4603      	mov	r3, r0
 800715c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800715e:	7bbb      	ldrb	r3, [r7, #14]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d001      	beq.n	8007168 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8007164:	2302      	movs	r3, #2
 8007166:	e131      	b.n	80073cc <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800716e:	2050      	movs	r0, #80	; 0x50
 8007170:	f004 fe34 	bl	800bddc <malloc>
 8007174:	4603      	mov	r3, r0
 8007176:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800717e:	69db      	ldr	r3, [r3, #28]
 8007180:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8007182:	68bb      	ldr	r3, [r7, #8]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d101      	bne.n	800718c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8007188:	2302      	movs	r3, #2
 800718a:	e11f      	b.n	80073cc <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800718c:	2250      	movs	r2, #80	; 0x50
 800718e:	2100      	movs	r1, #0
 8007190:	68b8      	ldr	r0, [r7, #8]
 8007192:	f004 fe41 	bl	800be18 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8007196:	7bfb      	ldrb	r3, [r7, #15]
 8007198:	687a      	ldr	r2, [r7, #4]
 800719a:	211a      	movs	r1, #26
 800719c:	fb01 f303 	mul.w	r3, r1, r3
 80071a0:	4413      	add	r3, r2
 80071a2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80071a6:	781b      	ldrb	r3, [r3, #0]
 80071a8:	b25b      	sxtb	r3, r3
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	da15      	bge.n	80071da <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80071ae:	7bfb      	ldrb	r3, [r7, #15]
 80071b0:	687a      	ldr	r2, [r7, #4]
 80071b2:	211a      	movs	r1, #26
 80071b4:	fb01 f303 	mul.w	r3, r1, r3
 80071b8:	4413      	add	r3, r2
 80071ba:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80071be:	781a      	ldrb	r2, [r3, #0]
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80071c4:	7bfb      	ldrb	r3, [r7, #15]
 80071c6:	687a      	ldr	r2, [r7, #4]
 80071c8:	211a      	movs	r1, #26
 80071ca:	fb01 f303 	mul.w	r3, r1, r3
 80071ce:	4413      	add	r3, r2
 80071d0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80071d4:	881a      	ldrh	r2, [r3, #0]
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	785b      	ldrb	r3, [r3, #1]
 80071de:	4619      	mov	r1, r3
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	f002 f988 	bl	80094f6 <USBH_AllocPipe>
 80071e6:	4603      	mov	r3, r0
 80071e8:	461a      	mov	r2, r3
 80071ea:	68bb      	ldr	r3, [r7, #8]
 80071ec:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	7819      	ldrb	r1, [r3, #0]
 80071f2:	68bb      	ldr	r3, [r7, #8]
 80071f4:	7858      	ldrb	r0, [r3, #1]
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007202:	68ba      	ldr	r2, [r7, #8]
 8007204:	8952      	ldrh	r2, [r2, #10]
 8007206:	9202      	str	r2, [sp, #8]
 8007208:	2203      	movs	r2, #3
 800720a:	9201      	str	r2, [sp, #4]
 800720c:	9300      	str	r3, [sp, #0]
 800720e:	4623      	mov	r3, r4
 8007210:	4602      	mov	r2, r0
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f002 f940 	bl	8009498 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8007218:	68bb      	ldr	r3, [r7, #8]
 800721a:	781b      	ldrb	r3, [r3, #0]
 800721c:	2200      	movs	r2, #0
 800721e:	4619      	mov	r1, r3
 8007220:	6878      	ldr	r0, [r7, #4]
 8007222:	f004 fd2d 	bl	800bc80 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8007226:	2300      	movs	r3, #0
 8007228:	2200      	movs	r2, #0
 800722a:	210a      	movs	r1, #10
 800722c:	6878      	ldr	r0, [r7, #4]
 800722e:	f000 fc3d 	bl	8007aac <USBH_FindInterface>
 8007232:	4603      	mov	r3, r0
 8007234:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007236:	7bfb      	ldrb	r3, [r7, #15]
 8007238:	2bff      	cmp	r3, #255	; 0xff
 800723a:	d002      	beq.n	8007242 <USBH_CDC_InterfaceInit+0x11a>
 800723c:	7bfb      	ldrb	r3, [r7, #15]
 800723e:	2b01      	cmp	r3, #1
 8007240:	d901      	bls.n	8007246 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007242:	2302      	movs	r3, #2
 8007244:	e0c2      	b.n	80073cc <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8007246:	7bfb      	ldrb	r3, [r7, #15]
 8007248:	687a      	ldr	r2, [r7, #4]
 800724a:	211a      	movs	r1, #26
 800724c:	fb01 f303 	mul.w	r3, r1, r3
 8007250:	4413      	add	r3, r2
 8007252:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007256:	781b      	ldrb	r3, [r3, #0]
 8007258:	b25b      	sxtb	r3, r3
 800725a:	2b00      	cmp	r3, #0
 800725c:	da16      	bge.n	800728c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800725e:	7bfb      	ldrb	r3, [r7, #15]
 8007260:	687a      	ldr	r2, [r7, #4]
 8007262:	211a      	movs	r1, #26
 8007264:	fb01 f303 	mul.w	r3, r1, r3
 8007268:	4413      	add	r3, r2
 800726a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800726e:	781a      	ldrb	r2, [r3, #0]
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007274:	7bfb      	ldrb	r3, [r7, #15]
 8007276:	687a      	ldr	r2, [r7, #4]
 8007278:	211a      	movs	r1, #26
 800727a:	fb01 f303 	mul.w	r3, r1, r3
 800727e:	4413      	add	r3, r2
 8007280:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007284:	881a      	ldrh	r2, [r3, #0]
 8007286:	68bb      	ldr	r3, [r7, #8]
 8007288:	835a      	strh	r2, [r3, #26]
 800728a:	e015      	b.n	80072b8 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800728c:	7bfb      	ldrb	r3, [r7, #15]
 800728e:	687a      	ldr	r2, [r7, #4]
 8007290:	211a      	movs	r1, #26
 8007292:	fb01 f303 	mul.w	r3, r1, r3
 8007296:	4413      	add	r3, r2
 8007298:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800729c:	781a      	ldrb	r2, [r3, #0]
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80072a2:	7bfb      	ldrb	r3, [r7, #15]
 80072a4:	687a      	ldr	r2, [r7, #4]
 80072a6:	211a      	movs	r1, #26
 80072a8:	fb01 f303 	mul.w	r3, r1, r3
 80072ac:	4413      	add	r3, r2
 80072ae:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80072b2:	881a      	ldrh	r2, [r3, #0]
 80072b4:	68bb      	ldr	r3, [r7, #8]
 80072b6:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80072b8:	7bfb      	ldrb	r3, [r7, #15]
 80072ba:	687a      	ldr	r2, [r7, #4]
 80072bc:	211a      	movs	r1, #26
 80072be:	fb01 f303 	mul.w	r3, r1, r3
 80072c2:	4413      	add	r3, r2
 80072c4:	f203 3356 	addw	r3, r3, #854	; 0x356
 80072c8:	781b      	ldrb	r3, [r3, #0]
 80072ca:	b25b      	sxtb	r3, r3
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	da16      	bge.n	80072fe <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80072d0:	7bfb      	ldrb	r3, [r7, #15]
 80072d2:	687a      	ldr	r2, [r7, #4]
 80072d4:	211a      	movs	r1, #26
 80072d6:	fb01 f303 	mul.w	r3, r1, r3
 80072da:	4413      	add	r3, r2
 80072dc:	f203 3356 	addw	r3, r3, #854	; 0x356
 80072e0:	781a      	ldrb	r2, [r3, #0]
 80072e2:	68bb      	ldr	r3, [r7, #8]
 80072e4:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80072e6:	7bfb      	ldrb	r3, [r7, #15]
 80072e8:	687a      	ldr	r2, [r7, #4]
 80072ea:	211a      	movs	r1, #26
 80072ec:	fb01 f303 	mul.w	r3, r1, r3
 80072f0:	4413      	add	r3, r2
 80072f2:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80072f6:	881a      	ldrh	r2, [r3, #0]
 80072f8:	68bb      	ldr	r3, [r7, #8]
 80072fa:	835a      	strh	r2, [r3, #26]
 80072fc:	e015      	b.n	800732a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80072fe:	7bfb      	ldrb	r3, [r7, #15]
 8007300:	687a      	ldr	r2, [r7, #4]
 8007302:	211a      	movs	r1, #26
 8007304:	fb01 f303 	mul.w	r3, r1, r3
 8007308:	4413      	add	r3, r2
 800730a:	f203 3356 	addw	r3, r3, #854	; 0x356
 800730e:	781a      	ldrb	r2, [r3, #0]
 8007310:	68bb      	ldr	r3, [r7, #8]
 8007312:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007314:	7bfb      	ldrb	r3, [r7, #15]
 8007316:	687a      	ldr	r2, [r7, #4]
 8007318:	211a      	movs	r1, #26
 800731a:	fb01 f303 	mul.w	r3, r1, r3
 800731e:	4413      	add	r3, r2
 8007320:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007324:	881a      	ldrh	r2, [r3, #0]
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	7b9b      	ldrb	r3, [r3, #14]
 800732e:	4619      	mov	r1, r3
 8007330:	6878      	ldr	r0, [r7, #4]
 8007332:	f002 f8e0 	bl	80094f6 <USBH_AllocPipe>
 8007336:	4603      	mov	r3, r0
 8007338:	461a      	mov	r2, r3
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800733e:	68bb      	ldr	r3, [r7, #8]
 8007340:	7bdb      	ldrb	r3, [r3, #15]
 8007342:	4619      	mov	r1, r3
 8007344:	6878      	ldr	r0, [r7, #4]
 8007346:	f002 f8d6 	bl	80094f6 <USBH_AllocPipe>
 800734a:	4603      	mov	r3, r0
 800734c:	461a      	mov	r2, r3
 800734e:	68bb      	ldr	r3, [r7, #8]
 8007350:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8007352:	68bb      	ldr	r3, [r7, #8]
 8007354:	7b59      	ldrb	r1, [r3, #13]
 8007356:	68bb      	ldr	r3, [r7, #8]
 8007358:	7b98      	ldrb	r0, [r3, #14]
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007366:	68ba      	ldr	r2, [r7, #8]
 8007368:	8b12      	ldrh	r2, [r2, #24]
 800736a:	9202      	str	r2, [sp, #8]
 800736c:	2202      	movs	r2, #2
 800736e:	9201      	str	r2, [sp, #4]
 8007370:	9300      	str	r3, [sp, #0]
 8007372:	4623      	mov	r3, r4
 8007374:	4602      	mov	r2, r0
 8007376:	6878      	ldr	r0, [r7, #4]
 8007378:	f002 f88e 	bl	8009498 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800737c:	68bb      	ldr	r3, [r7, #8]
 800737e:	7b19      	ldrb	r1, [r3, #12]
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	7bd8      	ldrb	r0, [r3, #15]
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007390:	68ba      	ldr	r2, [r7, #8]
 8007392:	8b52      	ldrh	r2, [r2, #26]
 8007394:	9202      	str	r2, [sp, #8]
 8007396:	2202      	movs	r2, #2
 8007398:	9201      	str	r2, [sp, #4]
 800739a:	9300      	str	r3, [sp, #0]
 800739c:	4623      	mov	r3, r4
 800739e:	4602      	mov	r2, r0
 80073a0:	6878      	ldr	r0, [r7, #4]
 80073a2:	f002 f879 	bl	8009498 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	2200      	movs	r2, #0
 80073aa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80073ae:	68bb      	ldr	r3, [r7, #8]
 80073b0:	7b5b      	ldrb	r3, [r3, #13]
 80073b2:	2200      	movs	r2, #0
 80073b4:	4619      	mov	r1, r3
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f004 fc62 	bl	800bc80 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	7b1b      	ldrb	r3, [r3, #12]
 80073c0:	2200      	movs	r2, #0
 80073c2:	4619      	mov	r1, r3
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	f004 fc5b 	bl	800bc80 <USBH_LL_SetToggle>

  return USBH_OK;
 80073ca:	2300      	movs	r3, #0
}
 80073cc:	4618      	mov	r0, r3
 80073ce:	3714      	adds	r7, #20
 80073d0:	46bd      	mov	sp, r7
 80073d2:	bd90      	pop	{r4, r7, pc}

080073d4 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b084      	sub	sp, #16
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80073e2:	69db      	ldr	r3, [r3, #28]
 80073e4:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	781b      	ldrb	r3, [r3, #0]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d00e      	beq.n	800740c <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	781b      	ldrb	r3, [r3, #0]
 80073f2:	4619      	mov	r1, r3
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	f002 f86e 	bl	80094d6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	781b      	ldrb	r3, [r3, #0]
 80073fe:	4619      	mov	r1, r3
 8007400:	6878      	ldr	r0, [r7, #4]
 8007402:	f002 f899 	bl	8009538 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	2200      	movs	r2, #0
 800740a:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	7b1b      	ldrb	r3, [r3, #12]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d00e      	beq.n	8007432 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	7b1b      	ldrb	r3, [r3, #12]
 8007418:	4619      	mov	r1, r3
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	f002 f85b 	bl	80094d6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	7b1b      	ldrb	r3, [r3, #12]
 8007424:	4619      	mov	r1, r3
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	f002 f886 	bl	8009538 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	2200      	movs	r2, #0
 8007430:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	7b5b      	ldrb	r3, [r3, #13]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d00e      	beq.n	8007458 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	7b5b      	ldrb	r3, [r3, #13]
 800743e:	4619      	mov	r1, r3
 8007440:	6878      	ldr	r0, [r7, #4]
 8007442:	f002 f848 	bl	80094d6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	7b5b      	ldrb	r3, [r3, #13]
 800744a:	4619      	mov	r1, r3
 800744c:	6878      	ldr	r0, [r7, #4]
 800744e:	f002 f873 	bl	8009538 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	2200      	movs	r2, #0
 8007456:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800745e:	69db      	ldr	r3, [r3, #28]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d00b      	beq.n	800747c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800746a:	69db      	ldr	r3, [r3, #28]
 800746c:	4618      	mov	r0, r3
 800746e:	f004 fcbd 	bl	800bdec <free>
    phost->pActiveClass->pData = 0U;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007478:	2200      	movs	r2, #0
 800747a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800747c:	2300      	movs	r3, #0
}
 800747e:	4618      	mov	r0, r3
 8007480:	3710      	adds	r7, #16
 8007482:	46bd      	mov	sp, r7
 8007484:	bd80      	pop	{r7, pc}

08007486 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8007486:	b580      	push	{r7, lr}
 8007488:	b084      	sub	sp, #16
 800748a:	af00      	add	r7, sp, #0
 800748c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007494:	69db      	ldr	r3, [r3, #28]
 8007496:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	3340      	adds	r3, #64	; 0x40
 800749c:	4619      	mov	r1, r3
 800749e:	6878      	ldr	r0, [r7, #4]
 80074a0:	f000 f8b1 	bl	8007606 <GetLineCoding>
 80074a4:	4603      	mov	r3, r0
 80074a6:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80074a8:	7afb      	ldrb	r3, [r7, #11]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d105      	bne.n	80074ba <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80074b4:	2102      	movs	r1, #2
 80074b6:	6878      	ldr	r0, [r7, #4]
 80074b8:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80074ba:	7afb      	ldrb	r3, [r7, #11]
}
 80074bc:	4618      	mov	r0, r3
 80074be:	3710      	adds	r7, #16
 80074c0:	46bd      	mov	sp, r7
 80074c2:	bd80      	pop	{r7, pc}

080074c4 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b084      	sub	sp, #16
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80074cc:	2301      	movs	r3, #1
 80074ce:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80074d0:	2300      	movs	r3, #0
 80074d2:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80074da:	69db      	ldr	r3, [r3, #28]
 80074dc:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80074e4:	2b04      	cmp	r3, #4
 80074e6:	d877      	bhi.n	80075d8 <USBH_CDC_Process+0x114>
 80074e8:	a201      	add	r2, pc, #4	; (adr r2, 80074f0 <USBH_CDC_Process+0x2c>)
 80074ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074ee:	bf00      	nop
 80074f0:	08007505 	.word	0x08007505
 80074f4:	0800750b 	.word	0x0800750b
 80074f8:	0800753b 	.word	0x0800753b
 80074fc:	080075af 	.word	0x080075af
 8007500:	080075bd 	.word	0x080075bd
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8007504:	2300      	movs	r3, #0
 8007506:	73fb      	strb	r3, [r7, #15]
      break;
 8007508:	e06d      	b.n	80075e6 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800750a:	68bb      	ldr	r3, [r7, #8]
 800750c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800750e:	4619      	mov	r1, r3
 8007510:	6878      	ldr	r0, [r7, #4]
 8007512:	f000 f897 	bl	8007644 <SetLineCoding>
 8007516:	4603      	mov	r3, r0
 8007518:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800751a:	7bbb      	ldrb	r3, [r7, #14]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d104      	bne.n	800752a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	2202      	movs	r2, #2
 8007524:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007528:	e058      	b.n	80075dc <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800752a:	7bbb      	ldrb	r3, [r7, #14]
 800752c:	2b01      	cmp	r3, #1
 800752e:	d055      	beq.n	80075dc <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	2204      	movs	r2, #4
 8007534:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007538:	e050      	b.n	80075dc <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800753a:	68bb      	ldr	r3, [r7, #8]
 800753c:	3340      	adds	r3, #64	; 0x40
 800753e:	4619      	mov	r1, r3
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	f000 f860 	bl	8007606 <GetLineCoding>
 8007546:	4603      	mov	r3, r0
 8007548:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800754a:	7bbb      	ldrb	r3, [r7, #14]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d126      	bne.n	800759e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8007550:	68bb      	ldr	r3, [r7, #8]
 8007552:	2200      	movs	r2, #0
 8007554:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007562:	791b      	ldrb	r3, [r3, #4]
 8007564:	429a      	cmp	r2, r3
 8007566:	d13b      	bne.n	80075e0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007568:	68bb      	ldr	r3, [r7, #8]
 800756a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007572:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007574:	429a      	cmp	r2, r3
 8007576:	d133      	bne.n	80075e0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007578:	68bb      	ldr	r3, [r7, #8]
 800757a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800757e:	68bb      	ldr	r3, [r7, #8]
 8007580:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007582:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007584:	429a      	cmp	r2, r3
 8007586:	d12b      	bne.n	80075e0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800758c:	68bb      	ldr	r3, [r7, #8]
 800758e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007590:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007592:	429a      	cmp	r2, r3
 8007594:	d124      	bne.n	80075e0 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8007596:	6878      	ldr	r0, [r7, #4]
 8007598:	f000 f982 	bl	80078a0 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800759c:	e020      	b.n	80075e0 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800759e:	7bbb      	ldrb	r3, [r7, #14]
 80075a0:	2b01      	cmp	r3, #1
 80075a2:	d01d      	beq.n	80075e0 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80075a4:	68bb      	ldr	r3, [r7, #8]
 80075a6:	2204      	movs	r2, #4
 80075a8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80075ac:	e018      	b.n	80075e0 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80075ae:	6878      	ldr	r0, [r7, #4]
 80075b0:	f000 f867 	bl	8007682 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	f000 f8f6 	bl	80077a6 <CDC_ProcessReception>
      break;
 80075ba:	e014      	b.n	80075e6 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80075bc:	2100      	movs	r1, #0
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f001 f95b 	bl	800887a <USBH_ClrFeature>
 80075c4:	4603      	mov	r3, r0
 80075c6:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80075c8:	7bbb      	ldrb	r3, [r7, #14]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d10a      	bne.n	80075e4 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80075ce:	68bb      	ldr	r3, [r7, #8]
 80075d0:	2200      	movs	r2, #0
 80075d2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80075d6:	e005      	b.n	80075e4 <USBH_CDC_Process+0x120>

    default:
      break;
 80075d8:	bf00      	nop
 80075da:	e004      	b.n	80075e6 <USBH_CDC_Process+0x122>
      break;
 80075dc:	bf00      	nop
 80075de:	e002      	b.n	80075e6 <USBH_CDC_Process+0x122>
      break;
 80075e0:	bf00      	nop
 80075e2:	e000      	b.n	80075e6 <USBH_CDC_Process+0x122>
      break;
 80075e4:	bf00      	nop

  }

  return status;
 80075e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80075e8:	4618      	mov	r0, r3
 80075ea:	3710      	adds	r7, #16
 80075ec:	46bd      	mov	sp, r7
 80075ee:	bd80      	pop	{r7, pc}

080075f0 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80075f0:	b480      	push	{r7}
 80075f2:	b083      	sub	sp, #12
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80075f8:	2300      	movs	r3, #0
}
 80075fa:	4618      	mov	r0, r3
 80075fc:	370c      	adds	r7, #12
 80075fe:	46bd      	mov	sp, r7
 8007600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007604:	4770      	bx	lr

08007606 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8007606:	b580      	push	{r7, lr}
 8007608:	b082      	sub	sp, #8
 800760a:	af00      	add	r7, sp, #0
 800760c:	6078      	str	r0, [r7, #4]
 800760e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	22a1      	movs	r2, #161	; 0xa1
 8007614:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2221      	movs	r2, #33	; 0x21
 800761a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2200      	movs	r2, #0
 8007620:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2200      	movs	r2, #0
 8007626:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2207      	movs	r2, #7
 800762c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	2207      	movs	r2, #7
 8007632:	4619      	mov	r1, r3
 8007634:	6878      	ldr	r0, [r7, #4]
 8007636:	f001 fbed 	bl	8008e14 <USBH_CtlReq>
 800763a:	4603      	mov	r3, r0
}
 800763c:	4618      	mov	r0, r3
 800763e:	3708      	adds	r7, #8
 8007640:	46bd      	mov	sp, r7
 8007642:	bd80      	pop	{r7, pc}

08007644 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b082      	sub	sp, #8
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
 800764c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2221      	movs	r2, #33	; 0x21
 8007652:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2220      	movs	r2, #32
 8007658:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2200      	movs	r2, #0
 800765e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2200      	movs	r2, #0
 8007664:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2207      	movs	r2, #7
 800766a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	2207      	movs	r2, #7
 8007670:	4619      	mov	r1, r3
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	f001 fbce 	bl	8008e14 <USBH_CtlReq>
 8007678:	4603      	mov	r3, r0
}
 800767a:	4618      	mov	r0, r3
 800767c:	3708      	adds	r7, #8
 800767e:	46bd      	mov	sp, r7
 8007680:	bd80      	pop	{r7, pc}

08007682 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8007682:	b580      	push	{r7, lr}
 8007684:	b086      	sub	sp, #24
 8007686:	af02      	add	r7, sp, #8
 8007688:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007690:	69db      	ldr	r3, [r3, #28]
 8007692:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007694:	2300      	movs	r3, #0
 8007696:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800769e:	2b01      	cmp	r3, #1
 80076a0:	d002      	beq.n	80076a8 <CDC_ProcessTransmission+0x26>
 80076a2:	2b02      	cmp	r3, #2
 80076a4:	d023      	beq.n	80076ee <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80076a6:	e07a      	b.n	800779e <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ac:	68fa      	ldr	r2, [r7, #12]
 80076ae:	8b12      	ldrh	r2, [r2, #24]
 80076b0:	4293      	cmp	r3, r2
 80076b2:	d90b      	bls.n	80076cc <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	69d9      	ldr	r1, [r3, #28]
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	8b1a      	ldrh	r2, [r3, #24]
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	7b5b      	ldrb	r3, [r3, #13]
 80076c0:	2001      	movs	r0, #1
 80076c2:	9000      	str	r0, [sp, #0]
 80076c4:	6878      	ldr	r0, [r7, #4]
 80076c6:	f001 fea4 	bl	8009412 <USBH_BulkSendData>
 80076ca:	e00b      	b.n	80076e4 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 80076d4:	b29a      	uxth	r2, r3
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	7b5b      	ldrb	r3, [r3, #13]
 80076da:	2001      	movs	r0, #1
 80076dc:	9000      	str	r0, [sp, #0]
 80076de:	6878      	ldr	r0, [r7, #4]
 80076e0:	f001 fe97 	bl	8009412 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	2202      	movs	r2, #2
 80076e8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80076ec:	e057      	b.n	800779e <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	7b5b      	ldrb	r3, [r3, #13]
 80076f2:	4619      	mov	r1, r3
 80076f4:	6878      	ldr	r0, [r7, #4]
 80076f6:	f004 fa99 	bl	800bc2c <USBH_LL_GetURBState>
 80076fa:	4603      	mov	r3, r0
 80076fc:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80076fe:	7afb      	ldrb	r3, [r7, #11]
 8007700:	2b01      	cmp	r3, #1
 8007702:	d136      	bne.n	8007772 <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007708:	68fa      	ldr	r2, [r7, #12]
 800770a:	8b12      	ldrh	r2, [r2, #24]
 800770c:	4293      	cmp	r3, r2
 800770e:	d90e      	bls.n	800772e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007714:	68fa      	ldr	r2, [r7, #12]
 8007716:	8b12      	ldrh	r2, [r2, #24]
 8007718:	1a9a      	subs	r2, r3, r2
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	69db      	ldr	r3, [r3, #28]
 8007722:	68fa      	ldr	r2, [r7, #12]
 8007724:	8b12      	ldrh	r2, [r2, #24]
 8007726:	441a      	add	r2, r3
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	61da      	str	r2, [r3, #28]
 800772c:	e002      	b.n	8007734 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	2200      	movs	r2, #0
 8007732:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007738:	2b00      	cmp	r3, #0
 800773a:	d004      	beq.n	8007746 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	2201      	movs	r2, #1
 8007740:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8007744:	e006      	b.n	8007754 <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	2200      	movs	r2, #0
 800774a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	f000 f892 	bl	8007878 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2204      	movs	r2, #4
 8007758:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007768:	2200      	movs	r2, #0
 800776a:	4619      	mov	r1, r3
 800776c:	f001 ffd8 	bl	8009720 <osMessagePut>
      break;
 8007770:	e014      	b.n	800779c <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 8007772:	7afb      	ldrb	r3, [r7, #11]
 8007774:	2b02      	cmp	r3, #2
 8007776:	d111      	bne.n	800779c <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	2201      	movs	r2, #1
 800777c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2204      	movs	r2, #4
 8007784:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007794:	2200      	movs	r2, #0
 8007796:	4619      	mov	r1, r3
 8007798:	f001 ffc2 	bl	8009720 <osMessagePut>
      break;
 800779c:	bf00      	nop
  }
}
 800779e:	bf00      	nop
 80077a0:	3710      	adds	r7, #16
 80077a2:	46bd      	mov	sp, r7
 80077a4:	bd80      	pop	{r7, pc}

080077a6 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80077a6:	b580      	push	{r7, lr}
 80077a8:	b086      	sub	sp, #24
 80077aa:	af00      	add	r7, sp, #0
 80077ac:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80077b4:	69db      	ldr	r3, [r3, #28]
 80077b6:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80077b8:	2300      	movs	r3, #0
 80077ba:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80077bc:	697b      	ldr	r3, [r7, #20]
 80077be:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80077c2:	2b03      	cmp	r3, #3
 80077c4:	d002      	beq.n	80077cc <CDC_ProcessReception+0x26>
 80077c6:	2b04      	cmp	r3, #4
 80077c8:	d00e      	beq.n	80077e8 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80077ca:	e051      	b.n	8007870 <CDC_ProcessReception+0xca>
      (void)USBH_BulkReceiveData(phost,
 80077cc:	697b      	ldr	r3, [r7, #20]
 80077ce:	6a19      	ldr	r1, [r3, #32]
 80077d0:	697b      	ldr	r3, [r7, #20]
 80077d2:	8b5a      	ldrh	r2, [r3, #26]
 80077d4:	697b      	ldr	r3, [r7, #20]
 80077d6:	7b1b      	ldrb	r3, [r3, #12]
 80077d8:	6878      	ldr	r0, [r7, #4]
 80077da:	f001 fe3f 	bl	800945c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80077de:	697b      	ldr	r3, [r7, #20]
 80077e0:	2204      	movs	r2, #4
 80077e2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80077e6:	e043      	b.n	8007870 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80077e8:	697b      	ldr	r3, [r7, #20]
 80077ea:	7b1b      	ldrb	r3, [r3, #12]
 80077ec:	4619      	mov	r1, r3
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	f004 fa1c 	bl	800bc2c <USBH_LL_GetURBState>
 80077f4:	4603      	mov	r3, r0
 80077f6:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80077f8:	7cfb      	ldrb	r3, [r7, #19]
 80077fa:	2b01      	cmp	r3, #1
 80077fc:	d137      	bne.n	800786e <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80077fe:	697b      	ldr	r3, [r7, #20]
 8007800:	7b1b      	ldrb	r3, [r3, #12]
 8007802:	4619      	mov	r1, r3
 8007804:	6878      	ldr	r0, [r7, #4]
 8007806:	f004 f97f 	bl	800bb08 <USBH_LL_GetLastXferSize>
 800780a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800780c:	697b      	ldr	r3, [r7, #20]
 800780e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007810:	68fa      	ldr	r2, [r7, #12]
 8007812:	429a      	cmp	r2, r3
 8007814:	d016      	beq.n	8007844 <CDC_ProcessReception+0x9e>
 8007816:	697b      	ldr	r3, [r7, #20]
 8007818:	8b5b      	ldrh	r3, [r3, #26]
 800781a:	461a      	mov	r2, r3
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	4293      	cmp	r3, r2
 8007820:	d910      	bls.n	8007844 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8007822:	697b      	ldr	r3, [r7, #20]
 8007824:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	1ad2      	subs	r2, r2, r3
 800782a:	697b      	ldr	r3, [r7, #20]
 800782c:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800782e:	697b      	ldr	r3, [r7, #20]
 8007830:	6a1a      	ldr	r2, [r3, #32]
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	441a      	add	r2, r3
 8007836:	697b      	ldr	r3, [r7, #20]
 8007838:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800783a:	697b      	ldr	r3, [r7, #20]
 800783c:	2203      	movs	r2, #3
 800783e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 8007842:	e006      	b.n	8007852 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007844:	697b      	ldr	r3, [r7, #20]
 8007846:	2200      	movs	r2, #0
 8007848:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	f000 f81d 	bl	800788c <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2204      	movs	r2, #4
 8007856:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007866:	2200      	movs	r2, #0
 8007868:	4619      	mov	r1, r3
 800786a:	f001 ff59 	bl	8009720 <osMessagePut>
      break;
 800786e:	bf00      	nop
  }
}
 8007870:	bf00      	nop
 8007872:	3718      	adds	r7, #24
 8007874:	46bd      	mov	sp, r7
 8007876:	bd80      	pop	{r7, pc}

08007878 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007878:	b480      	push	{r7}
 800787a:	b083      	sub	sp, #12
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007880:	bf00      	nop
 8007882:	370c      	adds	r7, #12
 8007884:	46bd      	mov	sp, r7
 8007886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788a:	4770      	bx	lr

0800788c <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800788c:	b480      	push	{r7}
 800788e:	b083      	sub	sp, #12
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007894:	bf00      	nop
 8007896:	370c      	adds	r7, #12
 8007898:	46bd      	mov	sp, r7
 800789a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789e:	4770      	bx	lr

080078a0 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80078a0:	b480      	push	{r7}
 80078a2:	b083      	sub	sp, #12
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80078a8:	bf00      	nop
 80078aa:	370c      	adds	r7, #12
 80078ac:	46bd      	mov	sp, r7
 80078ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b2:	4770      	bx	lr

080078b4 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 80078b4:	b5b0      	push	{r4, r5, r7, lr}
 80078b6:	b090      	sub	sp, #64	; 0x40
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	60f8      	str	r0, [r7, #12]
 80078bc:	60b9      	str	r1, [r7, #8]
 80078be:	4613      	mov	r3, r2
 80078c0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d101      	bne.n	80078cc <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80078c8:	2302      	movs	r3, #2
 80078ca:	e04d      	b.n	8007968 <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	79fa      	ldrb	r2, [r7, #7]
 80078d0:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	2200      	movs	r2, #0
 80078d8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	2200      	movs	r2, #0
 80078e0:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80078e4:	68f8      	ldr	r0, [r7, #12]
 80078e6:	f000 f847 	bl	8007978 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	2200      	movs	r2, #0
 80078ee:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	2200      	movs	r2, #0
 80078f6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	2200      	movs	r2, #0
 80078fe:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	2200      	movs	r2, #0
 8007906:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800790a:	68bb      	ldr	r3, [r7, #8]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d003      	beq.n	8007918 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	68ba      	ldr	r2, [r7, #8]
 8007914:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 8007918:	4b15      	ldr	r3, [pc, #84]	; (8007970 <USBH_Init+0xbc>)
 800791a:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800791e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007920:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 8007924:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007928:	2100      	movs	r1, #0
 800792a:	4618      	mov	r0, r3
 800792c:	f001 fed0 	bl	80096d0 <osMessageCreate>
 8007930:	4602      	mov	r2, r0
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 8007938:	4b0e      	ldr	r3, [pc, #56]	; (8007974 <USBH_Init+0xc0>)
 800793a:	f107 0414 	add.w	r4, r7, #20
 800793e:	461d      	mov	r5, r3
 8007940:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007942:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007944:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007948:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 800794c:	f107 0314 	add.w	r3, r7, #20
 8007950:	68f9      	ldr	r1, [r7, #12]
 8007952:	4618      	mov	r0, r3
 8007954:	f001 fe5c 	bl	8009610 <osThreadCreate>
 8007958:	4602      	mov	r2, r0
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8007960:	68f8      	ldr	r0, [r7, #12]
 8007962:	f004 f813 	bl	800b98c <USBH_LL_Init>

  return USBH_OK;
 8007966:	2300      	movs	r3, #0
}
 8007968:	4618      	mov	r0, r3
 800796a:	3740      	adds	r7, #64	; 0x40
 800796c:	46bd      	mov	sp, r7
 800796e:	bdb0      	pop	{r4, r5, r7, pc}
 8007970:	0800c074 	.word	0x0800c074
 8007974:	0800c084 	.word	0x0800c084

08007978 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007978:	b480      	push	{r7}
 800797a:	b085      	sub	sp, #20
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007980:	2300      	movs	r3, #0
 8007982:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007984:	2300      	movs	r3, #0
 8007986:	60fb      	str	r3, [r7, #12]
 8007988:	e009      	b.n	800799e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800798a:	687a      	ldr	r2, [r7, #4]
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	33e0      	adds	r3, #224	; 0xe0
 8007990:	009b      	lsls	r3, r3, #2
 8007992:	4413      	add	r3, r2
 8007994:	2200      	movs	r2, #0
 8007996:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	3301      	adds	r3, #1
 800799c:	60fb      	str	r3, [r7, #12]
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	2b0f      	cmp	r3, #15
 80079a2:	d9f2      	bls.n	800798a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80079a4:	2300      	movs	r3, #0
 80079a6:	60fb      	str	r3, [r7, #12]
 80079a8:	e009      	b.n	80079be <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80079aa:	687a      	ldr	r2, [r7, #4]
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	4413      	add	r3, r2
 80079b0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80079b4:	2200      	movs	r2, #0
 80079b6:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	3301      	adds	r3, #1
 80079bc:	60fb      	str	r3, [r7, #12]
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80079c4:	d3f1      	bcc.n	80079aa <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2200      	movs	r2, #0
 80079ca:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2200      	movs	r2, #0
 80079d0:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2201      	movs	r2, #1
 80079d6:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2200      	movs	r2, #0
 80079dc:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2201      	movs	r2, #1
 80079e4:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2240      	movs	r2, #64	; 0x40
 80079ea:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2200      	movs	r2, #0
 80079f0:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	2200      	movs	r2, #0
 80079f6:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2201      	movs	r2, #1
 80079fe:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2200      	movs	r2, #0
 8007a06:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8007a12:	2300      	movs	r3, #0
}
 8007a14:	4618      	mov	r0, r3
 8007a16:	3714      	adds	r7, #20
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1e:	4770      	bx	lr

08007a20 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007a20:	b480      	push	{r7}
 8007a22:	b085      	sub	sp, #20
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
 8007a28:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d016      	beq.n	8007a62 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d10e      	bne.n	8007a5c <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007a44:	1c59      	adds	r1, r3, #1
 8007a46:	687a      	ldr	r2, [r7, #4]
 8007a48:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8007a4c:	687a      	ldr	r2, [r7, #4]
 8007a4e:	33de      	adds	r3, #222	; 0xde
 8007a50:	6839      	ldr	r1, [r7, #0]
 8007a52:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007a56:	2300      	movs	r3, #0
 8007a58:	73fb      	strb	r3, [r7, #15]
 8007a5a:	e004      	b.n	8007a66 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007a5c:	2302      	movs	r3, #2
 8007a5e:	73fb      	strb	r3, [r7, #15]
 8007a60:	e001      	b.n	8007a66 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007a62:	2302      	movs	r3, #2
 8007a64:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007a66:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a68:	4618      	mov	r0, r3
 8007a6a:	3714      	adds	r7, #20
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a72:	4770      	bx	lr

08007a74 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007a74:	b480      	push	{r7}
 8007a76:	b085      	sub	sp, #20
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
 8007a7c:	460b      	mov	r3, r1
 8007a7e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007a80:	2300      	movs	r3, #0
 8007a82:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8007a8a:	78fa      	ldrb	r2, [r7, #3]
 8007a8c:	429a      	cmp	r2, r3
 8007a8e:	d204      	bcs.n	8007a9a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	78fa      	ldrb	r2, [r7, #3]
 8007a94:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8007a98:	e001      	b.n	8007a9e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007a9a:	2302      	movs	r3, #2
 8007a9c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007a9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	3714      	adds	r7, #20
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aaa:	4770      	bx	lr

08007aac <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007aac:	b480      	push	{r7}
 8007aae:	b087      	sub	sp, #28
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
 8007ab4:	4608      	mov	r0, r1
 8007ab6:	4611      	mov	r1, r2
 8007ab8:	461a      	mov	r2, r3
 8007aba:	4603      	mov	r3, r0
 8007abc:	70fb      	strb	r3, [r7, #3]
 8007abe:	460b      	mov	r3, r1
 8007ac0:	70bb      	strb	r3, [r7, #2]
 8007ac2:	4613      	mov	r3, r2
 8007ac4:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007aca:	2300      	movs	r3, #0
 8007acc:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007ad4:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007ad6:	e025      	b.n	8007b24 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007ad8:	7dfb      	ldrb	r3, [r7, #23]
 8007ada:	221a      	movs	r2, #26
 8007adc:	fb02 f303 	mul.w	r3, r2, r3
 8007ae0:	3308      	adds	r3, #8
 8007ae2:	68fa      	ldr	r2, [r7, #12]
 8007ae4:	4413      	add	r3, r2
 8007ae6:	3302      	adds	r3, #2
 8007ae8:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007aea:	693b      	ldr	r3, [r7, #16]
 8007aec:	795b      	ldrb	r3, [r3, #5]
 8007aee:	78fa      	ldrb	r2, [r7, #3]
 8007af0:	429a      	cmp	r2, r3
 8007af2:	d002      	beq.n	8007afa <USBH_FindInterface+0x4e>
 8007af4:	78fb      	ldrb	r3, [r7, #3]
 8007af6:	2bff      	cmp	r3, #255	; 0xff
 8007af8:	d111      	bne.n	8007b1e <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007afa:	693b      	ldr	r3, [r7, #16]
 8007afc:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007afe:	78ba      	ldrb	r2, [r7, #2]
 8007b00:	429a      	cmp	r2, r3
 8007b02:	d002      	beq.n	8007b0a <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007b04:	78bb      	ldrb	r3, [r7, #2]
 8007b06:	2bff      	cmp	r3, #255	; 0xff
 8007b08:	d109      	bne.n	8007b1e <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007b0a:	693b      	ldr	r3, [r7, #16]
 8007b0c:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007b0e:	787a      	ldrb	r2, [r7, #1]
 8007b10:	429a      	cmp	r2, r3
 8007b12:	d002      	beq.n	8007b1a <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007b14:	787b      	ldrb	r3, [r7, #1]
 8007b16:	2bff      	cmp	r3, #255	; 0xff
 8007b18:	d101      	bne.n	8007b1e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007b1a:	7dfb      	ldrb	r3, [r7, #23]
 8007b1c:	e006      	b.n	8007b2c <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007b1e:	7dfb      	ldrb	r3, [r7, #23]
 8007b20:	3301      	adds	r3, #1
 8007b22:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007b24:	7dfb      	ldrb	r3, [r7, #23]
 8007b26:	2b01      	cmp	r3, #1
 8007b28:	d9d6      	bls.n	8007ad8 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007b2a:	23ff      	movs	r3, #255	; 0xff
}
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	371c      	adds	r7, #28
 8007b30:	46bd      	mov	sp, r7
 8007b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b36:	4770      	bx	lr

08007b38 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b082      	sub	sp, #8
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8007b40:	6878      	ldr	r0, [r7, #4]
 8007b42:	f003 ff69 	bl	800ba18 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8007b46:	2101      	movs	r1, #1
 8007b48:	6878      	ldr	r0, [r7, #4]
 8007b4a:	f004 f882 	bl	800bc52 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007b4e:	2300      	movs	r3, #0
}
 8007b50:	4618      	mov	r0, r3
 8007b52:	3708      	adds	r7, #8
 8007b54:	46bd      	mov	sp, r7
 8007b56:	bd80      	pop	{r7, pc}

08007b58 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b088      	sub	sp, #32
 8007b5c:	af04      	add	r7, sp, #16
 8007b5e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007b60:	2302      	movs	r3, #2
 8007b62:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007b64:	2300      	movs	r3, #0
 8007b66:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8007b6e:	b2db      	uxtb	r3, r3
 8007b70:	2b01      	cmp	r3, #1
 8007b72:	d102      	bne.n	8007b7a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2203      	movs	r2, #3
 8007b78:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	781b      	ldrb	r3, [r3, #0]
 8007b7e:	b2db      	uxtb	r3, r3
 8007b80:	2b0b      	cmp	r3, #11
 8007b82:	f200 8247 	bhi.w	8008014 <USBH_Process+0x4bc>
 8007b86:	a201      	add	r2, pc, #4	; (adr r2, 8007b8c <USBH_Process+0x34>)
 8007b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b8c:	08007bbd 	.word	0x08007bbd
 8007b90:	08007c0b 	.word	0x08007c0b
 8007b94:	08007c8f 	.word	0x08007c8f
 8007b98:	08007f93 	.word	0x08007f93
 8007b9c:	08008015 	.word	0x08008015
 8007ba0:	08007d4f 	.word	0x08007d4f
 8007ba4:	08007f1d 	.word	0x08007f1d
 8007ba8:	08007da1 	.word	0x08007da1
 8007bac:	08007ddd 	.word	0x08007ddd
 8007bb0:	08007e17 	.word	0x08007e17
 8007bb4:	08007e75 	.word	0x08007e75
 8007bb8:	08007f7b 	.word	0x08007f7b
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007bc2:	b2db      	uxtb	r3, r3
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	f000 8227 	beq.w	8008018 <USBH_Process+0x4c0>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	2201      	movs	r2, #1
 8007bce:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007bd0:	20c8      	movs	r0, #200	; 0xc8
 8007bd2:	f004 f885 	bl	800bce0 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8007bd6:	6878      	ldr	r0, [r7, #4]
 8007bd8:	f003 ff7b 	bl	800bad2 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2200      	movs	r2, #0
 8007be0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2200      	movs	r2, #0
 8007be8:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2201      	movs	r2, #1
 8007bf0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007c00:	2200      	movs	r2, #0
 8007c02:	4619      	mov	r1, r3
 8007c04:	f001 fd8c 	bl	8009720 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007c08:	e206      	b.n	8008018 <USBH_Process+0x4c0>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8007c10:	2b01      	cmp	r3, #1
 8007c12:	d107      	bne.n	8007c24 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2200      	movs	r2, #0
 8007c18:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2202      	movs	r2, #2
 8007c20:	701a      	strb	r2, [r3, #0]
 8007c22:	e025      	b.n	8007c70 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007c2a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007c2e:	d914      	bls.n	8007c5a <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007c36:	3301      	adds	r3, #1
 8007c38:	b2da      	uxtb	r2, r3
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007c46:	2b03      	cmp	r3, #3
 8007c48:	d903      	bls.n	8007c52 <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	220d      	movs	r2, #13
 8007c4e:	701a      	strb	r2, [r3, #0]
 8007c50:	e00e      	b.n	8007c70 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2200      	movs	r2, #0
 8007c56:	701a      	strb	r2, [r3, #0]
 8007c58:	e00a      	b.n	8007c70 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007c60:	f103 020a 	add.w	r2, r3, #10
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8007c6a:	200a      	movs	r0, #10
 8007c6c:	f004 f838 	bl	800bce0 <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2201      	movs	r2, #1
 8007c74:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007c84:	2200      	movs	r2, #0
 8007c86:	4619      	mov	r1, r3
 8007c88:	f001 fd4a 	bl	8009720 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007c8c:	e1cb      	b.n	8008026 <USBH_Process+0x4ce>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d005      	beq.n	8007ca4 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007c9e:	2104      	movs	r1, #4
 8007ca0:	6878      	ldr	r0, [r7, #4]
 8007ca2:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007ca4:	2064      	movs	r0, #100	; 0x64
 8007ca6:	f004 f81b 	bl	800bce0 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	f003 feea 	bl	800ba84 <USBH_LL_GetSpeed>
 8007cb0:	4603      	mov	r3, r0
 8007cb2:	461a      	mov	r2, r3
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2205      	movs	r2, #5
 8007cbe:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007cc0:	2100      	movs	r1, #0
 8007cc2:	6878      	ldr	r0, [r7, #4]
 8007cc4:	f001 fc17 	bl	80094f6 <USBH_AllocPipe>
 8007cc8:	4603      	mov	r3, r0
 8007cca:	461a      	mov	r2, r3
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007cd0:	2180      	movs	r1, #128	; 0x80
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	f001 fc0f 	bl	80094f6 <USBH_AllocPipe>
 8007cd8:	4603      	mov	r3, r0
 8007cda:	461a      	mov	r2, r3
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	7919      	ldrb	r1, [r3, #4]
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007cf0:	687a      	ldr	r2, [r7, #4]
 8007cf2:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007cf4:	b292      	uxth	r2, r2
 8007cf6:	9202      	str	r2, [sp, #8]
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	9201      	str	r2, [sp, #4]
 8007cfc:	9300      	str	r3, [sp, #0]
 8007cfe:	4603      	mov	r3, r0
 8007d00:	2280      	movs	r2, #128	; 0x80
 8007d02:	6878      	ldr	r0, [r7, #4]
 8007d04:	f001 fbc8 	bl	8009498 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	7959      	ldrb	r1, [r3, #5]
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007d18:	687a      	ldr	r2, [r7, #4]
 8007d1a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007d1c:	b292      	uxth	r2, r2
 8007d1e:	9202      	str	r2, [sp, #8]
 8007d20:	2200      	movs	r2, #0
 8007d22:	9201      	str	r2, [sp, #4]
 8007d24:	9300      	str	r3, [sp, #0]
 8007d26:	4603      	mov	r3, r0
 8007d28:	2200      	movs	r2, #0
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f001 fbb4 	bl	8009498 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2201      	movs	r2, #1
 8007d34:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007d44:	2200      	movs	r2, #0
 8007d46:	4619      	mov	r1, r3
 8007d48:	f001 fcea 	bl	8009720 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007d4c:	e16b      	b.n	8008026 <USBH_Process+0x4ce>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007d4e:	6878      	ldr	r0, [r7, #4]
 8007d50:	f000 f96e 	bl	8008030 <USBH_HandleEnum>
 8007d54:	4603      	mov	r3, r0
 8007d56:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007d58:	7bbb      	ldrb	r3, [r7, #14]
 8007d5a:	b2db      	uxtb	r3, r3
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	f040 815d 	bne.w	800801c <USBH_Process+0x4c4>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2200      	movs	r2, #0
 8007d66:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8007d70:	2b01      	cmp	r3, #1
 8007d72:	d103      	bne.n	8007d7c <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2208      	movs	r2, #8
 8007d78:	701a      	strb	r2, [r3, #0]
 8007d7a:	e002      	b.n	8007d82 <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2207      	movs	r2, #7
 8007d80:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2205      	movs	r2, #5
 8007d86:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007d96:	2200      	movs	r2, #0
 8007d98:	4619      	mov	r1, r3
 8007d9a:	f001 fcc1 	bl	8009720 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007d9e:	e13d      	b.n	800801c <USBH_Process+0x4c4>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	f000 813a 	beq.w	8008020 <USBH_Process+0x4c8>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007db2:	2101      	movs	r1, #1
 8007db4:	6878      	ldr	r0, [r7, #4]
 8007db6:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2208      	movs	r2, #8
 8007dbc:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	2205      	movs	r2, #5
 8007dc2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	4619      	mov	r1, r3
 8007dd6:	f001 fca3 	bl	8009720 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8007dda:	e121      	b.n	8008020 <USBH_Process+0x4c8>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8007de2:	b29b      	uxth	r3, r3
 8007de4:	4619      	mov	r1, r3
 8007de6:	6878      	ldr	r0, [r7, #4]
 8007de8:	f000 fd00 	bl	80087ec <USBH_SetCfg>
 8007dec:	4603      	mov	r3, r0
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d102      	bne.n	8007df8 <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2209      	movs	r2, #9
 8007df6:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2201      	movs	r2, #1
 8007dfc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	4619      	mov	r1, r3
 8007e10:	f001 fc86 	bl	8009720 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007e14:	e107      	b.n	8008026 <USBH_Process+0x4ce>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8007e1c:	f003 0320 	and.w	r3, r3, #32
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d015      	beq.n	8007e50 <USBH_Process+0x2f8>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8007e24:	2101      	movs	r1, #1
 8007e26:	6878      	ldr	r0, [r7, #4]
 8007e28:	f000 fd03 	bl	8008832 <USBH_SetFeature>
 8007e2c:	4603      	mov	r3, r0
 8007e2e:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007e30:	7bbb      	ldrb	r3, [r7, #14]
 8007e32:	b2db      	uxtb	r3, r3
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d103      	bne.n	8007e40 <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	220a      	movs	r2, #10
 8007e3c:	701a      	strb	r2, [r3, #0]
 8007e3e:	e00a      	b.n	8007e56 <USBH_Process+0x2fe>
        }
        else if (status == USBH_NOT_SUPPORTED)
 8007e40:	7bbb      	ldrb	r3, [r7, #14]
 8007e42:	b2db      	uxtb	r3, r3
 8007e44:	2b03      	cmp	r3, #3
 8007e46:	d106      	bne.n	8007e56 <USBH_Process+0x2fe>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	220a      	movs	r2, #10
 8007e4c:	701a      	strb	r2, [r3, #0]
 8007e4e:	e002      	b.n	8007e56 <USBH_Process+0x2fe>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	220a      	movs	r2, #10
 8007e54:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2201      	movs	r2, #1
 8007e5a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	4619      	mov	r1, r3
 8007e6e:	f001 fc57 	bl	8009720 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007e72:	e0d8      	b.n	8008026 <USBH_Process+0x4ce>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d03f      	beq.n	8007efe <USBH_Process+0x3a6>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2200      	movs	r2, #0
 8007e82:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007e86:	2300      	movs	r3, #0
 8007e88:	73fb      	strb	r3, [r7, #15]
 8007e8a:	e016      	b.n	8007eba <USBH_Process+0x362>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007e8c:	7bfa      	ldrb	r2, [r7, #15]
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	32de      	adds	r2, #222	; 0xde
 8007e92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e96:	791a      	ldrb	r2, [r3, #4]
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8007e9e:	429a      	cmp	r2, r3
 8007ea0:	d108      	bne.n	8007eb4 <USBH_Process+0x35c>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007ea2:	7bfa      	ldrb	r2, [r7, #15]
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	32de      	adds	r2, #222	; 0xde
 8007ea8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8007eb2:	e005      	b.n	8007ec0 <USBH_Process+0x368>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007eb4:	7bfb      	ldrb	r3, [r7, #15]
 8007eb6:	3301      	adds	r3, #1
 8007eb8:	73fb      	strb	r3, [r7, #15]
 8007eba:	7bfb      	ldrb	r3, [r7, #15]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d0e5      	beq.n	8007e8c <USBH_Process+0x334>
          }
        }

        if (phost->pActiveClass != NULL)
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d016      	beq.n	8007ef8 <USBH_Process+0x3a0>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007ed0:	689b      	ldr	r3, [r3, #8]
 8007ed2:	6878      	ldr	r0, [r7, #4]
 8007ed4:	4798      	blx	r3
 8007ed6:	4603      	mov	r3, r0
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d109      	bne.n	8007ef0 <USBH_Process+0x398>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2206      	movs	r2, #6
 8007ee0:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007ee8:	2103      	movs	r1, #3
 8007eea:	6878      	ldr	r0, [r7, #4]
 8007eec:	4798      	blx	r3
 8007eee:	e006      	b.n	8007efe <USBH_Process+0x3a6>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	220d      	movs	r2, #13
 8007ef4:	701a      	strb	r2, [r3, #0]
 8007ef6:	e002      	b.n	8007efe <USBH_Process+0x3a6>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	220d      	movs	r2, #13
 8007efc:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	2205      	movs	r2, #5
 8007f02:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007f12:	2200      	movs	r2, #0
 8007f14:	4619      	mov	r1, r3
 8007f16:	f001 fc03 	bl	8009720 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007f1a:	e084      	b.n	8008026 <USBH_Process+0x4ce>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d017      	beq.n	8007f56 <USBH_Process+0x3fe>
      {
        status = phost->pActiveClass->Requests(phost);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007f2c:	691b      	ldr	r3, [r3, #16]
 8007f2e:	6878      	ldr	r0, [r7, #4]
 8007f30:	4798      	blx	r3
 8007f32:	4603      	mov	r3, r0
 8007f34:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007f36:	7bbb      	ldrb	r3, [r7, #14]
 8007f38:	b2db      	uxtb	r3, r3
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d103      	bne.n	8007f46 <USBH_Process+0x3ee>
        {
          phost->gState = HOST_CLASS;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	220b      	movs	r2, #11
 8007f42:	701a      	strb	r2, [r3, #0]
 8007f44:	e00a      	b.n	8007f5c <USBH_Process+0x404>
        }
        else if (status == USBH_FAIL)
 8007f46:	7bbb      	ldrb	r3, [r7, #14]
 8007f48:	b2db      	uxtb	r3, r3
 8007f4a:	2b02      	cmp	r3, #2
 8007f4c:	d106      	bne.n	8007f5c <USBH_Process+0x404>
        {
          phost->gState = HOST_ABORT_STATE;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	220d      	movs	r2, #13
 8007f52:	701a      	strb	r2, [r3, #0]
 8007f54:	e002      	b.n	8007f5c <USBH_Process+0x404>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	220d      	movs	r2, #13
 8007f5a:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2205      	movs	r2, #5
 8007f60:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007f70:	2200      	movs	r2, #0
 8007f72:	4619      	mov	r1, r3
 8007f74:	f001 fbd4 	bl	8009720 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007f78:	e055      	b.n	8008026 <USBH_Process+0x4ce>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d04f      	beq.n	8008024 <USBH_Process+0x4cc>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007f8a:	695b      	ldr	r3, [r3, #20]
 8007f8c:	6878      	ldr	r0, [r7, #4]
 8007f8e:	4798      	blx	r3
      }
      break;
 8007f90:	e048      	b.n	8008024 <USBH_Process+0x4cc>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	2200      	movs	r2, #0
 8007f96:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8007f9a:	6878      	ldr	r0, [r7, #4]
 8007f9c:	f7ff fcec 	bl	8007978 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d009      	beq.n	8007fbe <USBH_Process+0x466>
      {
        phost->pActiveClass->DeInit(phost);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007fb0:	68db      	ldr	r3, [r3, #12]
 8007fb2:	6878      	ldr	r0, [r7, #4]
 8007fb4:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	2200      	movs	r2, #0
 8007fba:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d005      	beq.n	8007fd4 <USBH_Process+0x47c>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007fce:	2105      	movs	r1, #5
 8007fd0:	6878      	ldr	r0, [r7, #4]
 8007fd2:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8007fda:	b2db      	uxtb	r3, r3
 8007fdc:	2b01      	cmp	r3, #1
 8007fde:	d107      	bne.n	8007ff0 <USBH_Process+0x498>
      {
        phost->device.is_ReEnumerated = 0U;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8007fe8:	6878      	ldr	r0, [r7, #4]
 8007fea:	f7ff fda5 	bl	8007b38 <USBH_Start>
 8007fee:	e002      	b.n	8007ff6 <USBH_Process+0x49e>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 8007ff0:	6878      	ldr	r0, [r7, #4]
 8007ff2:	f003 fd11 	bl	800ba18 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2201      	movs	r2, #1
 8007ffa:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800800a:	2200      	movs	r2, #0
 800800c:	4619      	mov	r1, r3
 800800e:	f001 fb87 	bl	8009720 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008012:	e008      	b.n	8008026 <USBH_Process+0x4ce>

    case HOST_ABORT_STATE:
    default :
      break;
 8008014:	bf00      	nop
 8008016:	e006      	b.n	8008026 <USBH_Process+0x4ce>
      break;
 8008018:	bf00      	nop
 800801a:	e004      	b.n	8008026 <USBH_Process+0x4ce>
      break;
 800801c:	bf00      	nop
 800801e:	e002      	b.n	8008026 <USBH_Process+0x4ce>
    break;
 8008020:	bf00      	nop
 8008022:	e000      	b.n	8008026 <USBH_Process+0x4ce>
      break;
 8008024:	bf00      	nop
  }
  return USBH_OK;
 8008026:	2300      	movs	r3, #0
}
 8008028:	4618      	mov	r0, r3
 800802a:	3710      	adds	r7, #16
 800802c:	46bd      	mov	sp, r7
 800802e:	bd80      	pop	{r7, pc}

08008030 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8008030:	b580      	push	{r7, lr}
 8008032:	b088      	sub	sp, #32
 8008034:	af04      	add	r7, sp, #16
 8008036:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8008038:	2301      	movs	r3, #1
 800803a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800803c:	2301      	movs	r3, #1
 800803e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	785b      	ldrb	r3, [r3, #1]
 8008044:	2b07      	cmp	r3, #7
 8008046:	f200 8208 	bhi.w	800845a <USBH_HandleEnum+0x42a>
 800804a:	a201      	add	r2, pc, #4	; (adr r2, 8008050 <USBH_HandleEnum+0x20>)
 800804c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008050:	08008071 	.word	0x08008071
 8008054:	0800812f 	.word	0x0800812f
 8008058:	08008199 	.word	0x08008199
 800805c:	08008227 	.word	0x08008227
 8008060:	08008291 	.word	0x08008291
 8008064:	08008301 	.word	0x08008301
 8008068:	0800839d 	.word	0x0800839d
 800806c:	0800841b 	.word	0x0800841b
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8008070:	2108      	movs	r1, #8
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	f000 faea 	bl	800864c <USBH_Get_DevDesc>
 8008078:	4603      	mov	r3, r0
 800807a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800807c:	7bbb      	ldrb	r3, [r7, #14]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d130      	bne.n	80080e4 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2201      	movs	r2, #1
 8008090:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	7919      	ldrb	r1, [r3, #4]
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80080a2:	687a      	ldr	r2, [r7, #4]
 80080a4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80080a6:	b292      	uxth	r2, r2
 80080a8:	9202      	str	r2, [sp, #8]
 80080aa:	2200      	movs	r2, #0
 80080ac:	9201      	str	r2, [sp, #4]
 80080ae:	9300      	str	r3, [sp, #0]
 80080b0:	4603      	mov	r3, r0
 80080b2:	2280      	movs	r2, #128	; 0x80
 80080b4:	6878      	ldr	r0, [r7, #4]
 80080b6:	f001 f9ef 	bl	8009498 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	7959      	ldrb	r1, [r3, #5]
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80080ca:	687a      	ldr	r2, [r7, #4]
 80080cc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80080ce:	b292      	uxth	r2, r2
 80080d0:	9202      	str	r2, [sp, #8]
 80080d2:	2200      	movs	r2, #0
 80080d4:	9201      	str	r2, [sp, #4]
 80080d6:	9300      	str	r3, [sp, #0]
 80080d8:	4603      	mov	r3, r0
 80080da:	2200      	movs	r2, #0
 80080dc:	6878      	ldr	r0, [r7, #4]
 80080de:	f001 f9db 	bl	8009498 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80080e2:	e1bc      	b.n	800845e <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80080e4:	7bbb      	ldrb	r3, [r7, #14]
 80080e6:	2b03      	cmp	r3, #3
 80080e8:	f040 81b9 	bne.w	800845e <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80080f2:	3301      	adds	r3, #1
 80080f4:	b2da      	uxtb	r2, r3
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008102:	2b03      	cmp	r3, #3
 8008104:	d903      	bls.n	800810e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	220d      	movs	r2, #13
 800810a:	701a      	strb	r2, [r3, #0]
      break;
 800810c:	e1a7      	b.n	800845e <USBH_HandleEnum+0x42e>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	795b      	ldrb	r3, [r3, #5]
 8008112:	4619      	mov	r1, r3
 8008114:	6878      	ldr	r0, [r7, #4]
 8008116:	f001 fa0f 	bl	8009538 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	791b      	ldrb	r3, [r3, #4]
 800811e:	4619      	mov	r1, r3
 8008120:	6878      	ldr	r0, [r7, #4]
 8008122:	f001 fa09 	bl	8009538 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2200      	movs	r2, #0
 800812a:	701a      	strb	r2, [r3, #0]
      break;
 800812c:	e197      	b.n	800845e <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800812e:	2112      	movs	r1, #18
 8008130:	6878      	ldr	r0, [r7, #4]
 8008132:	f000 fa8b 	bl	800864c <USBH_Get_DevDesc>
 8008136:	4603      	mov	r3, r0
 8008138:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800813a:	7bbb      	ldrb	r3, [r7, #14]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d103      	bne.n	8008148 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2202      	movs	r2, #2
 8008144:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008146:	e18c      	b.n	8008462 <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008148:	7bbb      	ldrb	r3, [r7, #14]
 800814a:	2b03      	cmp	r3, #3
 800814c:	f040 8189 	bne.w	8008462 <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008156:	3301      	adds	r3, #1
 8008158:	b2da      	uxtb	r2, r3
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008166:	2b03      	cmp	r3, #3
 8008168:	d903      	bls.n	8008172 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	220d      	movs	r2, #13
 800816e:	701a      	strb	r2, [r3, #0]
      break;
 8008170:	e177      	b.n	8008462 <USBH_HandleEnum+0x432>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	795b      	ldrb	r3, [r3, #5]
 8008176:	4619      	mov	r1, r3
 8008178:	6878      	ldr	r0, [r7, #4]
 800817a:	f001 f9dd 	bl	8009538 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	791b      	ldrb	r3, [r3, #4]
 8008182:	4619      	mov	r1, r3
 8008184:	6878      	ldr	r0, [r7, #4]
 8008186:	f001 f9d7 	bl	8009538 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	2200      	movs	r2, #0
 800818e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2200      	movs	r2, #0
 8008194:	701a      	strb	r2, [r3, #0]
      break;
 8008196:	e164      	b.n	8008462 <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8008198:	2101      	movs	r1, #1
 800819a:	6878      	ldr	r0, [r7, #4]
 800819c:	f000 fb02 	bl	80087a4 <USBH_SetAddress>
 80081a0:	4603      	mov	r3, r0
 80081a2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80081a4:	7bbb      	ldrb	r3, [r7, #14]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d132      	bne.n	8008210 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 80081aa:	2002      	movs	r0, #2
 80081ac:	f003 fd98 	bl	800bce0 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2201      	movs	r2, #1
 80081b4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2203      	movs	r2, #3
 80081bc:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	7919      	ldrb	r1, [r3, #4]
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80081ce:	687a      	ldr	r2, [r7, #4]
 80081d0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80081d2:	b292      	uxth	r2, r2
 80081d4:	9202      	str	r2, [sp, #8]
 80081d6:	2200      	movs	r2, #0
 80081d8:	9201      	str	r2, [sp, #4]
 80081da:	9300      	str	r3, [sp, #0]
 80081dc:	4603      	mov	r3, r0
 80081de:	2280      	movs	r2, #128	; 0x80
 80081e0:	6878      	ldr	r0, [r7, #4]
 80081e2:	f001 f959 	bl	8009498 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	7959      	ldrb	r1, [r3, #5]
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80081f6:	687a      	ldr	r2, [r7, #4]
 80081f8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80081fa:	b292      	uxth	r2, r2
 80081fc:	9202      	str	r2, [sp, #8]
 80081fe:	2200      	movs	r2, #0
 8008200:	9201      	str	r2, [sp, #4]
 8008202:	9300      	str	r3, [sp, #0]
 8008204:	4603      	mov	r3, r0
 8008206:	2200      	movs	r2, #0
 8008208:	6878      	ldr	r0, [r7, #4]
 800820a:	f001 f945 	bl	8009498 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800820e:	e12a      	b.n	8008466 <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008210:	7bbb      	ldrb	r3, [r7, #14]
 8008212:	2b03      	cmp	r3, #3
 8008214:	f040 8127 	bne.w	8008466 <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	220d      	movs	r2, #13
 800821c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2200      	movs	r2, #0
 8008222:	705a      	strb	r2, [r3, #1]
      break;
 8008224:	e11f      	b.n	8008466 <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8008226:	2109      	movs	r1, #9
 8008228:	6878      	ldr	r0, [r7, #4]
 800822a:	f000 fa37 	bl	800869c <USBH_Get_CfgDesc>
 800822e:	4603      	mov	r3, r0
 8008230:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008232:	7bbb      	ldrb	r3, [r7, #14]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d103      	bne.n	8008240 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2204      	movs	r2, #4
 800823c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800823e:	e114      	b.n	800846a <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008240:	7bbb      	ldrb	r3, [r7, #14]
 8008242:	2b03      	cmp	r3, #3
 8008244:	f040 8111 	bne.w	800846a <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800824e:	3301      	adds	r3, #1
 8008250:	b2da      	uxtb	r2, r3
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800825e:	2b03      	cmp	r3, #3
 8008260:	d903      	bls.n	800826a <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	220d      	movs	r2, #13
 8008266:	701a      	strb	r2, [r3, #0]
      break;
 8008268:	e0ff      	b.n	800846a <USBH_HandleEnum+0x43a>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	795b      	ldrb	r3, [r3, #5]
 800826e:	4619      	mov	r1, r3
 8008270:	6878      	ldr	r0, [r7, #4]
 8008272:	f001 f961 	bl	8009538 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	791b      	ldrb	r3, [r3, #4]
 800827a:	4619      	mov	r1, r3
 800827c:	6878      	ldr	r0, [r7, #4]
 800827e:	f001 f95b 	bl	8009538 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	2200      	movs	r2, #0
 8008286:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2200      	movs	r2, #0
 800828c:	701a      	strb	r2, [r3, #0]
      break;
 800828e:	e0ec      	b.n	800846a <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8008296:	4619      	mov	r1, r3
 8008298:	6878      	ldr	r0, [r7, #4]
 800829a:	f000 f9ff 	bl	800869c <USBH_Get_CfgDesc>
 800829e:	4603      	mov	r3, r0
 80082a0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80082a2:	7bbb      	ldrb	r3, [r7, #14]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d103      	bne.n	80082b0 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2205      	movs	r2, #5
 80082ac:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80082ae:	e0de      	b.n	800846e <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80082b0:	7bbb      	ldrb	r3, [r7, #14]
 80082b2:	2b03      	cmp	r3, #3
 80082b4:	f040 80db 	bne.w	800846e <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80082be:	3301      	adds	r3, #1
 80082c0:	b2da      	uxtb	r2, r3
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80082ce:	2b03      	cmp	r3, #3
 80082d0:	d903      	bls.n	80082da <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	220d      	movs	r2, #13
 80082d6:	701a      	strb	r2, [r3, #0]
      break;
 80082d8:	e0c9      	b.n	800846e <USBH_HandleEnum+0x43e>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	795b      	ldrb	r3, [r3, #5]
 80082de:	4619      	mov	r1, r3
 80082e0:	6878      	ldr	r0, [r7, #4]
 80082e2:	f001 f929 	bl	8009538 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	791b      	ldrb	r3, [r3, #4]
 80082ea:	4619      	mov	r1, r3
 80082ec:	6878      	ldr	r0, [r7, #4]
 80082ee:	f001 f923 	bl	8009538 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	2200      	movs	r2, #0
 80082f6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2200      	movs	r2, #0
 80082fc:	701a      	strb	r2, [r3, #0]
      break;
 80082fe:	e0b6      	b.n	800846e <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8008306:	2b00      	cmp	r3, #0
 8008308:	d036      	beq.n	8008378 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008316:	23ff      	movs	r3, #255	; 0xff
 8008318:	6878      	ldr	r0, [r7, #4]
 800831a:	f000 f9e3 	bl	80086e4 <USBH_Get_StringDesc>
 800831e:	4603      	mov	r3, r0
 8008320:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008322:	7bbb      	ldrb	r3, [r7, #14]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d111      	bne.n	800834c <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2206      	movs	r2, #6
 800832c:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	2205      	movs	r2, #5
 8008332:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008342:	2200      	movs	r2, #0
 8008344:	4619      	mov	r1, r3
 8008346:	f001 f9eb 	bl	8009720 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800834a:	e092      	b.n	8008472 <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800834c:	7bbb      	ldrb	r3, [r7, #14]
 800834e:	2b03      	cmp	r3, #3
 8008350:	f040 808f 	bne.w	8008472 <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2206      	movs	r2, #6
 8008358:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	2205      	movs	r2, #5
 800835e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800836e:	2200      	movs	r2, #0
 8008370:	4619      	mov	r1, r3
 8008372:	f001 f9d5 	bl	8009720 <osMessagePut>
      break;
 8008376:	e07c      	b.n	8008472 <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2206      	movs	r2, #6
 800837c:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2205      	movs	r2, #5
 8008382:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008392:	2200      	movs	r2, #0
 8008394:	4619      	mov	r1, r3
 8008396:	f001 f9c3 	bl	8009720 <osMessagePut>
      break;
 800839a:	e06a      	b.n	8008472 <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d027      	beq.n	80083f6 <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80083b2:	23ff      	movs	r3, #255	; 0xff
 80083b4:	6878      	ldr	r0, [r7, #4]
 80083b6:	f000 f995 	bl	80086e4 <USBH_Get_StringDesc>
 80083ba:	4603      	mov	r3, r0
 80083bc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80083be:	7bbb      	ldrb	r3, [r7, #14]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d103      	bne.n	80083cc <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2207      	movs	r2, #7
 80083c8:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80083ca:	e054      	b.n	8008476 <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80083cc:	7bbb      	ldrb	r3, [r7, #14]
 80083ce:	2b03      	cmp	r3, #3
 80083d0:	d151      	bne.n	8008476 <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	2207      	movs	r2, #7
 80083d6:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2205      	movs	r2, #5
 80083dc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80083ec:	2200      	movs	r2, #0
 80083ee:	4619      	mov	r1, r3
 80083f0:	f001 f996 	bl	8009720 <osMessagePut>
      break;
 80083f4:	e03f      	b.n	8008476 <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	2207      	movs	r2, #7
 80083fa:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2205      	movs	r2, #5
 8008400:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008410:	2200      	movs	r2, #0
 8008412:	4619      	mov	r1, r3
 8008414:	f001 f984 	bl	8009720 <osMessagePut>
      break;
 8008418:	e02d      	b.n	8008476 <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8008420:	2b00      	cmp	r3, #0
 8008422:	d017      	beq.n	8008454 <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008430:	23ff      	movs	r3, #255	; 0xff
 8008432:	6878      	ldr	r0, [r7, #4]
 8008434:	f000 f956 	bl	80086e4 <USBH_Get_StringDesc>
 8008438:	4603      	mov	r3, r0
 800843a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800843c:	7bbb      	ldrb	r3, [r7, #14]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d102      	bne.n	8008448 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8008442:	2300      	movs	r3, #0
 8008444:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8008446:	e018      	b.n	800847a <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008448:	7bbb      	ldrb	r3, [r7, #14]
 800844a:	2b03      	cmp	r3, #3
 800844c:	d115      	bne.n	800847a <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 800844e:	2300      	movs	r3, #0
 8008450:	73fb      	strb	r3, [r7, #15]
      break;
 8008452:	e012      	b.n	800847a <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 8008454:	2300      	movs	r3, #0
 8008456:	73fb      	strb	r3, [r7, #15]
      break;
 8008458:	e00f      	b.n	800847a <USBH_HandleEnum+0x44a>

    default:
      break;
 800845a:	bf00      	nop
 800845c:	e00e      	b.n	800847c <USBH_HandleEnum+0x44c>
      break;
 800845e:	bf00      	nop
 8008460:	e00c      	b.n	800847c <USBH_HandleEnum+0x44c>
      break;
 8008462:	bf00      	nop
 8008464:	e00a      	b.n	800847c <USBH_HandleEnum+0x44c>
      break;
 8008466:	bf00      	nop
 8008468:	e008      	b.n	800847c <USBH_HandleEnum+0x44c>
      break;
 800846a:	bf00      	nop
 800846c:	e006      	b.n	800847c <USBH_HandleEnum+0x44c>
      break;
 800846e:	bf00      	nop
 8008470:	e004      	b.n	800847c <USBH_HandleEnum+0x44c>
      break;
 8008472:	bf00      	nop
 8008474:	e002      	b.n	800847c <USBH_HandleEnum+0x44c>
      break;
 8008476:	bf00      	nop
 8008478:	e000      	b.n	800847c <USBH_HandleEnum+0x44c>
      break;
 800847a:	bf00      	nop
  }
  return Status;
 800847c:	7bfb      	ldrb	r3, [r7, #15]
}
 800847e:	4618      	mov	r0, r3
 8008480:	3710      	adds	r7, #16
 8008482:	46bd      	mov	sp, r7
 8008484:	bd80      	pop	{r7, pc}
 8008486:	bf00      	nop

08008488 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8008488:	b480      	push	{r7}
 800848a:	b083      	sub	sp, #12
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
 8008490:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	683a      	ldr	r2, [r7, #0]
 8008496:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800849a:	bf00      	nop
 800849c:	370c      	adds	r7, #12
 800849e:	46bd      	mov	sp, r7
 80084a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a4:	4770      	bx	lr

080084a6 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80084a6:	b580      	push	{r7, lr}
 80084a8:	b082      	sub	sp, #8
 80084aa:	af00      	add	r7, sp, #0
 80084ac:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80084b4:	1c5a      	adds	r2, r3, #1
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80084bc:	6878      	ldr	r0, [r7, #4]
 80084be:	f000 f804 	bl	80084ca <USBH_HandleSof>
}
 80084c2:	bf00      	nop
 80084c4:	3708      	adds	r7, #8
 80084c6:	46bd      	mov	sp, r7
 80084c8:	bd80      	pop	{r7, pc}

080084ca <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80084ca:	b580      	push	{r7, lr}
 80084cc:	b082      	sub	sp, #8
 80084ce:	af00      	add	r7, sp, #0
 80084d0:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	781b      	ldrb	r3, [r3, #0]
 80084d6:	b2db      	uxtb	r3, r3
 80084d8:	2b0b      	cmp	r3, #11
 80084da:	d10a      	bne.n	80084f2 <USBH_HandleSof+0x28>
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d005      	beq.n	80084f2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80084ec:	699b      	ldr	r3, [r3, #24]
 80084ee:	6878      	ldr	r0, [r7, #4]
 80084f0:	4798      	blx	r3
  }
}
 80084f2:	bf00      	nop
 80084f4:	3708      	adds	r7, #8
 80084f6:	46bd      	mov	sp, r7
 80084f8:	bd80      	pop	{r7, pc}

080084fa <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80084fa:	b580      	push	{r7, lr}
 80084fc:	b082      	sub	sp, #8
 80084fe:	af00      	add	r7, sp, #0
 8008500:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	2201      	movs	r2, #1
 8008506:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	2201      	movs	r2, #1
 800850e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800851e:	2200      	movs	r2, #0
 8008520:	4619      	mov	r1, r3
 8008522:	f001 f8fd 	bl	8009720 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8008526:	bf00      	nop
}
 8008528:	3708      	adds	r7, #8
 800852a:	46bd      	mov	sp, r7
 800852c:	bd80      	pop	{r7, pc}

0800852e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800852e:	b480      	push	{r7}
 8008530:	b083      	sub	sp, #12
 8008532:	af00      	add	r7, sp, #0
 8008534:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	2200      	movs	r2, #0
 800853a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800853e:	bf00      	nop
}
 8008540:	370c      	adds	r7, #12
 8008542:	46bd      	mov	sp, r7
 8008544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008548:	4770      	bx	lr

0800854a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800854a:	b580      	push	{r7, lr}
 800854c:	b082      	sub	sp, #8
 800854e:	af00      	add	r7, sp, #0
 8008550:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	2201      	movs	r2, #1
 8008556:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	2200      	movs	r2, #0
 800855e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	2200      	movs	r2, #0
 8008566:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	2201      	movs	r2, #1
 800856e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800857e:	2200      	movs	r2, #0
 8008580:	4619      	mov	r1, r3
 8008582:	f001 f8cd 	bl	8009720 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8008586:	2300      	movs	r3, #0
}
 8008588:	4618      	mov	r0, r3
 800858a:	3708      	adds	r7, #8
 800858c:	46bd      	mov	sp, r7
 800858e:	bd80      	pop	{r7, pc}

08008590 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8008590:	b580      	push	{r7, lr}
 8008592:	b082      	sub	sp, #8
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	2201      	movs	r2, #1
 800859c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2200      	movs	r2, #0
 80085a4:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2200      	movs	r2, #0
 80085ac:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80085b0:	6878      	ldr	r0, [r7, #4]
 80085b2:	f003 fa4c 	bl	800ba4e <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	791b      	ldrb	r3, [r3, #4]
 80085ba:	4619      	mov	r1, r3
 80085bc:	6878      	ldr	r0, [r7, #4]
 80085be:	f000 ffbb 	bl	8009538 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	795b      	ldrb	r3, [r3, #5]
 80085c6:	4619      	mov	r1, r3
 80085c8:	6878      	ldr	r0, [r7, #4]
 80085ca:	f000 ffb5 	bl	8009538 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	2201      	movs	r2, #1
 80085d2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80085e2:	2200      	movs	r2, #0
 80085e4:	4619      	mov	r1, r3
 80085e6:	f001 f89b 	bl	8009720 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80085ea:	2300      	movs	r3, #0
}
 80085ec:	4618      	mov	r0, r3
 80085ee:	3708      	adds	r7, #8
 80085f0:	46bd      	mov	sp, r7
 80085f2:	bd80      	pop	{r7, pc}

080085f4 <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 80085f4:	b580      	push	{r7, lr}
 80085f6:	b086      	sub	sp, #24
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	f8d3 13d8 	ldr.w	r1, [r3, #984]	; 0x3d8
 8008602:	f107 030c 	add.w	r3, r7, #12
 8008606:	f04f 32ff 	mov.w	r2, #4294967295
 800860a:	4618      	mov	r0, r3
 800860c:	f001 f8c8 	bl	80097a0 <osMessageGet>
    if (event.status == osEventMessage)
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	2b10      	cmp	r3, #16
 8008614:	d1f2      	bne.n	80085fc <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 8008616:	6878      	ldr	r0, [r7, #4]
 8008618:	f7ff fa9e 	bl	8007b58 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800861c:	e7ee      	b.n	80085fc <USBH_Process_OS+0x8>

0800861e <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800861e:	b580      	push	{r7, lr}
 8008620:	b082      	sub	sp, #8
 8008622:	af00      	add	r7, sp, #0
 8008624:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	2201      	movs	r2, #1
 800862a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800863a:	2200      	movs	r2, #0
 800863c:	4619      	mov	r1, r3
 800863e:	f001 f86f 	bl	8009720 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif

  return USBH_OK;
 8008642:	2300      	movs	r3, #0
}
 8008644:	4618      	mov	r0, r3
 8008646:	3708      	adds	r7, #8
 8008648:	46bd      	mov	sp, r7
 800864a:	bd80      	pop	{r7, pc}

0800864c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b086      	sub	sp, #24
 8008650:	af02      	add	r7, sp, #8
 8008652:	6078      	str	r0, [r7, #4]
 8008654:	460b      	mov	r3, r1
 8008656:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800865e:	78fb      	ldrb	r3, [r7, #3]
 8008660:	b29b      	uxth	r3, r3
 8008662:	9300      	str	r3, [sp, #0]
 8008664:	4613      	mov	r3, r2
 8008666:	f44f 7280 	mov.w	r2, #256	; 0x100
 800866a:	2100      	movs	r1, #0
 800866c:	6878      	ldr	r0, [r7, #4]
 800866e:	f000 f864 	bl	800873a <USBH_GetDescriptor>
 8008672:	4603      	mov	r3, r0
 8008674:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 8008676:	7bfb      	ldrb	r3, [r7, #15]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d10a      	bne.n	8008692 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	f203 3026 	addw	r0, r3, #806	; 0x326
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008688:	78fa      	ldrb	r2, [r7, #3]
 800868a:	b292      	uxth	r2, r2
 800868c:	4619      	mov	r1, r3
 800868e:	f000 f918 	bl	80088c2 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8008692:	7bfb      	ldrb	r3, [r7, #15]
}
 8008694:	4618      	mov	r0, r3
 8008696:	3710      	adds	r7, #16
 8008698:	46bd      	mov	sp, r7
 800869a:	bd80      	pop	{r7, pc}

0800869c <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800869c:	b580      	push	{r7, lr}
 800869e:	b086      	sub	sp, #24
 80086a0:	af02      	add	r7, sp, #8
 80086a2:	6078      	str	r0, [r7, #4]
 80086a4:	460b      	mov	r3, r1
 80086a6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	331c      	adds	r3, #28
 80086ac:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80086ae:	887b      	ldrh	r3, [r7, #2]
 80086b0:	9300      	str	r3, [sp, #0]
 80086b2:	68bb      	ldr	r3, [r7, #8]
 80086b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80086b8:	2100      	movs	r1, #0
 80086ba:	6878      	ldr	r0, [r7, #4]
 80086bc:	f000 f83d 	bl	800873a <USBH_GetDescriptor>
 80086c0:	4603      	mov	r3, r0
 80086c2:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 80086c4:	7bfb      	ldrb	r3, [r7, #15]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d107      	bne.n	80086da <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 80086ca:	887b      	ldrh	r3, [r7, #2]
 80086cc:	461a      	mov	r2, r3
 80086ce:	68b9      	ldr	r1, [r7, #8]
 80086d0:	6878      	ldr	r0, [r7, #4]
 80086d2:	f000 f987 	bl	80089e4 <USBH_ParseCfgDesc>
 80086d6:	4603      	mov	r3, r0
 80086d8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80086da:	7bfb      	ldrb	r3, [r7, #15]
}
 80086dc:	4618      	mov	r0, r3
 80086de:	3710      	adds	r7, #16
 80086e0:	46bd      	mov	sp, r7
 80086e2:	bd80      	pop	{r7, pc}

080086e4 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b088      	sub	sp, #32
 80086e8:	af02      	add	r7, sp, #8
 80086ea:	60f8      	str	r0, [r7, #12]
 80086ec:	607a      	str	r2, [r7, #4]
 80086ee:	461a      	mov	r2, r3
 80086f0:	460b      	mov	r3, r1
 80086f2:	72fb      	strb	r3, [r7, #11]
 80086f4:	4613      	mov	r3, r2
 80086f6:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 80086f8:	7afb      	ldrb	r3, [r7, #11]
 80086fa:	b29b      	uxth	r3, r3
 80086fc:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8008700:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8008708:	893b      	ldrh	r3, [r7, #8]
 800870a:	9300      	str	r3, [sp, #0]
 800870c:	460b      	mov	r3, r1
 800870e:	2100      	movs	r1, #0
 8008710:	68f8      	ldr	r0, [r7, #12]
 8008712:	f000 f812 	bl	800873a <USBH_GetDescriptor>
 8008716:	4603      	mov	r3, r0
 8008718:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800871a:	7dfb      	ldrb	r3, [r7, #23]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d107      	bne.n	8008730 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008726:	893a      	ldrh	r2, [r7, #8]
 8008728:	6879      	ldr	r1, [r7, #4]
 800872a:	4618      	mov	r0, r3
 800872c:	f000 fb24 	bl	8008d78 <USBH_ParseStringDesc>
  }

  return status;
 8008730:	7dfb      	ldrb	r3, [r7, #23]
}
 8008732:	4618      	mov	r0, r3
 8008734:	3718      	adds	r7, #24
 8008736:	46bd      	mov	sp, r7
 8008738:	bd80      	pop	{r7, pc}

0800873a <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800873a:	b580      	push	{r7, lr}
 800873c:	b084      	sub	sp, #16
 800873e:	af00      	add	r7, sp, #0
 8008740:	60f8      	str	r0, [r7, #12]
 8008742:	607b      	str	r3, [r7, #4]
 8008744:	460b      	mov	r3, r1
 8008746:	72fb      	strb	r3, [r7, #11]
 8008748:	4613      	mov	r3, r2
 800874a:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	789b      	ldrb	r3, [r3, #2]
 8008750:	2b01      	cmp	r3, #1
 8008752:	d11c      	bne.n	800878e <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8008754:	7afb      	ldrb	r3, [r7, #11]
 8008756:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800875a:	b2da      	uxtb	r2, r3
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	2206      	movs	r2, #6
 8008764:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	893a      	ldrh	r2, [r7, #8]
 800876a:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800876c:	893b      	ldrh	r3, [r7, #8]
 800876e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008772:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008776:	d104      	bne.n	8008782 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	f240 4209 	movw	r2, #1033	; 0x409
 800877e:	829a      	strh	r2, [r3, #20]
 8008780:	e002      	b.n	8008788 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	2200      	movs	r2, #0
 8008786:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	8b3a      	ldrh	r2, [r7, #24]
 800878c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800878e:	8b3b      	ldrh	r3, [r7, #24]
 8008790:	461a      	mov	r2, r3
 8008792:	6879      	ldr	r1, [r7, #4]
 8008794:	68f8      	ldr	r0, [r7, #12]
 8008796:	f000 fb3d 	bl	8008e14 <USBH_CtlReq>
 800879a:	4603      	mov	r3, r0
}
 800879c:	4618      	mov	r0, r3
 800879e:	3710      	adds	r7, #16
 80087a0:	46bd      	mov	sp, r7
 80087a2:	bd80      	pop	{r7, pc}

080087a4 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b082      	sub	sp, #8
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
 80087ac:	460b      	mov	r3, r1
 80087ae:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	789b      	ldrb	r3, [r3, #2]
 80087b4:	2b01      	cmp	r3, #1
 80087b6:	d10f      	bne.n	80087d8 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2200      	movs	r2, #0
 80087bc:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	2205      	movs	r2, #5
 80087c2:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80087c4:	78fb      	ldrb	r3, [r7, #3]
 80087c6:	b29a      	uxth	r2, r3
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2200      	movs	r2, #0
 80087d0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	2200      	movs	r2, #0
 80087d6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80087d8:	2200      	movs	r2, #0
 80087da:	2100      	movs	r1, #0
 80087dc:	6878      	ldr	r0, [r7, #4]
 80087de:	f000 fb19 	bl	8008e14 <USBH_CtlReq>
 80087e2:	4603      	mov	r3, r0
}
 80087e4:	4618      	mov	r0, r3
 80087e6:	3708      	adds	r7, #8
 80087e8:	46bd      	mov	sp, r7
 80087ea:	bd80      	pop	{r7, pc}

080087ec <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b082      	sub	sp, #8
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
 80087f4:	460b      	mov	r3, r1
 80087f6:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	789b      	ldrb	r3, [r3, #2]
 80087fc:	2b01      	cmp	r3, #1
 80087fe:	d10e      	bne.n	800881e <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2200      	movs	r2, #0
 8008804:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	2209      	movs	r2, #9
 800880a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	887a      	ldrh	r2, [r7, #2]
 8008810:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	2200      	movs	r2, #0
 8008816:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2200      	movs	r2, #0
 800881c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800881e:	2200      	movs	r2, #0
 8008820:	2100      	movs	r1, #0
 8008822:	6878      	ldr	r0, [r7, #4]
 8008824:	f000 faf6 	bl	8008e14 <USBH_CtlReq>
 8008828:	4603      	mov	r3, r0
}
 800882a:	4618      	mov	r0, r3
 800882c:	3708      	adds	r7, #8
 800882e:	46bd      	mov	sp, r7
 8008830:	bd80      	pop	{r7, pc}

08008832 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8008832:	b580      	push	{r7, lr}
 8008834:	b082      	sub	sp, #8
 8008836:	af00      	add	r7, sp, #0
 8008838:	6078      	str	r0, [r7, #4]
 800883a:	460b      	mov	r3, r1
 800883c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	789b      	ldrb	r3, [r3, #2]
 8008842:	2b01      	cmp	r3, #1
 8008844:	d10f      	bne.n	8008866 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	2200      	movs	r2, #0
 800884a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2203      	movs	r2, #3
 8008850:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8008852:	78fb      	ldrb	r3, [r7, #3]
 8008854:	b29a      	uxth	r2, r3
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	2200      	movs	r2, #0
 800885e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2200      	movs	r2, #0
 8008864:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008866:	2200      	movs	r2, #0
 8008868:	2100      	movs	r1, #0
 800886a:	6878      	ldr	r0, [r7, #4]
 800886c:	f000 fad2 	bl	8008e14 <USBH_CtlReq>
 8008870:	4603      	mov	r3, r0
}
 8008872:	4618      	mov	r0, r3
 8008874:	3708      	adds	r7, #8
 8008876:	46bd      	mov	sp, r7
 8008878:	bd80      	pop	{r7, pc}

0800887a <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800887a:	b580      	push	{r7, lr}
 800887c:	b082      	sub	sp, #8
 800887e:	af00      	add	r7, sp, #0
 8008880:	6078      	str	r0, [r7, #4]
 8008882:	460b      	mov	r3, r1
 8008884:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	789b      	ldrb	r3, [r3, #2]
 800888a:	2b01      	cmp	r3, #1
 800888c:	d10f      	bne.n	80088ae <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	2202      	movs	r2, #2
 8008892:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	2201      	movs	r2, #1
 8008898:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	2200      	movs	r2, #0
 800889e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80088a0:	78fb      	ldrb	r3, [r7, #3]
 80088a2:	b29a      	uxth	r2, r3
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2200      	movs	r2, #0
 80088ac:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 80088ae:	2200      	movs	r2, #0
 80088b0:	2100      	movs	r1, #0
 80088b2:	6878      	ldr	r0, [r7, #4]
 80088b4:	f000 faae 	bl	8008e14 <USBH_CtlReq>
 80088b8:	4603      	mov	r3, r0
}
 80088ba:	4618      	mov	r0, r3
 80088bc:	3708      	adds	r7, #8
 80088be:	46bd      	mov	sp, r7
 80088c0:	bd80      	pop	{r7, pc}

080088c2 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 80088c2:	b480      	push	{r7}
 80088c4:	b085      	sub	sp, #20
 80088c6:	af00      	add	r7, sp, #0
 80088c8:	60f8      	str	r0, [r7, #12]
 80088ca:	60b9      	str	r1, [r7, #8]
 80088cc:	4613      	mov	r3, r2
 80088ce:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 80088d0:	68bb      	ldr	r3, [r7, #8]
 80088d2:	781a      	ldrb	r2, [r3, #0]
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80088d8:	68bb      	ldr	r3, [r7, #8]
 80088da:	785a      	ldrb	r2, [r3, #1]
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80088e0:	68bb      	ldr	r3, [r7, #8]
 80088e2:	3302      	adds	r3, #2
 80088e4:	781b      	ldrb	r3, [r3, #0]
 80088e6:	b29a      	uxth	r2, r3
 80088e8:	68bb      	ldr	r3, [r7, #8]
 80088ea:	3303      	adds	r3, #3
 80088ec:	781b      	ldrb	r3, [r3, #0]
 80088ee:	b29b      	uxth	r3, r3
 80088f0:	021b      	lsls	r3, r3, #8
 80088f2:	b29b      	uxth	r3, r3
 80088f4:	4313      	orrs	r3, r2
 80088f6:	b29a      	uxth	r2, r3
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80088fc:	68bb      	ldr	r3, [r7, #8]
 80088fe:	791a      	ldrb	r2, [r3, #4]
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8008904:	68bb      	ldr	r3, [r7, #8]
 8008906:	795a      	ldrb	r2, [r3, #5]
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800890c:	68bb      	ldr	r3, [r7, #8]
 800890e:	799a      	ldrb	r2, [r3, #6]
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8008914:	68bb      	ldr	r3, [r7, #8]
 8008916:	79da      	ldrb	r2, [r3, #7]
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	79db      	ldrb	r3, [r3, #7]
 8008920:	2b20      	cmp	r3, #32
 8008922:	dc11      	bgt.n	8008948 <USBH_ParseDevDesc+0x86>
 8008924:	2b08      	cmp	r3, #8
 8008926:	db16      	blt.n	8008956 <USBH_ParseDevDesc+0x94>
 8008928:	3b08      	subs	r3, #8
 800892a:	2201      	movs	r2, #1
 800892c:	fa02 f303 	lsl.w	r3, r2, r3
 8008930:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8008934:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008938:	2b00      	cmp	r3, #0
 800893a:	bf14      	ite	ne
 800893c:	2301      	movne	r3, #1
 800893e:	2300      	moveq	r3, #0
 8008940:	b2db      	uxtb	r3, r3
 8008942:	2b00      	cmp	r3, #0
 8008944:	d102      	bne.n	800894c <USBH_ParseDevDesc+0x8a>
 8008946:	e006      	b.n	8008956 <USBH_ParseDevDesc+0x94>
 8008948:	2b40      	cmp	r3, #64	; 0x40
 800894a:	d104      	bne.n	8008956 <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	79da      	ldrb	r2, [r3, #7]
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	71da      	strb	r2, [r3, #7]
      break;
 8008954:	e003      	b.n	800895e <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	2240      	movs	r2, #64	; 0x40
 800895a:	71da      	strb	r2, [r3, #7]
      break;
 800895c:	bf00      	nop
  }

  if (length > 8U)
 800895e:	88fb      	ldrh	r3, [r7, #6]
 8008960:	2b08      	cmp	r3, #8
 8008962:	d939      	bls.n	80089d8 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8008964:	68bb      	ldr	r3, [r7, #8]
 8008966:	3308      	adds	r3, #8
 8008968:	781b      	ldrb	r3, [r3, #0]
 800896a:	b29a      	uxth	r2, r3
 800896c:	68bb      	ldr	r3, [r7, #8]
 800896e:	3309      	adds	r3, #9
 8008970:	781b      	ldrb	r3, [r3, #0]
 8008972:	b29b      	uxth	r3, r3
 8008974:	021b      	lsls	r3, r3, #8
 8008976:	b29b      	uxth	r3, r3
 8008978:	4313      	orrs	r3, r2
 800897a:	b29a      	uxth	r2, r3
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8008980:	68bb      	ldr	r3, [r7, #8]
 8008982:	330a      	adds	r3, #10
 8008984:	781b      	ldrb	r3, [r3, #0]
 8008986:	b29a      	uxth	r2, r3
 8008988:	68bb      	ldr	r3, [r7, #8]
 800898a:	330b      	adds	r3, #11
 800898c:	781b      	ldrb	r3, [r3, #0]
 800898e:	b29b      	uxth	r3, r3
 8008990:	021b      	lsls	r3, r3, #8
 8008992:	b29b      	uxth	r3, r3
 8008994:	4313      	orrs	r3, r2
 8008996:	b29a      	uxth	r2, r3
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800899c:	68bb      	ldr	r3, [r7, #8]
 800899e:	330c      	adds	r3, #12
 80089a0:	781b      	ldrb	r3, [r3, #0]
 80089a2:	b29a      	uxth	r2, r3
 80089a4:	68bb      	ldr	r3, [r7, #8]
 80089a6:	330d      	adds	r3, #13
 80089a8:	781b      	ldrb	r3, [r3, #0]
 80089aa:	b29b      	uxth	r3, r3
 80089ac:	021b      	lsls	r3, r3, #8
 80089ae:	b29b      	uxth	r3, r3
 80089b0:	4313      	orrs	r3, r2
 80089b2:	b29a      	uxth	r2, r3
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 80089b8:	68bb      	ldr	r3, [r7, #8]
 80089ba:	7b9a      	ldrb	r2, [r3, #14]
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 80089c0:	68bb      	ldr	r3, [r7, #8]
 80089c2:	7bda      	ldrb	r2, [r3, #15]
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 80089c8:	68bb      	ldr	r3, [r7, #8]
 80089ca:	7c1a      	ldrb	r2, [r3, #16]
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 80089d0:	68bb      	ldr	r3, [r7, #8]
 80089d2:	7c5a      	ldrb	r2, [r3, #17]
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	745a      	strb	r2, [r3, #17]
  }
}
 80089d8:	bf00      	nop
 80089da:	3714      	adds	r7, #20
 80089dc:	46bd      	mov	sp, r7
 80089de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e2:	4770      	bx	lr

080089e4 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b08c      	sub	sp, #48	; 0x30
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	60f8      	str	r0, [r7, #12]
 80089ec:	60b9      	str	r1, [r7, #8]
 80089ee:	4613      	mov	r3, r2
 80089f0:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80089f8:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 80089fa:	2300      	movs	r3, #0
 80089fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8008a00:	68bb      	ldr	r3, [r7, #8]
 8008a02:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008a04:	2300      	movs	r3, #0
 8008a06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8008a10:	68bb      	ldr	r3, [r7, #8]
 8008a12:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8008a14:	68bb      	ldr	r3, [r7, #8]
 8008a16:	781a      	ldrb	r2, [r3, #0]
 8008a18:	6a3b      	ldr	r3, [r7, #32]
 8008a1a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8008a1c:	68bb      	ldr	r3, [r7, #8]
 8008a1e:	785a      	ldrb	r2, [r3, #1]
 8008a20:	6a3b      	ldr	r3, [r7, #32]
 8008a22:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8008a24:	68bb      	ldr	r3, [r7, #8]
 8008a26:	3302      	adds	r3, #2
 8008a28:	781b      	ldrb	r3, [r3, #0]
 8008a2a:	b29a      	uxth	r2, r3
 8008a2c:	68bb      	ldr	r3, [r7, #8]
 8008a2e:	3303      	adds	r3, #3
 8008a30:	781b      	ldrb	r3, [r3, #0]
 8008a32:	b29b      	uxth	r3, r3
 8008a34:	021b      	lsls	r3, r3, #8
 8008a36:	b29b      	uxth	r3, r3
 8008a38:	4313      	orrs	r3, r2
 8008a3a:	b29b      	uxth	r3, r3
 8008a3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a40:	bf28      	it	cs
 8008a42:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8008a46:	b29a      	uxth	r2, r3
 8008a48:	6a3b      	ldr	r3, [r7, #32]
 8008a4a:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8008a4c:	68bb      	ldr	r3, [r7, #8]
 8008a4e:	791a      	ldrb	r2, [r3, #4]
 8008a50:	6a3b      	ldr	r3, [r7, #32]
 8008a52:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8008a54:	68bb      	ldr	r3, [r7, #8]
 8008a56:	795a      	ldrb	r2, [r3, #5]
 8008a58:	6a3b      	ldr	r3, [r7, #32]
 8008a5a:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8008a5c:	68bb      	ldr	r3, [r7, #8]
 8008a5e:	799a      	ldrb	r2, [r3, #6]
 8008a60:	6a3b      	ldr	r3, [r7, #32]
 8008a62:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8008a64:	68bb      	ldr	r3, [r7, #8]
 8008a66:	79da      	ldrb	r2, [r3, #7]
 8008a68:	6a3b      	ldr	r3, [r7, #32]
 8008a6a:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8008a6c:	68bb      	ldr	r3, [r7, #8]
 8008a6e:	7a1a      	ldrb	r2, [r3, #8]
 8008a70:	6a3b      	ldr	r3, [r7, #32]
 8008a72:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8008a74:	6a3b      	ldr	r3, [r7, #32]
 8008a76:	781b      	ldrb	r3, [r3, #0]
 8008a78:	2b09      	cmp	r3, #9
 8008a7a:	d002      	beq.n	8008a82 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8008a7c:	6a3b      	ldr	r3, [r7, #32]
 8008a7e:	2209      	movs	r2, #9
 8008a80:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008a82:	88fb      	ldrh	r3, [r7, #6]
 8008a84:	2b09      	cmp	r3, #9
 8008a86:	f240 809d 	bls.w	8008bc4 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8008a8a:	2309      	movs	r3, #9
 8008a8c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008a8e:	2300      	movs	r3, #0
 8008a90:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008a92:	e081      	b.n	8008b98 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008a94:	f107 0316 	add.w	r3, r7, #22
 8008a98:	4619      	mov	r1, r3
 8008a9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a9c:	f000 f99f 	bl	8008dde <USBH_GetNextDesc>
 8008aa0:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8008aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aa4:	785b      	ldrb	r3, [r3, #1]
 8008aa6:	2b04      	cmp	r3, #4
 8008aa8:	d176      	bne.n	8008b98 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8008aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aac:	781b      	ldrb	r3, [r3, #0]
 8008aae:	2b09      	cmp	r3, #9
 8008ab0:	d002      	beq.n	8008ab8 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8008ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ab4:	2209      	movs	r2, #9
 8008ab6:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8008ab8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008abc:	221a      	movs	r2, #26
 8008abe:	fb02 f303 	mul.w	r3, r2, r3
 8008ac2:	3308      	adds	r3, #8
 8008ac4:	6a3a      	ldr	r2, [r7, #32]
 8008ac6:	4413      	add	r3, r2
 8008ac8:	3302      	adds	r3, #2
 8008aca:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008acc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008ace:	69f8      	ldr	r0, [r7, #28]
 8008ad0:	f000 f87e 	bl	8008bd0 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8008ada:	2300      	movs	r3, #0
 8008adc:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008ade:	e043      	b.n	8008b68 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008ae0:	f107 0316 	add.w	r3, r7, #22
 8008ae4:	4619      	mov	r1, r3
 8008ae6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008ae8:	f000 f979 	bl	8008dde <USBH_GetNextDesc>
 8008aec:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008af0:	785b      	ldrb	r3, [r3, #1]
 8008af2:	2b05      	cmp	r3, #5
 8008af4:	d138      	bne.n	8008b68 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8008af6:	69fb      	ldr	r3, [r7, #28]
 8008af8:	795b      	ldrb	r3, [r3, #5]
 8008afa:	2b01      	cmp	r3, #1
 8008afc:	d10f      	bne.n	8008b1e <USBH_ParseCfgDesc+0x13a>
 8008afe:	69fb      	ldr	r3, [r7, #28]
 8008b00:	799b      	ldrb	r3, [r3, #6]
 8008b02:	2b02      	cmp	r3, #2
 8008b04:	d10b      	bne.n	8008b1e <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008b06:	69fb      	ldr	r3, [r7, #28]
 8008b08:	79db      	ldrb	r3, [r3, #7]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d10f      	bne.n	8008b2e <USBH_ParseCfgDesc+0x14a>
 8008b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b10:	781b      	ldrb	r3, [r3, #0]
 8008b12:	2b09      	cmp	r3, #9
 8008b14:	d00b      	beq.n	8008b2e <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8008b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b18:	2209      	movs	r2, #9
 8008b1a:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008b1c:	e007      	b.n	8008b2e <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8008b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b20:	781b      	ldrb	r3, [r3, #0]
 8008b22:	2b07      	cmp	r3, #7
 8008b24:	d004      	beq.n	8008b30 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8008b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b28:	2207      	movs	r2, #7
 8008b2a:	701a      	strb	r2, [r3, #0]
 8008b2c:	e000      	b.n	8008b30 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008b2e:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008b30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008b34:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008b38:	3201      	adds	r2, #1
 8008b3a:	00d2      	lsls	r2, r2, #3
 8008b3c:	211a      	movs	r1, #26
 8008b3e:	fb01 f303 	mul.w	r3, r1, r3
 8008b42:	4413      	add	r3, r2
 8008b44:	3308      	adds	r3, #8
 8008b46:	6a3a      	ldr	r2, [r7, #32]
 8008b48:	4413      	add	r3, r2
 8008b4a:	3304      	adds	r3, #4
 8008b4c:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8008b4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b50:	69b9      	ldr	r1, [r7, #24]
 8008b52:	68f8      	ldr	r0, [r7, #12]
 8008b54:	f000 f86b 	bl	8008c2e <USBH_ParseEPDesc>
 8008b58:	4603      	mov	r3, r0
 8008b5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8008b5e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008b62:	3301      	adds	r3, #1
 8008b64:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008b68:	69fb      	ldr	r3, [r7, #28]
 8008b6a:	791b      	ldrb	r3, [r3, #4]
 8008b6c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008b70:	429a      	cmp	r2, r3
 8008b72:	d204      	bcs.n	8008b7e <USBH_ParseCfgDesc+0x19a>
 8008b74:	6a3b      	ldr	r3, [r7, #32]
 8008b76:	885a      	ldrh	r2, [r3, #2]
 8008b78:	8afb      	ldrh	r3, [r7, #22]
 8008b7a:	429a      	cmp	r2, r3
 8008b7c:	d8b0      	bhi.n	8008ae0 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8008b7e:	69fb      	ldr	r3, [r7, #28]
 8008b80:	791b      	ldrb	r3, [r3, #4]
 8008b82:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008b86:	429a      	cmp	r2, r3
 8008b88:	d201      	bcs.n	8008b8e <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8008b8a:	2303      	movs	r3, #3
 8008b8c:	e01c      	b.n	8008bc8 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8008b8e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008b92:	3301      	adds	r3, #1
 8008b94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008b98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008b9c:	2b01      	cmp	r3, #1
 8008b9e:	d805      	bhi.n	8008bac <USBH_ParseCfgDesc+0x1c8>
 8008ba0:	6a3b      	ldr	r3, [r7, #32]
 8008ba2:	885a      	ldrh	r2, [r3, #2]
 8008ba4:	8afb      	ldrh	r3, [r7, #22]
 8008ba6:	429a      	cmp	r2, r3
 8008ba8:	f63f af74 	bhi.w	8008a94 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8008bac:	6a3b      	ldr	r3, [r7, #32]
 8008bae:	791b      	ldrb	r3, [r3, #4]
 8008bb0:	2b02      	cmp	r3, #2
 8008bb2:	bf28      	it	cs
 8008bb4:	2302      	movcs	r3, #2
 8008bb6:	b2db      	uxtb	r3, r3
 8008bb8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8008bbc:	429a      	cmp	r2, r3
 8008bbe:	d201      	bcs.n	8008bc4 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8008bc0:	2303      	movs	r3, #3
 8008bc2:	e001      	b.n	8008bc8 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8008bc4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8008bc8:	4618      	mov	r0, r3
 8008bca:	3730      	adds	r7, #48	; 0x30
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	bd80      	pop	{r7, pc}

08008bd0 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8008bd0:	b480      	push	{r7}
 8008bd2:	b083      	sub	sp, #12
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
 8008bd8:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	781a      	ldrb	r2, [r3, #0]
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	785a      	ldrb	r2, [r3, #1]
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	789a      	ldrb	r2, [r3, #2]
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	78da      	ldrb	r2, [r3, #3]
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8008bfa:	683b      	ldr	r3, [r7, #0]
 8008bfc:	791a      	ldrb	r2, [r3, #4]
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8008c02:	683b      	ldr	r3, [r7, #0]
 8008c04:	795a      	ldrb	r2, [r3, #5]
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	799a      	ldrb	r2, [r3, #6]
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8008c12:	683b      	ldr	r3, [r7, #0]
 8008c14:	79da      	ldrb	r2, [r3, #7]
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8008c1a:	683b      	ldr	r3, [r7, #0]
 8008c1c:	7a1a      	ldrb	r2, [r3, #8]
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	721a      	strb	r2, [r3, #8]
}
 8008c22:	bf00      	nop
 8008c24:	370c      	adds	r7, #12
 8008c26:	46bd      	mov	sp, r7
 8008c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2c:	4770      	bx	lr

08008c2e <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8008c2e:	b480      	push	{r7}
 8008c30:	b087      	sub	sp, #28
 8008c32:	af00      	add	r7, sp, #0
 8008c34:	60f8      	str	r0, [r7, #12]
 8008c36:	60b9      	str	r1, [r7, #8]
 8008c38:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	781a      	ldrb	r2, [r3, #0]
 8008c42:	68bb      	ldr	r3, [r7, #8]
 8008c44:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	785a      	ldrb	r2, [r3, #1]
 8008c4a:	68bb      	ldr	r3, [r7, #8]
 8008c4c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	789a      	ldrb	r2, [r3, #2]
 8008c52:	68bb      	ldr	r3, [r7, #8]
 8008c54:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	78da      	ldrb	r2, [r3, #3]
 8008c5a:	68bb      	ldr	r3, [r7, #8]
 8008c5c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	3304      	adds	r3, #4
 8008c62:	781b      	ldrb	r3, [r3, #0]
 8008c64:	b29a      	uxth	r2, r3
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	3305      	adds	r3, #5
 8008c6a:	781b      	ldrb	r3, [r3, #0]
 8008c6c:	b29b      	uxth	r3, r3
 8008c6e:	021b      	lsls	r3, r3, #8
 8008c70:	b29b      	uxth	r3, r3
 8008c72:	4313      	orrs	r3, r2
 8008c74:	b29a      	uxth	r2, r3
 8008c76:	68bb      	ldr	r3, [r7, #8]
 8008c78:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	799a      	ldrb	r2, [r3, #6]
 8008c7e:	68bb      	ldr	r3, [r7, #8]
 8008c80:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8008c82:	68bb      	ldr	r3, [r7, #8]
 8008c84:	889b      	ldrh	r3, [r3, #4]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d102      	bne.n	8008c90 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8008c8a:	2303      	movs	r3, #3
 8008c8c:	75fb      	strb	r3, [r7, #23]
 8008c8e:	e033      	b.n	8008cf8 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8008c90:	68bb      	ldr	r3, [r7, #8]
 8008c92:	889b      	ldrh	r3, [r3, #4]
 8008c94:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008c98:	f023 0307 	bic.w	r3, r3, #7
 8008c9c:	b29a      	uxth	r2, r3
 8008c9e:	68bb      	ldr	r3, [r7, #8]
 8008ca0:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 8008ca2:	68bb      	ldr	r3, [r7, #8]
 8008ca4:	889b      	ldrh	r3, [r3, #4]
 8008ca6:	b21a      	sxth	r2, r3
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	3304      	adds	r3, #4
 8008cac:	781b      	ldrb	r3, [r3, #0]
 8008cae:	b299      	uxth	r1, r3
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	3305      	adds	r3, #5
 8008cb4:	781b      	ldrb	r3, [r3, #0]
 8008cb6:	b29b      	uxth	r3, r3
 8008cb8:	021b      	lsls	r3, r3, #8
 8008cba:	b29b      	uxth	r3, r3
 8008cbc:	430b      	orrs	r3, r1
 8008cbe:	b29b      	uxth	r3, r3
 8008cc0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d110      	bne.n	8008cea <USBH_ParseEPDesc+0xbc>
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	3304      	adds	r3, #4
 8008ccc:	781b      	ldrb	r3, [r3, #0]
 8008cce:	b299      	uxth	r1, r3
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	3305      	adds	r3, #5
 8008cd4:	781b      	ldrb	r3, [r3, #0]
 8008cd6:	b29b      	uxth	r3, r3
 8008cd8:	021b      	lsls	r3, r3, #8
 8008cda:	b29b      	uxth	r3, r3
 8008cdc:	430b      	orrs	r3, r1
 8008cde:	b29b      	uxth	r3, r3
 8008ce0:	b21b      	sxth	r3, r3
 8008ce2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008ce6:	b21b      	sxth	r3, r3
 8008ce8:	e001      	b.n	8008cee <USBH_ParseEPDesc+0xc0>
 8008cea:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008cee:	4313      	orrs	r3, r2
 8008cf0:	b21b      	sxth	r3, r3
 8008cf2:	b29a      	uxth	r2, r3
 8008cf4:	68bb      	ldr	r3, [r7, #8]
 8008cf6:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d116      	bne.n	8008d30 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008d02:	68bb      	ldr	r3, [r7, #8]
 8008d04:	78db      	ldrb	r3, [r3, #3]
 8008d06:	f003 0303 	and.w	r3, r3, #3
 8008d0a:	2b01      	cmp	r3, #1
 8008d0c:	d005      	beq.n	8008d1a <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8008d0e:	68bb      	ldr	r3, [r7, #8]
 8008d10:	78db      	ldrb	r3, [r3, #3]
 8008d12:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008d16:	2b03      	cmp	r3, #3
 8008d18:	d127      	bne.n	8008d6a <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008d1a:	68bb      	ldr	r3, [r7, #8]
 8008d1c:	799b      	ldrb	r3, [r3, #6]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d003      	beq.n	8008d2a <USBH_ParseEPDesc+0xfc>
 8008d22:	68bb      	ldr	r3, [r7, #8]
 8008d24:	799b      	ldrb	r3, [r3, #6]
 8008d26:	2b10      	cmp	r3, #16
 8008d28:	d91f      	bls.n	8008d6a <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8008d2a:	2303      	movs	r3, #3
 8008d2c:	75fb      	strb	r3, [r7, #23]
 8008d2e:	e01c      	b.n	8008d6a <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8008d30:	68bb      	ldr	r3, [r7, #8]
 8008d32:	78db      	ldrb	r3, [r3, #3]
 8008d34:	f003 0303 	and.w	r3, r3, #3
 8008d38:	2b01      	cmp	r3, #1
 8008d3a:	d10a      	bne.n	8008d52 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008d3c:	68bb      	ldr	r3, [r7, #8]
 8008d3e:	799b      	ldrb	r3, [r3, #6]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d003      	beq.n	8008d4c <USBH_ParseEPDesc+0x11e>
 8008d44:	68bb      	ldr	r3, [r7, #8]
 8008d46:	799b      	ldrb	r3, [r3, #6]
 8008d48:	2b10      	cmp	r3, #16
 8008d4a:	d90e      	bls.n	8008d6a <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8008d4c:	2303      	movs	r3, #3
 8008d4e:	75fb      	strb	r3, [r7, #23]
 8008d50:	e00b      	b.n	8008d6a <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8008d52:	68bb      	ldr	r3, [r7, #8]
 8008d54:	78db      	ldrb	r3, [r3, #3]
 8008d56:	f003 0303 	and.w	r3, r3, #3
 8008d5a:	2b03      	cmp	r3, #3
 8008d5c:	d105      	bne.n	8008d6a <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 8008d5e:	68bb      	ldr	r3, [r7, #8]
 8008d60:	799b      	ldrb	r3, [r3, #6]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d101      	bne.n	8008d6a <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8008d66:	2303      	movs	r3, #3
 8008d68:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8008d6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	371c      	adds	r7, #28
 8008d70:	46bd      	mov	sp, r7
 8008d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d76:	4770      	bx	lr

08008d78 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008d78:	b480      	push	{r7}
 8008d7a:	b087      	sub	sp, #28
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	60f8      	str	r0, [r7, #12]
 8008d80:	60b9      	str	r1, [r7, #8]
 8008d82:	4613      	mov	r3, r2
 8008d84:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	3301      	adds	r3, #1
 8008d8a:	781b      	ldrb	r3, [r3, #0]
 8008d8c:	2b03      	cmp	r3, #3
 8008d8e:	d120      	bne.n	8008dd2 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	781b      	ldrb	r3, [r3, #0]
 8008d94:	1e9a      	subs	r2, r3, #2
 8008d96:	88fb      	ldrh	r3, [r7, #6]
 8008d98:	4293      	cmp	r3, r2
 8008d9a:	bf28      	it	cs
 8008d9c:	4613      	movcs	r3, r2
 8008d9e:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	3302      	adds	r3, #2
 8008da4:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008da6:	2300      	movs	r3, #0
 8008da8:	82fb      	strh	r3, [r7, #22]
 8008daa:	e00b      	b.n	8008dc4 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008dac:	8afb      	ldrh	r3, [r7, #22]
 8008dae:	68fa      	ldr	r2, [r7, #12]
 8008db0:	4413      	add	r3, r2
 8008db2:	781a      	ldrb	r2, [r3, #0]
 8008db4:	68bb      	ldr	r3, [r7, #8]
 8008db6:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008db8:	68bb      	ldr	r3, [r7, #8]
 8008dba:	3301      	adds	r3, #1
 8008dbc:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008dbe:	8afb      	ldrh	r3, [r7, #22]
 8008dc0:	3302      	adds	r3, #2
 8008dc2:	82fb      	strh	r3, [r7, #22]
 8008dc4:	8afa      	ldrh	r2, [r7, #22]
 8008dc6:	8abb      	ldrh	r3, [r7, #20]
 8008dc8:	429a      	cmp	r2, r3
 8008dca:	d3ef      	bcc.n	8008dac <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008dcc:	68bb      	ldr	r3, [r7, #8]
 8008dce:	2200      	movs	r2, #0
 8008dd0:	701a      	strb	r2, [r3, #0]
  }
}
 8008dd2:	bf00      	nop
 8008dd4:	371c      	adds	r7, #28
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ddc:	4770      	bx	lr

08008dde <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8008dde:	b480      	push	{r7}
 8008de0:	b085      	sub	sp, #20
 8008de2:	af00      	add	r7, sp, #0
 8008de4:	6078      	str	r0, [r7, #4]
 8008de6:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008de8:	683b      	ldr	r3, [r7, #0]
 8008dea:	881a      	ldrh	r2, [r3, #0]
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	781b      	ldrb	r3, [r3, #0]
 8008df0:	b29b      	uxth	r3, r3
 8008df2:	4413      	add	r3, r2
 8008df4:	b29a      	uxth	r2, r3
 8008df6:	683b      	ldr	r3, [r7, #0]
 8008df8:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	781b      	ldrb	r3, [r3, #0]
 8008dfe:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	4413      	add	r3, r2
 8008e04:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008e06:	68fb      	ldr	r3, [r7, #12]
}
 8008e08:	4618      	mov	r0, r3
 8008e0a:	3714      	adds	r7, #20
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e12:	4770      	bx	lr

08008e14 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b086      	sub	sp, #24
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	60f8      	str	r0, [r7, #12]
 8008e1c:	60b9      	str	r1, [r7, #8]
 8008e1e:	4613      	mov	r3, r2
 8008e20:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008e22:	2301      	movs	r3, #1
 8008e24:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	789b      	ldrb	r3, [r3, #2]
 8008e2a:	2b01      	cmp	r3, #1
 8008e2c:	d002      	beq.n	8008e34 <USBH_CtlReq+0x20>
 8008e2e:	2b02      	cmp	r3, #2
 8008e30:	d01d      	beq.n	8008e6e <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 8008e32:	e043      	b.n	8008ebc <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	68ba      	ldr	r2, [r7, #8]
 8008e38:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	88fa      	ldrh	r2, [r7, #6]
 8008e3e:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	2201      	movs	r2, #1
 8008e44:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	2202      	movs	r2, #2
 8008e4a:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008e4c:	2301      	movs	r3, #1
 8008e4e:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	2203      	movs	r2, #3
 8008e54:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008e64:	2200      	movs	r2, #0
 8008e66:	4619      	mov	r1, r3
 8008e68:	f000 fc5a 	bl	8009720 <osMessagePut>
      break;
 8008e6c:	e026      	b.n	8008ebc <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 8008e6e:	68f8      	ldr	r0, [r7, #12]
 8008e70:	f000 f82a 	bl	8008ec8 <USBH_HandleControl>
 8008e74:	4603      	mov	r3, r0
 8008e76:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008e78:	7dfb      	ldrb	r3, [r7, #23]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d002      	beq.n	8008e84 <USBH_CtlReq+0x70>
 8008e7e:	7dfb      	ldrb	r3, [r7, #23]
 8008e80:	2b03      	cmp	r3, #3
 8008e82:	d106      	bne.n	8008e92 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	2201      	movs	r2, #1
 8008e88:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	2200      	movs	r2, #0
 8008e8e:	761a      	strb	r2, [r3, #24]
 8008e90:	e005      	b.n	8008e9e <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 8008e92:	7dfb      	ldrb	r3, [r7, #23]
 8008e94:	2b02      	cmp	r3, #2
 8008e96:	d102      	bne.n	8008e9e <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	2201      	movs	r2, #1
 8008e9c:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	2203      	movs	r2, #3
 8008ea2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	4619      	mov	r1, r3
 8008eb6:	f000 fc33 	bl	8009720 <osMessagePut>
      break;
 8008eba:	bf00      	nop
  }
  return status;
 8008ebc:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	3718      	adds	r7, #24
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	bd80      	pop	{r7, pc}
	...

08008ec8 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b086      	sub	sp, #24
 8008ecc:	af02      	add	r7, sp, #8
 8008ece:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008ed0:	2301      	movs	r3, #1
 8008ed2:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	7e1b      	ldrb	r3, [r3, #24]
 8008edc:	3b01      	subs	r3, #1
 8008ede:	2b0a      	cmp	r3, #10
 8008ee0:	f200 8229 	bhi.w	8009336 <USBH_HandleControl+0x46e>
 8008ee4:	a201      	add	r2, pc, #4	; (adr r2, 8008eec <USBH_HandleControl+0x24>)
 8008ee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008eea:	bf00      	nop
 8008eec:	08008f19 	.word	0x08008f19
 8008ef0:	08008f33 	.word	0x08008f33
 8008ef4:	08008fd5 	.word	0x08008fd5
 8008ef8:	08008ffb 	.word	0x08008ffb
 8008efc:	08009087 	.word	0x08009087
 8008f00:	080090b1 	.word	0x080090b1
 8008f04:	08009173 	.word	0x08009173
 8008f08:	08009195 	.word	0x08009195
 8008f0c:	08009227 	.word	0x08009227
 8008f10:	0800924d 	.word	0x0800924d
 8008f14:	080092df 	.word	0x080092df
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	f103 0110 	add.w	r1, r3, #16
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	795b      	ldrb	r3, [r3, #5]
 8008f22:	461a      	mov	r2, r3
 8008f24:	6878      	ldr	r0, [r7, #4]
 8008f26:	f000 fa17 	bl	8009358 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	2202      	movs	r2, #2
 8008f2e:	761a      	strb	r2, [r3, #24]
      break;
 8008f30:	e20c      	b.n	800934c <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	795b      	ldrb	r3, [r3, #5]
 8008f36:	4619      	mov	r1, r3
 8008f38:	6878      	ldr	r0, [r7, #4]
 8008f3a:	f002 fe77 	bl	800bc2c <USBH_LL_GetURBState>
 8008f3e:	4603      	mov	r3, r0
 8008f40:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008f42:	7bbb      	ldrb	r3, [r7, #14]
 8008f44:	2b01      	cmp	r3, #1
 8008f46:	d12c      	bne.n	8008fa2 <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	7c1b      	ldrb	r3, [r3, #16]
 8008f4c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008f50:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	8adb      	ldrh	r3, [r3, #22]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d00a      	beq.n	8008f70 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008f5a:	7b7b      	ldrb	r3, [r7, #13]
 8008f5c:	2b80      	cmp	r3, #128	; 0x80
 8008f5e:	d103      	bne.n	8008f68 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	2203      	movs	r2, #3
 8008f64:	761a      	strb	r2, [r3, #24]
 8008f66:	e00d      	b.n	8008f84 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	2205      	movs	r2, #5
 8008f6c:	761a      	strb	r2, [r3, #24]
 8008f6e:	e009      	b.n	8008f84 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 8008f70:	7b7b      	ldrb	r3, [r7, #13]
 8008f72:	2b80      	cmp	r3, #128	; 0x80
 8008f74:	d103      	bne.n	8008f7e <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	2209      	movs	r2, #9
 8008f7a:	761a      	strb	r2, [r3, #24]
 8008f7c:	e002      	b.n	8008f84 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	2207      	movs	r2, #7
 8008f82:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2203      	movs	r2, #3
 8008f88:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008f98:	2200      	movs	r2, #0
 8008f9a:	4619      	mov	r1, r3
 8008f9c:	f000 fbc0 	bl	8009720 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008fa0:	e1cb      	b.n	800933a <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008fa2:	7bbb      	ldrb	r3, [r7, #14]
 8008fa4:	2b04      	cmp	r3, #4
 8008fa6:	d003      	beq.n	8008fb0 <USBH_HandleControl+0xe8>
 8008fa8:	7bbb      	ldrb	r3, [r7, #14]
 8008faa:	2b02      	cmp	r3, #2
 8008fac:	f040 81c5 	bne.w	800933a <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	220b      	movs	r2, #11
 8008fb4:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	2203      	movs	r2, #3
 8008fba:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008fca:	2200      	movs	r2, #0
 8008fcc:	4619      	mov	r1, r3
 8008fce:	f000 fba7 	bl	8009720 <osMessagePut>
      break;
 8008fd2:	e1b2      	b.n	800933a <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008fda:	b29a      	uxth	r2, r3
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	6899      	ldr	r1, [r3, #8]
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	899a      	ldrh	r2, [r3, #12]
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	791b      	ldrb	r3, [r3, #4]
 8008fec:	6878      	ldr	r0, [r7, #4]
 8008fee:	f000 f9f2 	bl	80093d6 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	2204      	movs	r2, #4
 8008ff6:	761a      	strb	r2, [r3, #24]
      break;
 8008ff8:	e1a8      	b.n	800934c <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	791b      	ldrb	r3, [r3, #4]
 8008ffe:	4619      	mov	r1, r3
 8009000:	6878      	ldr	r0, [r7, #4]
 8009002:	f002 fe13 	bl	800bc2c <USBH_LL_GetURBState>
 8009006:	4603      	mov	r3, r0
 8009008:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800900a:	7bbb      	ldrb	r3, [r7, #14]
 800900c:	2b01      	cmp	r3, #1
 800900e:	d110      	bne.n	8009032 <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2209      	movs	r2, #9
 8009014:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	2203      	movs	r2, #3
 800901a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800902a:	2200      	movs	r2, #0
 800902c:	4619      	mov	r1, r3
 800902e:	f000 fb77 	bl	8009720 <osMessagePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8009032:	7bbb      	ldrb	r3, [r7, #14]
 8009034:	2b05      	cmp	r3, #5
 8009036:	d110      	bne.n	800905a <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8009038:	2303      	movs	r3, #3
 800903a:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	2203      	movs	r2, #3
 8009040:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009050:	2200      	movs	r2, #0
 8009052:	4619      	mov	r1, r3
 8009054:	f000 fb64 	bl	8009720 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009058:	e171      	b.n	800933e <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 800905a:	7bbb      	ldrb	r3, [r7, #14]
 800905c:	2b04      	cmp	r3, #4
 800905e:	f040 816e 	bne.w	800933e <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	220b      	movs	r2, #11
 8009066:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	2203      	movs	r2, #3
 800906c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800907c:	2200      	movs	r2, #0
 800907e:	4619      	mov	r1, r3
 8009080:	f000 fb4e 	bl	8009720 <osMessagePut>
      break;
 8009084:	e15b      	b.n	800933e <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	6899      	ldr	r1, [r3, #8]
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	899a      	ldrh	r2, [r3, #12]
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	795b      	ldrb	r3, [r3, #5]
 8009092:	2001      	movs	r0, #1
 8009094:	9000      	str	r0, [sp, #0]
 8009096:	6878      	ldr	r0, [r7, #4]
 8009098:	f000 f978 	bl	800938c <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80090a2:	b29a      	uxth	r2, r3
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	2206      	movs	r2, #6
 80090ac:	761a      	strb	r2, [r3, #24]
      break;
 80090ae:	e14d      	b.n	800934c <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	795b      	ldrb	r3, [r3, #5]
 80090b4:	4619      	mov	r1, r3
 80090b6:	6878      	ldr	r0, [r7, #4]
 80090b8:	f002 fdb8 	bl	800bc2c <USBH_LL_GetURBState>
 80090bc:	4603      	mov	r3, r0
 80090be:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80090c0:	7bbb      	ldrb	r3, [r7, #14]
 80090c2:	2b01      	cmp	r3, #1
 80090c4:	d111      	bne.n	80090ea <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	2207      	movs	r2, #7
 80090ca:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	2203      	movs	r2, #3
 80090d0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80090e0:	2200      	movs	r2, #0
 80090e2:	4619      	mov	r1, r3
 80090e4:	f000 fb1c 	bl	8009720 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80090e8:	e12b      	b.n	8009342 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 80090ea:	7bbb      	ldrb	r3, [r7, #14]
 80090ec:	2b05      	cmp	r3, #5
 80090ee:	d113      	bne.n	8009118 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	220c      	movs	r2, #12
 80090f4:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80090f6:	2303      	movs	r3, #3
 80090f8:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	2203      	movs	r2, #3
 80090fe:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800910e:	2200      	movs	r2, #0
 8009110:	4619      	mov	r1, r3
 8009112:	f000 fb05 	bl	8009720 <osMessagePut>
      break;
 8009116:	e114      	b.n	8009342 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009118:	7bbb      	ldrb	r3, [r7, #14]
 800911a:	2b02      	cmp	r3, #2
 800911c:	d111      	bne.n	8009142 <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	2205      	movs	r2, #5
 8009122:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	2203      	movs	r2, #3
 8009128:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009138:	2200      	movs	r2, #0
 800913a:	4619      	mov	r1, r3
 800913c:	f000 faf0 	bl	8009720 <osMessagePut>
      break;
 8009140:	e0ff      	b.n	8009342 <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 8009142:	7bbb      	ldrb	r3, [r7, #14]
 8009144:	2b04      	cmp	r3, #4
 8009146:	f040 80fc 	bne.w	8009342 <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	220b      	movs	r2, #11
 800914e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8009150:	2302      	movs	r3, #2
 8009152:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2203      	movs	r2, #3
 8009158:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009168:	2200      	movs	r2, #0
 800916a:	4619      	mov	r1, r3
 800916c:	f000 fad8 	bl	8009720 <osMessagePut>
      break;
 8009170:	e0e7      	b.n	8009342 <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	791b      	ldrb	r3, [r3, #4]
 8009176:	2200      	movs	r2, #0
 8009178:	2100      	movs	r1, #0
 800917a:	6878      	ldr	r0, [r7, #4]
 800917c:	f000 f92b 	bl	80093d6 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009186:	b29a      	uxth	r2, r3
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2208      	movs	r2, #8
 8009190:	761a      	strb	r2, [r3, #24]

      break;
 8009192:	e0db      	b.n	800934c <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	791b      	ldrb	r3, [r3, #4]
 8009198:	4619      	mov	r1, r3
 800919a:	6878      	ldr	r0, [r7, #4]
 800919c:	f002 fd46 	bl	800bc2c <USBH_LL_GetURBState>
 80091a0:	4603      	mov	r3, r0
 80091a2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80091a4:	7bbb      	ldrb	r3, [r7, #14]
 80091a6:	2b01      	cmp	r3, #1
 80091a8:	d113      	bne.n	80091d2 <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	220d      	movs	r2, #13
 80091ae:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80091b0:	2300      	movs	r3, #0
 80091b2:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	2203      	movs	r2, #3
 80091b8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80091c8:	2200      	movs	r2, #0
 80091ca:	4619      	mov	r1, r3
 80091cc:	f000 faa8 	bl	8009720 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80091d0:	e0b9      	b.n	8009346 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 80091d2:	7bbb      	ldrb	r3, [r7, #14]
 80091d4:	2b04      	cmp	r3, #4
 80091d6:	d111      	bne.n	80091fc <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	220b      	movs	r2, #11
 80091dc:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	2203      	movs	r2, #3
 80091e2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80091f2:	2200      	movs	r2, #0
 80091f4:	4619      	mov	r1, r3
 80091f6:	f000 fa93 	bl	8009720 <osMessagePut>
      break;
 80091fa:	e0a4      	b.n	8009346 <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 80091fc:	7bbb      	ldrb	r3, [r7, #14]
 80091fe:	2b05      	cmp	r3, #5
 8009200:	f040 80a1 	bne.w	8009346 <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 8009204:	2303      	movs	r3, #3
 8009206:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	2203      	movs	r2, #3
 800920c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800921c:	2200      	movs	r2, #0
 800921e:	4619      	mov	r1, r3
 8009220:	f000 fa7e 	bl	8009720 <osMessagePut>
      break;
 8009224:	e08f      	b.n	8009346 <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	795b      	ldrb	r3, [r3, #5]
 800922a:	2201      	movs	r2, #1
 800922c:	9200      	str	r2, [sp, #0]
 800922e:	2200      	movs	r2, #0
 8009230:	2100      	movs	r1, #0
 8009232:	6878      	ldr	r0, [r7, #4]
 8009234:	f000 f8aa 	bl	800938c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800923e:	b29a      	uxth	r2, r3
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	220a      	movs	r2, #10
 8009248:	761a      	strb	r2, [r3, #24]
      break;
 800924a:	e07f      	b.n	800934c <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	795b      	ldrb	r3, [r3, #5]
 8009250:	4619      	mov	r1, r3
 8009252:	6878      	ldr	r0, [r7, #4]
 8009254:	f002 fcea 	bl	800bc2c <USBH_LL_GetURBState>
 8009258:	4603      	mov	r3, r0
 800925a:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800925c:	7bbb      	ldrb	r3, [r7, #14]
 800925e:	2b01      	cmp	r3, #1
 8009260:	d113      	bne.n	800928a <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 8009262:	2300      	movs	r3, #0
 8009264:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	220d      	movs	r2, #13
 800926a:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	2203      	movs	r2, #3
 8009270:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009280:	2200      	movs	r2, #0
 8009282:	4619      	mov	r1, r3
 8009284:	f000 fa4c 	bl	8009720 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009288:	e05f      	b.n	800934a <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 800928a:	7bbb      	ldrb	r3, [r7, #14]
 800928c:	2b02      	cmp	r3, #2
 800928e:	d111      	bne.n	80092b4 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2209      	movs	r2, #9
 8009294:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	2203      	movs	r2, #3
 800929a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80092aa:	2200      	movs	r2, #0
 80092ac:	4619      	mov	r1, r3
 80092ae:	f000 fa37 	bl	8009720 <osMessagePut>
      break;
 80092b2:	e04a      	b.n	800934a <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 80092b4:	7bbb      	ldrb	r3, [r7, #14]
 80092b6:	2b04      	cmp	r3, #4
 80092b8:	d147      	bne.n	800934a <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	220b      	movs	r2, #11
 80092be:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2203      	movs	r2, #3
 80092c4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80092d4:	2200      	movs	r2, #0
 80092d6:	4619      	mov	r1, r3
 80092d8:	f000 fa22 	bl	8009720 <osMessagePut>
      break;
 80092dc:	e035      	b.n	800934a <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	7e5b      	ldrb	r3, [r3, #25]
 80092e2:	3301      	adds	r3, #1
 80092e4:	b2da      	uxtb	r2, r3
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	765a      	strb	r2, [r3, #25]
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	7e5b      	ldrb	r3, [r3, #25]
 80092ee:	2b02      	cmp	r3, #2
 80092f0:	d806      	bhi.n	8009300 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	2201      	movs	r2, #1
 80092f6:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2201      	movs	r2, #1
 80092fc:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80092fe:	e025      	b.n	800934c <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009306:	2106      	movs	r1, #6
 8009308:	6878      	ldr	r0, [r7, #4]
 800930a:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	2200      	movs	r2, #0
 8009310:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	795b      	ldrb	r3, [r3, #5]
 8009316:	4619      	mov	r1, r3
 8009318:	6878      	ldr	r0, [r7, #4]
 800931a:	f000 f90d 	bl	8009538 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	791b      	ldrb	r3, [r3, #4]
 8009322:	4619      	mov	r1, r3
 8009324:	6878      	ldr	r0, [r7, #4]
 8009326:	f000 f907 	bl	8009538 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	2200      	movs	r2, #0
 800932e:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8009330:	2302      	movs	r3, #2
 8009332:	73fb      	strb	r3, [r7, #15]
      break;
 8009334:	e00a      	b.n	800934c <USBH_HandleControl+0x484>

    default:
      break;
 8009336:	bf00      	nop
 8009338:	e008      	b.n	800934c <USBH_HandleControl+0x484>
      break;
 800933a:	bf00      	nop
 800933c:	e006      	b.n	800934c <USBH_HandleControl+0x484>
      break;
 800933e:	bf00      	nop
 8009340:	e004      	b.n	800934c <USBH_HandleControl+0x484>
      break;
 8009342:	bf00      	nop
 8009344:	e002      	b.n	800934c <USBH_HandleControl+0x484>
      break;
 8009346:	bf00      	nop
 8009348:	e000      	b.n	800934c <USBH_HandleControl+0x484>
      break;
 800934a:	bf00      	nop
  }

  return status;
 800934c:	7bfb      	ldrb	r3, [r7, #15]
}
 800934e:	4618      	mov	r0, r3
 8009350:	3710      	adds	r7, #16
 8009352:	46bd      	mov	sp, r7
 8009354:	bd80      	pop	{r7, pc}
 8009356:	bf00      	nop

08009358 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8009358:	b580      	push	{r7, lr}
 800935a:	b088      	sub	sp, #32
 800935c:	af04      	add	r7, sp, #16
 800935e:	60f8      	str	r0, [r7, #12]
 8009360:	60b9      	str	r1, [r7, #8]
 8009362:	4613      	mov	r3, r2
 8009364:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009366:	79f9      	ldrb	r1, [r7, #7]
 8009368:	2300      	movs	r3, #0
 800936a:	9303      	str	r3, [sp, #12]
 800936c:	2308      	movs	r3, #8
 800936e:	9302      	str	r3, [sp, #8]
 8009370:	68bb      	ldr	r3, [r7, #8]
 8009372:	9301      	str	r3, [sp, #4]
 8009374:	2300      	movs	r3, #0
 8009376:	9300      	str	r3, [sp, #0]
 8009378:	2300      	movs	r3, #0
 800937a:	2200      	movs	r2, #0
 800937c:	68f8      	ldr	r0, [r7, #12]
 800937e:	f002 fc24 	bl	800bbca <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8009382:	2300      	movs	r3, #0
}
 8009384:	4618      	mov	r0, r3
 8009386:	3710      	adds	r7, #16
 8009388:	46bd      	mov	sp, r7
 800938a:	bd80      	pop	{r7, pc}

0800938c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800938c:	b580      	push	{r7, lr}
 800938e:	b088      	sub	sp, #32
 8009390:	af04      	add	r7, sp, #16
 8009392:	60f8      	str	r0, [r7, #12]
 8009394:	60b9      	str	r1, [r7, #8]
 8009396:	4611      	mov	r1, r2
 8009398:	461a      	mov	r2, r3
 800939a:	460b      	mov	r3, r1
 800939c:	80fb      	strh	r3, [r7, #6]
 800939e:	4613      	mov	r3, r2
 80093a0:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d001      	beq.n	80093b0 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80093ac:	2300      	movs	r3, #0
 80093ae:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80093b0:	7979      	ldrb	r1, [r7, #5]
 80093b2:	7e3b      	ldrb	r3, [r7, #24]
 80093b4:	9303      	str	r3, [sp, #12]
 80093b6:	88fb      	ldrh	r3, [r7, #6]
 80093b8:	9302      	str	r3, [sp, #8]
 80093ba:	68bb      	ldr	r3, [r7, #8]
 80093bc:	9301      	str	r3, [sp, #4]
 80093be:	2301      	movs	r3, #1
 80093c0:	9300      	str	r3, [sp, #0]
 80093c2:	2300      	movs	r3, #0
 80093c4:	2200      	movs	r2, #0
 80093c6:	68f8      	ldr	r0, [r7, #12]
 80093c8:	f002 fbff 	bl	800bbca <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80093cc:	2300      	movs	r3, #0
}
 80093ce:	4618      	mov	r0, r3
 80093d0:	3710      	adds	r7, #16
 80093d2:	46bd      	mov	sp, r7
 80093d4:	bd80      	pop	{r7, pc}

080093d6 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80093d6:	b580      	push	{r7, lr}
 80093d8:	b088      	sub	sp, #32
 80093da:	af04      	add	r7, sp, #16
 80093dc:	60f8      	str	r0, [r7, #12]
 80093de:	60b9      	str	r1, [r7, #8]
 80093e0:	4611      	mov	r1, r2
 80093e2:	461a      	mov	r2, r3
 80093e4:	460b      	mov	r3, r1
 80093e6:	80fb      	strh	r3, [r7, #6]
 80093e8:	4613      	mov	r3, r2
 80093ea:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80093ec:	7979      	ldrb	r1, [r7, #5]
 80093ee:	2300      	movs	r3, #0
 80093f0:	9303      	str	r3, [sp, #12]
 80093f2:	88fb      	ldrh	r3, [r7, #6]
 80093f4:	9302      	str	r3, [sp, #8]
 80093f6:	68bb      	ldr	r3, [r7, #8]
 80093f8:	9301      	str	r3, [sp, #4]
 80093fa:	2301      	movs	r3, #1
 80093fc:	9300      	str	r3, [sp, #0]
 80093fe:	2300      	movs	r3, #0
 8009400:	2201      	movs	r2, #1
 8009402:	68f8      	ldr	r0, [r7, #12]
 8009404:	f002 fbe1 	bl	800bbca <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009408:	2300      	movs	r3, #0

}
 800940a:	4618      	mov	r0, r3
 800940c:	3710      	adds	r7, #16
 800940e:	46bd      	mov	sp, r7
 8009410:	bd80      	pop	{r7, pc}

08009412 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8009412:	b580      	push	{r7, lr}
 8009414:	b088      	sub	sp, #32
 8009416:	af04      	add	r7, sp, #16
 8009418:	60f8      	str	r0, [r7, #12]
 800941a:	60b9      	str	r1, [r7, #8]
 800941c:	4611      	mov	r1, r2
 800941e:	461a      	mov	r2, r3
 8009420:	460b      	mov	r3, r1
 8009422:	80fb      	strh	r3, [r7, #6]
 8009424:	4613      	mov	r3, r2
 8009426:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800942e:	2b00      	cmp	r3, #0
 8009430:	d001      	beq.n	8009436 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8009432:	2300      	movs	r3, #0
 8009434:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009436:	7979      	ldrb	r1, [r7, #5]
 8009438:	7e3b      	ldrb	r3, [r7, #24]
 800943a:	9303      	str	r3, [sp, #12]
 800943c:	88fb      	ldrh	r3, [r7, #6]
 800943e:	9302      	str	r3, [sp, #8]
 8009440:	68bb      	ldr	r3, [r7, #8]
 8009442:	9301      	str	r3, [sp, #4]
 8009444:	2301      	movs	r3, #1
 8009446:	9300      	str	r3, [sp, #0]
 8009448:	2302      	movs	r3, #2
 800944a:	2200      	movs	r2, #0
 800944c:	68f8      	ldr	r0, [r7, #12]
 800944e:	f002 fbbc 	bl	800bbca <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8009452:	2300      	movs	r3, #0
}
 8009454:	4618      	mov	r0, r3
 8009456:	3710      	adds	r7, #16
 8009458:	46bd      	mov	sp, r7
 800945a:	bd80      	pop	{r7, pc}

0800945c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800945c:	b580      	push	{r7, lr}
 800945e:	b088      	sub	sp, #32
 8009460:	af04      	add	r7, sp, #16
 8009462:	60f8      	str	r0, [r7, #12]
 8009464:	60b9      	str	r1, [r7, #8]
 8009466:	4611      	mov	r1, r2
 8009468:	461a      	mov	r2, r3
 800946a:	460b      	mov	r3, r1
 800946c:	80fb      	strh	r3, [r7, #6]
 800946e:	4613      	mov	r3, r2
 8009470:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009472:	7979      	ldrb	r1, [r7, #5]
 8009474:	2300      	movs	r3, #0
 8009476:	9303      	str	r3, [sp, #12]
 8009478:	88fb      	ldrh	r3, [r7, #6]
 800947a:	9302      	str	r3, [sp, #8]
 800947c:	68bb      	ldr	r3, [r7, #8]
 800947e:	9301      	str	r3, [sp, #4]
 8009480:	2301      	movs	r3, #1
 8009482:	9300      	str	r3, [sp, #0]
 8009484:	2302      	movs	r3, #2
 8009486:	2201      	movs	r2, #1
 8009488:	68f8      	ldr	r0, [r7, #12]
 800948a:	f002 fb9e 	bl	800bbca <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800948e:	2300      	movs	r3, #0
}
 8009490:	4618      	mov	r0, r3
 8009492:	3710      	adds	r7, #16
 8009494:	46bd      	mov	sp, r7
 8009496:	bd80      	pop	{r7, pc}

08009498 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009498:	b580      	push	{r7, lr}
 800949a:	b086      	sub	sp, #24
 800949c:	af04      	add	r7, sp, #16
 800949e:	6078      	str	r0, [r7, #4]
 80094a0:	4608      	mov	r0, r1
 80094a2:	4611      	mov	r1, r2
 80094a4:	461a      	mov	r2, r3
 80094a6:	4603      	mov	r3, r0
 80094a8:	70fb      	strb	r3, [r7, #3]
 80094aa:	460b      	mov	r3, r1
 80094ac:	70bb      	strb	r3, [r7, #2]
 80094ae:	4613      	mov	r3, r2
 80094b0:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80094b2:	7878      	ldrb	r0, [r7, #1]
 80094b4:	78ba      	ldrb	r2, [r7, #2]
 80094b6:	78f9      	ldrb	r1, [r7, #3]
 80094b8:	8b3b      	ldrh	r3, [r7, #24]
 80094ba:	9302      	str	r3, [sp, #8]
 80094bc:	7d3b      	ldrb	r3, [r7, #20]
 80094be:	9301      	str	r3, [sp, #4]
 80094c0:	7c3b      	ldrb	r3, [r7, #16]
 80094c2:	9300      	str	r3, [sp, #0]
 80094c4:	4603      	mov	r3, r0
 80094c6:	6878      	ldr	r0, [r7, #4]
 80094c8:	f002 fb31 	bl	800bb2e <USBH_LL_OpenPipe>

  return USBH_OK;
 80094cc:	2300      	movs	r3, #0
}
 80094ce:	4618      	mov	r0, r3
 80094d0:	3708      	adds	r7, #8
 80094d2:	46bd      	mov	sp, r7
 80094d4:	bd80      	pop	{r7, pc}

080094d6 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80094d6:	b580      	push	{r7, lr}
 80094d8:	b082      	sub	sp, #8
 80094da:	af00      	add	r7, sp, #0
 80094dc:	6078      	str	r0, [r7, #4]
 80094de:	460b      	mov	r3, r1
 80094e0:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 80094e2:	78fb      	ldrb	r3, [r7, #3]
 80094e4:	4619      	mov	r1, r3
 80094e6:	6878      	ldr	r0, [r7, #4]
 80094e8:	f002 fb50 	bl	800bb8c <USBH_LL_ClosePipe>

  return USBH_OK;
 80094ec:	2300      	movs	r3, #0
}
 80094ee:	4618      	mov	r0, r3
 80094f0:	3708      	adds	r7, #8
 80094f2:	46bd      	mov	sp, r7
 80094f4:	bd80      	pop	{r7, pc}

080094f6 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80094f6:	b580      	push	{r7, lr}
 80094f8:	b084      	sub	sp, #16
 80094fa:	af00      	add	r7, sp, #0
 80094fc:	6078      	str	r0, [r7, #4]
 80094fe:	460b      	mov	r3, r1
 8009500:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8009502:	6878      	ldr	r0, [r7, #4]
 8009504:	f000 f836 	bl	8009574 <USBH_GetFreePipe>
 8009508:	4603      	mov	r3, r0
 800950a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800950c:	89fb      	ldrh	r3, [r7, #14]
 800950e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009512:	4293      	cmp	r3, r2
 8009514:	d00a      	beq.n	800952c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8009516:	78fa      	ldrb	r2, [r7, #3]
 8009518:	89fb      	ldrh	r3, [r7, #14]
 800951a:	f003 030f 	and.w	r3, r3, #15
 800951e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009522:	6879      	ldr	r1, [r7, #4]
 8009524:	33e0      	adds	r3, #224	; 0xe0
 8009526:	009b      	lsls	r3, r3, #2
 8009528:	440b      	add	r3, r1
 800952a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800952c:	89fb      	ldrh	r3, [r7, #14]
 800952e:	b2db      	uxtb	r3, r3
}
 8009530:	4618      	mov	r0, r3
 8009532:	3710      	adds	r7, #16
 8009534:	46bd      	mov	sp, r7
 8009536:	bd80      	pop	{r7, pc}

08009538 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8009538:	b480      	push	{r7}
 800953a:	b083      	sub	sp, #12
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
 8009540:	460b      	mov	r3, r1
 8009542:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8009544:	78fb      	ldrb	r3, [r7, #3]
 8009546:	2b0f      	cmp	r3, #15
 8009548:	d80d      	bhi.n	8009566 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800954a:	78fb      	ldrb	r3, [r7, #3]
 800954c:	687a      	ldr	r2, [r7, #4]
 800954e:	33e0      	adds	r3, #224	; 0xe0
 8009550:	009b      	lsls	r3, r3, #2
 8009552:	4413      	add	r3, r2
 8009554:	685a      	ldr	r2, [r3, #4]
 8009556:	78fb      	ldrb	r3, [r7, #3]
 8009558:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800955c:	6879      	ldr	r1, [r7, #4]
 800955e:	33e0      	adds	r3, #224	; 0xe0
 8009560:	009b      	lsls	r3, r3, #2
 8009562:	440b      	add	r3, r1
 8009564:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8009566:	2300      	movs	r3, #0
}
 8009568:	4618      	mov	r0, r3
 800956a:	370c      	adds	r7, #12
 800956c:	46bd      	mov	sp, r7
 800956e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009572:	4770      	bx	lr

08009574 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8009574:	b480      	push	{r7}
 8009576:	b085      	sub	sp, #20
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800957c:	2300      	movs	r3, #0
 800957e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8009580:	2300      	movs	r3, #0
 8009582:	73fb      	strb	r3, [r7, #15]
 8009584:	e00f      	b.n	80095a6 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8009586:	7bfb      	ldrb	r3, [r7, #15]
 8009588:	687a      	ldr	r2, [r7, #4]
 800958a:	33e0      	adds	r3, #224	; 0xe0
 800958c:	009b      	lsls	r3, r3, #2
 800958e:	4413      	add	r3, r2
 8009590:	685b      	ldr	r3, [r3, #4]
 8009592:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009596:	2b00      	cmp	r3, #0
 8009598:	d102      	bne.n	80095a0 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800959a:	7bfb      	ldrb	r3, [r7, #15]
 800959c:	b29b      	uxth	r3, r3
 800959e:	e007      	b.n	80095b0 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 80095a0:	7bfb      	ldrb	r3, [r7, #15]
 80095a2:	3301      	adds	r3, #1
 80095a4:	73fb      	strb	r3, [r7, #15]
 80095a6:	7bfb      	ldrb	r3, [r7, #15]
 80095a8:	2b0f      	cmp	r3, #15
 80095aa:	d9ec      	bls.n	8009586 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80095ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80095b0:	4618      	mov	r0, r3
 80095b2:	3714      	adds	r7, #20
 80095b4:	46bd      	mov	sp, r7
 80095b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ba:	4770      	bx	lr

080095bc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80095bc:	b480      	push	{r7}
 80095be:	b085      	sub	sp, #20
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	4603      	mov	r3, r0
 80095c4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80095c6:	2300      	movs	r3, #0
 80095c8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80095ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80095ce:	2b84      	cmp	r3, #132	; 0x84
 80095d0:	d005      	beq.n	80095de <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80095d2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	4413      	add	r3, r2
 80095da:	3303      	adds	r3, #3
 80095dc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80095de:	68fb      	ldr	r3, [r7, #12]
}
 80095e0:	4618      	mov	r0, r3
 80095e2:	3714      	adds	r7, #20
 80095e4:	46bd      	mov	sp, r7
 80095e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ea:	4770      	bx	lr

080095ec <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80095ec:	b480      	push	{r7}
 80095ee:	b083      	sub	sp, #12
 80095f0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80095f2:	f3ef 8305 	mrs	r3, IPSR
 80095f6:	607b      	str	r3, [r7, #4]
  return(result);
 80095f8:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	bf14      	ite	ne
 80095fe:	2301      	movne	r3, #1
 8009600:	2300      	moveq	r3, #0
 8009602:	b2db      	uxtb	r3, r3
}
 8009604:	4618      	mov	r0, r3
 8009606:	370c      	adds	r7, #12
 8009608:	46bd      	mov	sp, r7
 800960a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960e:	4770      	bx	lr

08009610 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8009610:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009612:	b089      	sub	sp, #36	; 0x24
 8009614:	af04      	add	r7, sp, #16
 8009616:	6078      	str	r0, [r7, #4]
 8009618:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	695b      	ldr	r3, [r3, #20]
 800961e:	2b00      	cmp	r3, #0
 8009620:	d020      	beq.n	8009664 <osThreadCreate+0x54>
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	699b      	ldr	r3, [r3, #24]
 8009626:	2b00      	cmp	r3, #0
 8009628:	d01c      	beq.n	8009664 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	685c      	ldr	r4, [r3, #4]
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681d      	ldr	r5, [r3, #0]
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	691e      	ldr	r6, [r3, #16]
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800963c:	4618      	mov	r0, r3
 800963e:	f7ff ffbd 	bl	80095bc <makeFreeRtosPriority>
 8009642:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	695b      	ldr	r3, [r3, #20]
 8009648:	687a      	ldr	r2, [r7, #4]
 800964a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800964c:	9202      	str	r2, [sp, #8]
 800964e:	9301      	str	r3, [sp, #4]
 8009650:	9100      	str	r1, [sp, #0]
 8009652:	683b      	ldr	r3, [r7, #0]
 8009654:	4632      	mov	r2, r6
 8009656:	4629      	mov	r1, r5
 8009658:	4620      	mov	r0, r4
 800965a:	f000 ff0d 	bl	800a478 <xTaskCreateStatic>
 800965e:	4603      	mov	r3, r0
 8009660:	60fb      	str	r3, [r7, #12]
 8009662:	e01c      	b.n	800969e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	685c      	ldr	r4, [r3, #4]
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009670:	b29e      	uxth	r6, r3
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009678:	4618      	mov	r0, r3
 800967a:	f7ff ff9f 	bl	80095bc <makeFreeRtosPriority>
 800967e:	4602      	mov	r2, r0
 8009680:	f107 030c 	add.w	r3, r7, #12
 8009684:	9301      	str	r3, [sp, #4]
 8009686:	9200      	str	r2, [sp, #0]
 8009688:	683b      	ldr	r3, [r7, #0]
 800968a:	4632      	mov	r2, r6
 800968c:	4629      	mov	r1, r5
 800968e:	4620      	mov	r0, r4
 8009690:	f000 ff4f 	bl	800a532 <xTaskCreate>
 8009694:	4603      	mov	r3, r0
 8009696:	2b01      	cmp	r3, #1
 8009698:	d001      	beq.n	800969e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800969a:	2300      	movs	r3, #0
 800969c:	e000      	b.n	80096a0 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800969e:	68fb      	ldr	r3, [r7, #12]
}
 80096a0:	4618      	mov	r0, r3
 80096a2:	3714      	adds	r7, #20
 80096a4:	46bd      	mov	sp, r7
 80096a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080096a8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80096a8:	b580      	push	{r7, lr}
 80096aa:	b084      	sub	sp, #16
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d001      	beq.n	80096be <osDelay+0x16>
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	e000      	b.n	80096c0 <osDelay+0x18>
 80096be:	2301      	movs	r3, #1
 80096c0:	4618      	mov	r0, r3
 80096c2:	f001 f877 	bl	800a7b4 <vTaskDelay>
  
  return osOK;
 80096c6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80096c8:	4618      	mov	r0, r3
 80096ca:	3710      	adds	r7, #16
 80096cc:	46bd      	mov	sp, r7
 80096ce:	bd80      	pop	{r7, pc}

080096d0 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80096d0:	b590      	push	{r4, r7, lr}
 80096d2:	b085      	sub	sp, #20
 80096d4:	af02      	add	r7, sp, #8
 80096d6:	6078      	str	r0, [r7, #4]
 80096d8:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	689b      	ldr	r3, [r3, #8]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d011      	beq.n	8009706 <osMessageCreate+0x36>
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	68db      	ldr	r3, [r3, #12]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d00d      	beq.n	8009706 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	6818      	ldr	r0, [r3, #0]
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	6859      	ldr	r1, [r3, #4]
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	689a      	ldr	r2, [r3, #8]
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	68db      	ldr	r3, [r3, #12]
 80096fa:	2400      	movs	r4, #0
 80096fc:	9400      	str	r4, [sp, #0]
 80096fe:	f000 f9df 	bl	8009ac0 <xQueueGenericCreateStatic>
 8009702:	4603      	mov	r3, r0
 8009704:	e008      	b.n	8009718 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	6818      	ldr	r0, [r3, #0]
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	685b      	ldr	r3, [r3, #4]
 800970e:	2200      	movs	r2, #0
 8009710:	4619      	mov	r1, r3
 8009712:	f000 fa4d 	bl	8009bb0 <xQueueGenericCreate>
 8009716:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8009718:	4618      	mov	r0, r3
 800971a:	370c      	adds	r7, #12
 800971c:	46bd      	mov	sp, r7
 800971e:	bd90      	pop	{r4, r7, pc}

08009720 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8009720:	b580      	push	{r7, lr}
 8009722:	b086      	sub	sp, #24
 8009724:	af00      	add	r7, sp, #0
 8009726:	60f8      	str	r0, [r7, #12]
 8009728:	60b9      	str	r1, [r7, #8]
 800972a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800972c:	2300      	movs	r3, #0
 800972e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8009734:	697b      	ldr	r3, [r7, #20]
 8009736:	2b00      	cmp	r3, #0
 8009738:	d101      	bne.n	800973e <osMessagePut+0x1e>
    ticks = 1;
 800973a:	2301      	movs	r3, #1
 800973c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800973e:	f7ff ff55 	bl	80095ec <inHandlerMode>
 8009742:	4603      	mov	r3, r0
 8009744:	2b00      	cmp	r3, #0
 8009746:	d018      	beq.n	800977a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8009748:	f107 0210 	add.w	r2, r7, #16
 800974c:	f107 0108 	add.w	r1, r7, #8
 8009750:	2300      	movs	r3, #0
 8009752:	68f8      	ldr	r0, [r7, #12]
 8009754:	f000 fb84 	bl	8009e60 <xQueueGenericSendFromISR>
 8009758:	4603      	mov	r3, r0
 800975a:	2b01      	cmp	r3, #1
 800975c:	d001      	beq.n	8009762 <osMessagePut+0x42>
      return osErrorOS;
 800975e:	23ff      	movs	r3, #255	; 0xff
 8009760:	e018      	b.n	8009794 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009762:	693b      	ldr	r3, [r7, #16]
 8009764:	2b00      	cmp	r3, #0
 8009766:	d014      	beq.n	8009792 <osMessagePut+0x72>
 8009768:	4b0c      	ldr	r3, [pc, #48]	; (800979c <osMessagePut+0x7c>)
 800976a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800976e:	601a      	str	r2, [r3, #0]
 8009770:	f3bf 8f4f 	dsb	sy
 8009774:	f3bf 8f6f 	isb	sy
 8009778:	e00b      	b.n	8009792 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800977a:	f107 0108 	add.w	r1, r7, #8
 800977e:	2300      	movs	r3, #0
 8009780:	697a      	ldr	r2, [r7, #20]
 8009782:	68f8      	ldr	r0, [r7, #12]
 8009784:	f000 fa6e 	bl	8009c64 <xQueueGenericSend>
 8009788:	4603      	mov	r3, r0
 800978a:	2b01      	cmp	r3, #1
 800978c:	d001      	beq.n	8009792 <osMessagePut+0x72>
      return osErrorOS;
 800978e:	23ff      	movs	r3, #255	; 0xff
 8009790:	e000      	b.n	8009794 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8009792:	2300      	movs	r3, #0
}
 8009794:	4618      	mov	r0, r3
 8009796:	3718      	adds	r7, #24
 8009798:	46bd      	mov	sp, r7
 800979a:	bd80      	pop	{r7, pc}
 800979c:	e000ed04 	.word	0xe000ed04

080097a0 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80097a0:	b590      	push	{r4, r7, lr}
 80097a2:	b08b      	sub	sp, #44	; 0x2c
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	60f8      	str	r0, [r7, #12]
 80097a8:	60b9      	str	r1, [r7, #8]
 80097aa:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80097ac:	68bb      	ldr	r3, [r7, #8]
 80097ae:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80097b0:	2300      	movs	r3, #0
 80097b2:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80097b4:	68bb      	ldr	r3, [r7, #8]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d10a      	bne.n	80097d0 <osMessageGet+0x30>
    event.status = osErrorParameter;
 80097ba:	2380      	movs	r3, #128	; 0x80
 80097bc:	617b      	str	r3, [r7, #20]
    return event;
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	461c      	mov	r4, r3
 80097c2:	f107 0314 	add.w	r3, r7, #20
 80097c6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80097ca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80097ce:	e054      	b.n	800987a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80097d0:	2300      	movs	r3, #0
 80097d2:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80097d4:	2300      	movs	r3, #0
 80097d6:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097de:	d103      	bne.n	80097e8 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80097e0:	f04f 33ff 	mov.w	r3, #4294967295
 80097e4:	627b      	str	r3, [r7, #36]	; 0x24
 80097e6:	e009      	b.n	80097fc <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d006      	beq.n	80097fc <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 80097f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d101      	bne.n	80097fc <osMessageGet+0x5c>
      ticks = 1;
 80097f8:	2301      	movs	r3, #1
 80097fa:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 80097fc:	f7ff fef6 	bl	80095ec <inHandlerMode>
 8009800:	4603      	mov	r3, r0
 8009802:	2b00      	cmp	r3, #0
 8009804:	d01c      	beq.n	8009840 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8009806:	f107 0220 	add.w	r2, r7, #32
 800980a:	f107 0314 	add.w	r3, r7, #20
 800980e:	3304      	adds	r3, #4
 8009810:	4619      	mov	r1, r3
 8009812:	68b8      	ldr	r0, [r7, #8]
 8009814:	f000 fca0 	bl	800a158 <xQueueReceiveFromISR>
 8009818:	4603      	mov	r3, r0
 800981a:	2b01      	cmp	r3, #1
 800981c:	d102      	bne.n	8009824 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800981e:	2310      	movs	r3, #16
 8009820:	617b      	str	r3, [r7, #20]
 8009822:	e001      	b.n	8009828 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8009824:	2300      	movs	r3, #0
 8009826:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009828:	6a3b      	ldr	r3, [r7, #32]
 800982a:	2b00      	cmp	r3, #0
 800982c:	d01d      	beq.n	800986a <osMessageGet+0xca>
 800982e:	4b15      	ldr	r3, [pc, #84]	; (8009884 <osMessageGet+0xe4>)
 8009830:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009834:	601a      	str	r2, [r3, #0]
 8009836:	f3bf 8f4f 	dsb	sy
 800983a:	f3bf 8f6f 	isb	sy
 800983e:	e014      	b.n	800986a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8009840:	f107 0314 	add.w	r3, r7, #20
 8009844:	3304      	adds	r3, #4
 8009846:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009848:	4619      	mov	r1, r3
 800984a:	68b8      	ldr	r0, [r7, #8]
 800984c:	f000 fba4 	bl	8009f98 <xQueueReceive>
 8009850:	4603      	mov	r3, r0
 8009852:	2b01      	cmp	r3, #1
 8009854:	d102      	bne.n	800985c <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8009856:	2310      	movs	r3, #16
 8009858:	617b      	str	r3, [r7, #20]
 800985a:	e006      	b.n	800986a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800985c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800985e:	2b00      	cmp	r3, #0
 8009860:	d101      	bne.n	8009866 <osMessageGet+0xc6>
 8009862:	2300      	movs	r3, #0
 8009864:	e000      	b.n	8009868 <osMessageGet+0xc8>
 8009866:	2340      	movs	r3, #64	; 0x40
 8009868:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	461c      	mov	r4, r3
 800986e:	f107 0314 	add.w	r3, r7, #20
 8009872:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009876:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800987a:	68f8      	ldr	r0, [r7, #12]
 800987c:	372c      	adds	r7, #44	; 0x2c
 800987e:	46bd      	mov	sp, r7
 8009880:	bd90      	pop	{r4, r7, pc}
 8009882:	bf00      	nop
 8009884:	e000ed04 	.word	0xe000ed04

08009888 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009888:	b480      	push	{r7}
 800988a:	b083      	sub	sp, #12
 800988c:	af00      	add	r7, sp, #0
 800988e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	f103 0208 	add.w	r2, r3, #8
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	f04f 32ff 	mov.w	r2, #4294967295
 80098a0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	f103 0208 	add.w	r2, r3, #8
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	f103 0208 	add.w	r2, r3, #8
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	2200      	movs	r2, #0
 80098ba:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80098bc:	bf00      	nop
 80098be:	370c      	adds	r7, #12
 80098c0:	46bd      	mov	sp, r7
 80098c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c6:	4770      	bx	lr

080098c8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80098c8:	b480      	push	{r7}
 80098ca:	b083      	sub	sp, #12
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	2200      	movs	r2, #0
 80098d4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80098d6:	bf00      	nop
 80098d8:	370c      	adds	r7, #12
 80098da:	46bd      	mov	sp, r7
 80098dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e0:	4770      	bx	lr

080098e2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80098e2:	b480      	push	{r7}
 80098e4:	b085      	sub	sp, #20
 80098e6:	af00      	add	r7, sp, #0
 80098e8:	6078      	str	r0, [r7, #4]
 80098ea:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	685b      	ldr	r3, [r3, #4]
 80098f0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80098f2:	683b      	ldr	r3, [r7, #0]
 80098f4:	68fa      	ldr	r2, [r7, #12]
 80098f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	689a      	ldr	r2, [r3, #8]
 80098fc:	683b      	ldr	r3, [r7, #0]
 80098fe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	689b      	ldr	r3, [r3, #8]
 8009904:	683a      	ldr	r2, [r7, #0]
 8009906:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	683a      	ldr	r2, [r7, #0]
 800990c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800990e:	683b      	ldr	r3, [r7, #0]
 8009910:	687a      	ldr	r2, [r7, #4]
 8009912:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	1c5a      	adds	r2, r3, #1
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	601a      	str	r2, [r3, #0]
}
 800991e:	bf00      	nop
 8009920:	3714      	adds	r7, #20
 8009922:	46bd      	mov	sp, r7
 8009924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009928:	4770      	bx	lr

0800992a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800992a:	b480      	push	{r7}
 800992c:	b085      	sub	sp, #20
 800992e:	af00      	add	r7, sp, #0
 8009930:	6078      	str	r0, [r7, #4]
 8009932:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009934:	683b      	ldr	r3, [r7, #0]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800993a:	68bb      	ldr	r3, [r7, #8]
 800993c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009940:	d103      	bne.n	800994a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	691b      	ldr	r3, [r3, #16]
 8009946:	60fb      	str	r3, [r7, #12]
 8009948:	e00c      	b.n	8009964 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	3308      	adds	r3, #8
 800994e:	60fb      	str	r3, [r7, #12]
 8009950:	e002      	b.n	8009958 <vListInsert+0x2e>
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	685b      	ldr	r3, [r3, #4]
 8009956:	60fb      	str	r3, [r7, #12]
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	685b      	ldr	r3, [r3, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	68ba      	ldr	r2, [r7, #8]
 8009960:	429a      	cmp	r2, r3
 8009962:	d2f6      	bcs.n	8009952 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	685a      	ldr	r2, [r3, #4]
 8009968:	683b      	ldr	r3, [r7, #0]
 800996a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800996c:	683b      	ldr	r3, [r7, #0]
 800996e:	685b      	ldr	r3, [r3, #4]
 8009970:	683a      	ldr	r2, [r7, #0]
 8009972:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009974:	683b      	ldr	r3, [r7, #0]
 8009976:	68fa      	ldr	r2, [r7, #12]
 8009978:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	683a      	ldr	r2, [r7, #0]
 800997e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009980:	683b      	ldr	r3, [r7, #0]
 8009982:	687a      	ldr	r2, [r7, #4]
 8009984:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	1c5a      	adds	r2, r3, #1
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	601a      	str	r2, [r3, #0]
}
 8009990:	bf00      	nop
 8009992:	3714      	adds	r7, #20
 8009994:	46bd      	mov	sp, r7
 8009996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999a:	4770      	bx	lr

0800999c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800999c:	b480      	push	{r7}
 800999e:	b085      	sub	sp, #20
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	691b      	ldr	r3, [r3, #16]
 80099a8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	685b      	ldr	r3, [r3, #4]
 80099ae:	687a      	ldr	r2, [r7, #4]
 80099b0:	6892      	ldr	r2, [r2, #8]
 80099b2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	689b      	ldr	r3, [r3, #8]
 80099b8:	687a      	ldr	r2, [r7, #4]
 80099ba:	6852      	ldr	r2, [r2, #4]
 80099bc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	685b      	ldr	r3, [r3, #4]
 80099c2:	687a      	ldr	r2, [r7, #4]
 80099c4:	429a      	cmp	r2, r3
 80099c6:	d103      	bne.n	80099d0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	689a      	ldr	r2, [r3, #8]
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	2200      	movs	r2, #0
 80099d4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	1e5a      	subs	r2, r3, #1
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	681b      	ldr	r3, [r3, #0]
}
 80099e4:	4618      	mov	r0, r3
 80099e6:	3714      	adds	r7, #20
 80099e8:	46bd      	mov	sp, r7
 80099ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ee:	4770      	bx	lr

080099f0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b084      	sub	sp, #16
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]
 80099f8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d10a      	bne.n	8009a1a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a08:	f383 8811 	msr	BASEPRI, r3
 8009a0c:	f3bf 8f6f 	isb	sy
 8009a10:	f3bf 8f4f 	dsb	sy
 8009a14:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009a16:	bf00      	nop
 8009a18:	e7fe      	b.n	8009a18 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009a1a:	f001 fbcd 	bl	800b1b8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	681a      	ldr	r2, [r3, #0]
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a26:	68f9      	ldr	r1, [r7, #12]
 8009a28:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009a2a:	fb01 f303 	mul.w	r3, r1, r3
 8009a2e:	441a      	add	r2, r3
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	2200      	movs	r2, #0
 8009a38:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	681a      	ldr	r2, [r3, #0]
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	681a      	ldr	r2, [r3, #0]
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a4a:	3b01      	subs	r3, #1
 8009a4c:	68f9      	ldr	r1, [r7, #12]
 8009a4e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009a50:	fb01 f303 	mul.w	r3, r1, r3
 8009a54:	441a      	add	r2, r3
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	22ff      	movs	r2, #255	; 0xff
 8009a5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	22ff      	movs	r2, #255	; 0xff
 8009a66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009a6a:	683b      	ldr	r3, [r7, #0]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d114      	bne.n	8009a9a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	691b      	ldr	r3, [r3, #16]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d01a      	beq.n	8009aae <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	3310      	adds	r3, #16
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	f001 f8d3 	bl	800ac28 <xTaskRemoveFromEventList>
 8009a82:	4603      	mov	r3, r0
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d012      	beq.n	8009aae <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009a88:	4b0c      	ldr	r3, [pc, #48]	; (8009abc <xQueueGenericReset+0xcc>)
 8009a8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a8e:	601a      	str	r2, [r3, #0]
 8009a90:	f3bf 8f4f 	dsb	sy
 8009a94:	f3bf 8f6f 	isb	sy
 8009a98:	e009      	b.n	8009aae <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	3310      	adds	r3, #16
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	f7ff fef2 	bl	8009888 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	3324      	adds	r3, #36	; 0x24
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	f7ff feed 	bl	8009888 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009aae:	f001 fbb3 	bl	800b218 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009ab2:	2301      	movs	r3, #1
}
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	3710      	adds	r7, #16
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	bd80      	pop	{r7, pc}
 8009abc:	e000ed04 	.word	0xe000ed04

08009ac0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009ac0:	b580      	push	{r7, lr}
 8009ac2:	b08e      	sub	sp, #56	; 0x38
 8009ac4:	af02      	add	r7, sp, #8
 8009ac6:	60f8      	str	r0, [r7, #12]
 8009ac8:	60b9      	str	r1, [r7, #8]
 8009aca:	607a      	str	r2, [r7, #4]
 8009acc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d10a      	bne.n	8009aea <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ad8:	f383 8811 	msr	BASEPRI, r3
 8009adc:	f3bf 8f6f 	isb	sy
 8009ae0:	f3bf 8f4f 	dsb	sy
 8009ae4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009ae6:	bf00      	nop
 8009ae8:	e7fe      	b.n	8009ae8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009aea:	683b      	ldr	r3, [r7, #0]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d10a      	bne.n	8009b06 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009af4:	f383 8811 	msr	BASEPRI, r3
 8009af8:	f3bf 8f6f 	isb	sy
 8009afc:	f3bf 8f4f 	dsb	sy
 8009b00:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009b02:	bf00      	nop
 8009b04:	e7fe      	b.n	8009b04 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d002      	beq.n	8009b12 <xQueueGenericCreateStatic+0x52>
 8009b0c:	68bb      	ldr	r3, [r7, #8]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d001      	beq.n	8009b16 <xQueueGenericCreateStatic+0x56>
 8009b12:	2301      	movs	r3, #1
 8009b14:	e000      	b.n	8009b18 <xQueueGenericCreateStatic+0x58>
 8009b16:	2300      	movs	r3, #0
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d10a      	bne.n	8009b32 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b20:	f383 8811 	msr	BASEPRI, r3
 8009b24:	f3bf 8f6f 	isb	sy
 8009b28:	f3bf 8f4f 	dsb	sy
 8009b2c:	623b      	str	r3, [r7, #32]
}
 8009b2e:	bf00      	nop
 8009b30:	e7fe      	b.n	8009b30 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d102      	bne.n	8009b3e <xQueueGenericCreateStatic+0x7e>
 8009b38:	68bb      	ldr	r3, [r7, #8]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d101      	bne.n	8009b42 <xQueueGenericCreateStatic+0x82>
 8009b3e:	2301      	movs	r3, #1
 8009b40:	e000      	b.n	8009b44 <xQueueGenericCreateStatic+0x84>
 8009b42:	2300      	movs	r3, #0
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d10a      	bne.n	8009b5e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b4c:	f383 8811 	msr	BASEPRI, r3
 8009b50:	f3bf 8f6f 	isb	sy
 8009b54:	f3bf 8f4f 	dsb	sy
 8009b58:	61fb      	str	r3, [r7, #28]
}
 8009b5a:	bf00      	nop
 8009b5c:	e7fe      	b.n	8009b5c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009b5e:	2348      	movs	r3, #72	; 0x48
 8009b60:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009b62:	697b      	ldr	r3, [r7, #20]
 8009b64:	2b48      	cmp	r3, #72	; 0x48
 8009b66:	d00a      	beq.n	8009b7e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b6c:	f383 8811 	msr	BASEPRI, r3
 8009b70:	f3bf 8f6f 	isb	sy
 8009b74:	f3bf 8f4f 	dsb	sy
 8009b78:	61bb      	str	r3, [r7, #24]
}
 8009b7a:	bf00      	nop
 8009b7c:	e7fe      	b.n	8009b7c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009b7e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009b80:	683b      	ldr	r3, [r7, #0]
 8009b82:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d00d      	beq.n	8009ba6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b8c:	2201      	movs	r2, #1
 8009b8e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009b92:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b98:	9300      	str	r3, [sp, #0]
 8009b9a:	4613      	mov	r3, r2
 8009b9c:	687a      	ldr	r2, [r7, #4]
 8009b9e:	68b9      	ldr	r1, [r7, #8]
 8009ba0:	68f8      	ldr	r0, [r7, #12]
 8009ba2:	f000 f83f 	bl	8009c24 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009ba8:	4618      	mov	r0, r3
 8009baa:	3730      	adds	r7, #48	; 0x30
 8009bac:	46bd      	mov	sp, r7
 8009bae:	bd80      	pop	{r7, pc}

08009bb0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	b08a      	sub	sp, #40	; 0x28
 8009bb4:	af02      	add	r7, sp, #8
 8009bb6:	60f8      	str	r0, [r7, #12]
 8009bb8:	60b9      	str	r1, [r7, #8]
 8009bba:	4613      	mov	r3, r2
 8009bbc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d10a      	bne.n	8009bda <xQueueGenericCreate+0x2a>
	__asm volatile
 8009bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bc8:	f383 8811 	msr	BASEPRI, r3
 8009bcc:	f3bf 8f6f 	isb	sy
 8009bd0:	f3bf 8f4f 	dsb	sy
 8009bd4:	613b      	str	r3, [r7, #16]
}
 8009bd6:	bf00      	nop
 8009bd8:	e7fe      	b.n	8009bd8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	68ba      	ldr	r2, [r7, #8]
 8009bde:	fb02 f303 	mul.w	r3, r2, r3
 8009be2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009be4:	69fb      	ldr	r3, [r7, #28]
 8009be6:	3348      	adds	r3, #72	; 0x48
 8009be8:	4618      	mov	r0, r3
 8009bea:	f001 fbd7 	bl	800b39c <pvPortMalloc>
 8009bee:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009bf0:	69bb      	ldr	r3, [r7, #24]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d011      	beq.n	8009c1a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009bf6:	69bb      	ldr	r3, [r7, #24]
 8009bf8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009bfa:	697b      	ldr	r3, [r7, #20]
 8009bfc:	3348      	adds	r3, #72	; 0x48
 8009bfe:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009c00:	69bb      	ldr	r3, [r7, #24]
 8009c02:	2200      	movs	r2, #0
 8009c04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009c08:	79fa      	ldrb	r2, [r7, #7]
 8009c0a:	69bb      	ldr	r3, [r7, #24]
 8009c0c:	9300      	str	r3, [sp, #0]
 8009c0e:	4613      	mov	r3, r2
 8009c10:	697a      	ldr	r2, [r7, #20]
 8009c12:	68b9      	ldr	r1, [r7, #8]
 8009c14:	68f8      	ldr	r0, [r7, #12]
 8009c16:	f000 f805 	bl	8009c24 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009c1a:	69bb      	ldr	r3, [r7, #24]
	}
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	3720      	adds	r7, #32
 8009c20:	46bd      	mov	sp, r7
 8009c22:	bd80      	pop	{r7, pc}

08009c24 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009c24:	b580      	push	{r7, lr}
 8009c26:	b084      	sub	sp, #16
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	60f8      	str	r0, [r7, #12]
 8009c2c:	60b9      	str	r1, [r7, #8]
 8009c2e:	607a      	str	r2, [r7, #4]
 8009c30:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009c32:	68bb      	ldr	r3, [r7, #8]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d103      	bne.n	8009c40 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009c38:	69bb      	ldr	r3, [r7, #24]
 8009c3a:	69ba      	ldr	r2, [r7, #24]
 8009c3c:	601a      	str	r2, [r3, #0]
 8009c3e:	e002      	b.n	8009c46 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009c40:	69bb      	ldr	r3, [r7, #24]
 8009c42:	687a      	ldr	r2, [r7, #4]
 8009c44:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009c46:	69bb      	ldr	r3, [r7, #24]
 8009c48:	68fa      	ldr	r2, [r7, #12]
 8009c4a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009c4c:	69bb      	ldr	r3, [r7, #24]
 8009c4e:	68ba      	ldr	r2, [r7, #8]
 8009c50:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009c52:	2101      	movs	r1, #1
 8009c54:	69b8      	ldr	r0, [r7, #24]
 8009c56:	f7ff fecb 	bl	80099f0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009c5a:	bf00      	nop
 8009c5c:	3710      	adds	r7, #16
 8009c5e:	46bd      	mov	sp, r7
 8009c60:	bd80      	pop	{r7, pc}
	...

08009c64 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009c64:	b580      	push	{r7, lr}
 8009c66:	b08e      	sub	sp, #56	; 0x38
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	60f8      	str	r0, [r7, #12]
 8009c6c:	60b9      	str	r1, [r7, #8]
 8009c6e:	607a      	str	r2, [r7, #4]
 8009c70:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009c72:	2300      	movs	r3, #0
 8009c74:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d10a      	bne.n	8009c96 <xQueueGenericSend+0x32>
	__asm volatile
 8009c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c84:	f383 8811 	msr	BASEPRI, r3
 8009c88:	f3bf 8f6f 	isb	sy
 8009c8c:	f3bf 8f4f 	dsb	sy
 8009c90:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009c92:	bf00      	nop
 8009c94:	e7fe      	b.n	8009c94 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009c96:	68bb      	ldr	r3, [r7, #8]
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d103      	bne.n	8009ca4 <xQueueGenericSend+0x40>
 8009c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d101      	bne.n	8009ca8 <xQueueGenericSend+0x44>
 8009ca4:	2301      	movs	r3, #1
 8009ca6:	e000      	b.n	8009caa <xQueueGenericSend+0x46>
 8009ca8:	2300      	movs	r3, #0
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d10a      	bne.n	8009cc4 <xQueueGenericSend+0x60>
	__asm volatile
 8009cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cb2:	f383 8811 	msr	BASEPRI, r3
 8009cb6:	f3bf 8f6f 	isb	sy
 8009cba:	f3bf 8f4f 	dsb	sy
 8009cbe:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009cc0:	bf00      	nop
 8009cc2:	e7fe      	b.n	8009cc2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009cc4:	683b      	ldr	r3, [r7, #0]
 8009cc6:	2b02      	cmp	r3, #2
 8009cc8:	d103      	bne.n	8009cd2 <xQueueGenericSend+0x6e>
 8009cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ccc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009cce:	2b01      	cmp	r3, #1
 8009cd0:	d101      	bne.n	8009cd6 <xQueueGenericSend+0x72>
 8009cd2:	2301      	movs	r3, #1
 8009cd4:	e000      	b.n	8009cd8 <xQueueGenericSend+0x74>
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d10a      	bne.n	8009cf2 <xQueueGenericSend+0x8e>
	__asm volatile
 8009cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ce0:	f383 8811 	msr	BASEPRI, r3
 8009ce4:	f3bf 8f6f 	isb	sy
 8009ce8:	f3bf 8f4f 	dsb	sy
 8009cec:	623b      	str	r3, [r7, #32]
}
 8009cee:	bf00      	nop
 8009cf0:	e7fe      	b.n	8009cf0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009cf2:	f001 f8df 	bl	800aeb4 <xTaskGetSchedulerState>
 8009cf6:	4603      	mov	r3, r0
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d102      	bne.n	8009d02 <xQueueGenericSend+0x9e>
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d101      	bne.n	8009d06 <xQueueGenericSend+0xa2>
 8009d02:	2301      	movs	r3, #1
 8009d04:	e000      	b.n	8009d08 <xQueueGenericSend+0xa4>
 8009d06:	2300      	movs	r3, #0
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d10a      	bne.n	8009d22 <xQueueGenericSend+0xbe>
	__asm volatile
 8009d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d10:	f383 8811 	msr	BASEPRI, r3
 8009d14:	f3bf 8f6f 	isb	sy
 8009d18:	f3bf 8f4f 	dsb	sy
 8009d1c:	61fb      	str	r3, [r7, #28]
}
 8009d1e:	bf00      	nop
 8009d20:	e7fe      	b.n	8009d20 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009d22:	f001 fa49 	bl	800b1b8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d2e:	429a      	cmp	r2, r3
 8009d30:	d302      	bcc.n	8009d38 <xQueueGenericSend+0xd4>
 8009d32:	683b      	ldr	r3, [r7, #0]
 8009d34:	2b02      	cmp	r3, #2
 8009d36:	d129      	bne.n	8009d8c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009d38:	683a      	ldr	r2, [r7, #0]
 8009d3a:	68b9      	ldr	r1, [r7, #8]
 8009d3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009d3e:	f000 fa8b 	bl	800a258 <prvCopyDataToQueue>
 8009d42:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d010      	beq.n	8009d6e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d4e:	3324      	adds	r3, #36	; 0x24
 8009d50:	4618      	mov	r0, r3
 8009d52:	f000 ff69 	bl	800ac28 <xTaskRemoveFromEventList>
 8009d56:	4603      	mov	r3, r0
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d013      	beq.n	8009d84 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009d5c:	4b3f      	ldr	r3, [pc, #252]	; (8009e5c <xQueueGenericSend+0x1f8>)
 8009d5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d62:	601a      	str	r2, [r3, #0]
 8009d64:	f3bf 8f4f 	dsb	sy
 8009d68:	f3bf 8f6f 	isb	sy
 8009d6c:	e00a      	b.n	8009d84 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d007      	beq.n	8009d84 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009d74:	4b39      	ldr	r3, [pc, #228]	; (8009e5c <xQueueGenericSend+0x1f8>)
 8009d76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d7a:	601a      	str	r2, [r3, #0]
 8009d7c:	f3bf 8f4f 	dsb	sy
 8009d80:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009d84:	f001 fa48 	bl	800b218 <vPortExitCritical>
				return pdPASS;
 8009d88:	2301      	movs	r3, #1
 8009d8a:	e063      	b.n	8009e54 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d103      	bne.n	8009d9a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009d92:	f001 fa41 	bl	800b218 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009d96:	2300      	movs	r3, #0
 8009d98:	e05c      	b.n	8009e54 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009d9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d106      	bne.n	8009dae <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009da0:	f107 0314 	add.w	r3, r7, #20
 8009da4:	4618      	mov	r0, r3
 8009da6:	f000 ffa1 	bl	800acec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009daa:	2301      	movs	r3, #1
 8009dac:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009dae:	f001 fa33 	bl	800b218 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009db2:	f000 fd33 	bl	800a81c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009db6:	f001 f9ff 	bl	800b1b8 <vPortEnterCritical>
 8009dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dbc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009dc0:	b25b      	sxtb	r3, r3
 8009dc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dc6:	d103      	bne.n	8009dd0 <xQueueGenericSend+0x16c>
 8009dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dca:	2200      	movs	r2, #0
 8009dcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dd2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009dd6:	b25b      	sxtb	r3, r3
 8009dd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ddc:	d103      	bne.n	8009de6 <xQueueGenericSend+0x182>
 8009dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009de0:	2200      	movs	r2, #0
 8009de2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009de6:	f001 fa17 	bl	800b218 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009dea:	1d3a      	adds	r2, r7, #4
 8009dec:	f107 0314 	add.w	r3, r7, #20
 8009df0:	4611      	mov	r1, r2
 8009df2:	4618      	mov	r0, r3
 8009df4:	f000 ff90 	bl	800ad18 <xTaskCheckForTimeOut>
 8009df8:	4603      	mov	r3, r0
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d124      	bne.n	8009e48 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009dfe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009e00:	f000 fb22 	bl	800a448 <prvIsQueueFull>
 8009e04:	4603      	mov	r3, r0
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d018      	beq.n	8009e3c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e0c:	3310      	adds	r3, #16
 8009e0e:	687a      	ldr	r2, [r7, #4]
 8009e10:	4611      	mov	r1, r2
 8009e12:	4618      	mov	r0, r3
 8009e14:	f000 fee4 	bl	800abe0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009e18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009e1a:	f000 faad 	bl	800a378 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009e1e:	f000 fd0b 	bl	800a838 <xTaskResumeAll>
 8009e22:	4603      	mov	r3, r0
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	f47f af7c 	bne.w	8009d22 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8009e2a:	4b0c      	ldr	r3, [pc, #48]	; (8009e5c <xQueueGenericSend+0x1f8>)
 8009e2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e30:	601a      	str	r2, [r3, #0]
 8009e32:	f3bf 8f4f 	dsb	sy
 8009e36:	f3bf 8f6f 	isb	sy
 8009e3a:	e772      	b.n	8009d22 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009e3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009e3e:	f000 fa9b 	bl	800a378 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009e42:	f000 fcf9 	bl	800a838 <xTaskResumeAll>
 8009e46:	e76c      	b.n	8009d22 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009e48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009e4a:	f000 fa95 	bl	800a378 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009e4e:	f000 fcf3 	bl	800a838 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009e52:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009e54:	4618      	mov	r0, r3
 8009e56:	3738      	adds	r7, #56	; 0x38
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	bd80      	pop	{r7, pc}
 8009e5c:	e000ed04 	.word	0xe000ed04

08009e60 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009e60:	b580      	push	{r7, lr}
 8009e62:	b090      	sub	sp, #64	; 0x40
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	60f8      	str	r0, [r7, #12]
 8009e68:	60b9      	str	r1, [r7, #8]
 8009e6a:	607a      	str	r2, [r7, #4]
 8009e6c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8009e72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d10a      	bne.n	8009e8e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e7c:	f383 8811 	msr	BASEPRI, r3
 8009e80:	f3bf 8f6f 	isb	sy
 8009e84:	f3bf 8f4f 	dsb	sy
 8009e88:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009e8a:	bf00      	nop
 8009e8c:	e7fe      	b.n	8009e8c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009e8e:	68bb      	ldr	r3, [r7, #8]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d103      	bne.n	8009e9c <xQueueGenericSendFromISR+0x3c>
 8009e94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d101      	bne.n	8009ea0 <xQueueGenericSendFromISR+0x40>
 8009e9c:	2301      	movs	r3, #1
 8009e9e:	e000      	b.n	8009ea2 <xQueueGenericSendFromISR+0x42>
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d10a      	bne.n	8009ebc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8009ea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eaa:	f383 8811 	msr	BASEPRI, r3
 8009eae:	f3bf 8f6f 	isb	sy
 8009eb2:	f3bf 8f4f 	dsb	sy
 8009eb6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009eb8:	bf00      	nop
 8009eba:	e7fe      	b.n	8009eba <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009ebc:	683b      	ldr	r3, [r7, #0]
 8009ebe:	2b02      	cmp	r3, #2
 8009ec0:	d103      	bne.n	8009eca <xQueueGenericSendFromISR+0x6a>
 8009ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ec4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ec6:	2b01      	cmp	r3, #1
 8009ec8:	d101      	bne.n	8009ece <xQueueGenericSendFromISR+0x6e>
 8009eca:	2301      	movs	r3, #1
 8009ecc:	e000      	b.n	8009ed0 <xQueueGenericSendFromISR+0x70>
 8009ece:	2300      	movs	r3, #0
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d10a      	bne.n	8009eea <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ed8:	f383 8811 	msr	BASEPRI, r3
 8009edc:	f3bf 8f6f 	isb	sy
 8009ee0:	f3bf 8f4f 	dsb	sy
 8009ee4:	623b      	str	r3, [r7, #32]
}
 8009ee6:	bf00      	nop
 8009ee8:	e7fe      	b.n	8009ee8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009eea:	f001 fa17 	bl	800b31c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009eee:	f3ef 8211 	mrs	r2, BASEPRI
 8009ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ef6:	f383 8811 	msr	BASEPRI, r3
 8009efa:	f3bf 8f6f 	isb	sy
 8009efe:	f3bf 8f4f 	dsb	sy
 8009f02:	61fa      	str	r2, [r7, #28]
 8009f04:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009f06:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009f08:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f12:	429a      	cmp	r2, r3
 8009f14:	d302      	bcc.n	8009f1c <xQueueGenericSendFromISR+0xbc>
 8009f16:	683b      	ldr	r3, [r7, #0]
 8009f18:	2b02      	cmp	r3, #2
 8009f1a:	d12f      	bne.n	8009f7c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009f1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f1e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009f22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009f2c:	683a      	ldr	r2, [r7, #0]
 8009f2e:	68b9      	ldr	r1, [r7, #8]
 8009f30:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009f32:	f000 f991 	bl	800a258 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009f36:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8009f3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f3e:	d112      	bne.n	8009f66 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d016      	beq.n	8009f76 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f4a:	3324      	adds	r3, #36	; 0x24
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	f000 fe6b 	bl	800ac28 <xTaskRemoveFromEventList>
 8009f52:	4603      	mov	r3, r0
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d00e      	beq.n	8009f76 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d00b      	beq.n	8009f76 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	2201      	movs	r2, #1
 8009f62:	601a      	str	r2, [r3, #0]
 8009f64:	e007      	b.n	8009f76 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009f66:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009f6a:	3301      	adds	r3, #1
 8009f6c:	b2db      	uxtb	r3, r3
 8009f6e:	b25a      	sxtb	r2, r3
 8009f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009f76:	2301      	movs	r3, #1
 8009f78:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8009f7a:	e001      	b.n	8009f80 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009f80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f82:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009f84:	697b      	ldr	r3, [r7, #20]
 8009f86:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009f8a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009f8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009f8e:	4618      	mov	r0, r3
 8009f90:	3740      	adds	r7, #64	; 0x40
 8009f92:	46bd      	mov	sp, r7
 8009f94:	bd80      	pop	{r7, pc}
	...

08009f98 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009f98:	b580      	push	{r7, lr}
 8009f9a:	b08c      	sub	sp, #48	; 0x30
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	60f8      	str	r0, [r7, #12]
 8009fa0:	60b9      	str	r1, [r7, #8]
 8009fa2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d10a      	bne.n	8009fc8 <xQueueReceive+0x30>
	__asm volatile
 8009fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fb6:	f383 8811 	msr	BASEPRI, r3
 8009fba:	f3bf 8f6f 	isb	sy
 8009fbe:	f3bf 8f4f 	dsb	sy
 8009fc2:	623b      	str	r3, [r7, #32]
}
 8009fc4:	bf00      	nop
 8009fc6:	e7fe      	b.n	8009fc6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009fc8:	68bb      	ldr	r3, [r7, #8]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d103      	bne.n	8009fd6 <xQueueReceive+0x3e>
 8009fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d101      	bne.n	8009fda <xQueueReceive+0x42>
 8009fd6:	2301      	movs	r3, #1
 8009fd8:	e000      	b.n	8009fdc <xQueueReceive+0x44>
 8009fda:	2300      	movs	r3, #0
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d10a      	bne.n	8009ff6 <xQueueReceive+0x5e>
	__asm volatile
 8009fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fe4:	f383 8811 	msr	BASEPRI, r3
 8009fe8:	f3bf 8f6f 	isb	sy
 8009fec:	f3bf 8f4f 	dsb	sy
 8009ff0:	61fb      	str	r3, [r7, #28]
}
 8009ff2:	bf00      	nop
 8009ff4:	e7fe      	b.n	8009ff4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009ff6:	f000 ff5d 	bl	800aeb4 <xTaskGetSchedulerState>
 8009ffa:	4603      	mov	r3, r0
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d102      	bne.n	800a006 <xQueueReceive+0x6e>
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d101      	bne.n	800a00a <xQueueReceive+0x72>
 800a006:	2301      	movs	r3, #1
 800a008:	e000      	b.n	800a00c <xQueueReceive+0x74>
 800a00a:	2300      	movs	r3, #0
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d10a      	bne.n	800a026 <xQueueReceive+0x8e>
	__asm volatile
 800a010:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a014:	f383 8811 	msr	BASEPRI, r3
 800a018:	f3bf 8f6f 	isb	sy
 800a01c:	f3bf 8f4f 	dsb	sy
 800a020:	61bb      	str	r3, [r7, #24]
}
 800a022:	bf00      	nop
 800a024:	e7fe      	b.n	800a024 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a026:	f001 f8c7 	bl	800b1b8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a02a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a02c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a02e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a032:	2b00      	cmp	r3, #0
 800a034:	d01f      	beq.n	800a076 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a036:	68b9      	ldr	r1, [r7, #8]
 800a038:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a03a:	f000 f977 	bl	800a32c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a03e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a040:	1e5a      	subs	r2, r3, #1
 800a042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a044:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a048:	691b      	ldr	r3, [r3, #16]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d00f      	beq.n	800a06e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a04e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a050:	3310      	adds	r3, #16
 800a052:	4618      	mov	r0, r3
 800a054:	f000 fde8 	bl	800ac28 <xTaskRemoveFromEventList>
 800a058:	4603      	mov	r3, r0
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d007      	beq.n	800a06e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a05e:	4b3d      	ldr	r3, [pc, #244]	; (800a154 <xQueueReceive+0x1bc>)
 800a060:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a064:	601a      	str	r2, [r3, #0]
 800a066:	f3bf 8f4f 	dsb	sy
 800a06a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a06e:	f001 f8d3 	bl	800b218 <vPortExitCritical>
				return pdPASS;
 800a072:	2301      	movs	r3, #1
 800a074:	e069      	b.n	800a14a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d103      	bne.n	800a084 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a07c:	f001 f8cc 	bl	800b218 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a080:	2300      	movs	r3, #0
 800a082:	e062      	b.n	800a14a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a086:	2b00      	cmp	r3, #0
 800a088:	d106      	bne.n	800a098 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a08a:	f107 0310 	add.w	r3, r7, #16
 800a08e:	4618      	mov	r0, r3
 800a090:	f000 fe2c 	bl	800acec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a094:	2301      	movs	r3, #1
 800a096:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a098:	f001 f8be 	bl	800b218 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a09c:	f000 fbbe 	bl	800a81c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a0a0:	f001 f88a 	bl	800b1b8 <vPortEnterCritical>
 800a0a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a0aa:	b25b      	sxtb	r3, r3
 800a0ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0b0:	d103      	bne.n	800a0ba <xQueueReceive+0x122>
 800a0b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0b4:	2200      	movs	r2, #0
 800a0b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a0ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a0c0:	b25b      	sxtb	r3, r3
 800a0c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0c6:	d103      	bne.n	800a0d0 <xQueueReceive+0x138>
 800a0c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a0d0:	f001 f8a2 	bl	800b218 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a0d4:	1d3a      	adds	r2, r7, #4
 800a0d6:	f107 0310 	add.w	r3, r7, #16
 800a0da:	4611      	mov	r1, r2
 800a0dc:	4618      	mov	r0, r3
 800a0de:	f000 fe1b 	bl	800ad18 <xTaskCheckForTimeOut>
 800a0e2:	4603      	mov	r3, r0
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d123      	bne.n	800a130 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a0e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a0ea:	f000 f997 	bl	800a41c <prvIsQueueEmpty>
 800a0ee:	4603      	mov	r3, r0
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d017      	beq.n	800a124 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a0f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0f6:	3324      	adds	r3, #36	; 0x24
 800a0f8:	687a      	ldr	r2, [r7, #4]
 800a0fa:	4611      	mov	r1, r2
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	f000 fd6f 	bl	800abe0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a102:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a104:	f000 f938 	bl	800a378 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a108:	f000 fb96 	bl	800a838 <xTaskResumeAll>
 800a10c:	4603      	mov	r3, r0
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d189      	bne.n	800a026 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a112:	4b10      	ldr	r3, [pc, #64]	; (800a154 <xQueueReceive+0x1bc>)
 800a114:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a118:	601a      	str	r2, [r3, #0]
 800a11a:	f3bf 8f4f 	dsb	sy
 800a11e:	f3bf 8f6f 	isb	sy
 800a122:	e780      	b.n	800a026 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a124:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a126:	f000 f927 	bl	800a378 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a12a:	f000 fb85 	bl	800a838 <xTaskResumeAll>
 800a12e:	e77a      	b.n	800a026 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a130:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a132:	f000 f921 	bl	800a378 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a136:	f000 fb7f 	bl	800a838 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a13a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a13c:	f000 f96e 	bl	800a41c <prvIsQueueEmpty>
 800a140:	4603      	mov	r3, r0
 800a142:	2b00      	cmp	r3, #0
 800a144:	f43f af6f 	beq.w	800a026 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a148:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a14a:	4618      	mov	r0, r3
 800a14c:	3730      	adds	r7, #48	; 0x30
 800a14e:	46bd      	mov	sp, r7
 800a150:	bd80      	pop	{r7, pc}
 800a152:	bf00      	nop
 800a154:	e000ed04 	.word	0xe000ed04

0800a158 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a158:	b580      	push	{r7, lr}
 800a15a:	b08e      	sub	sp, #56	; 0x38
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	60f8      	str	r0, [r7, #12]
 800a160:	60b9      	str	r1, [r7, #8]
 800a162:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d10a      	bne.n	800a184 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800a16e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a172:	f383 8811 	msr	BASEPRI, r3
 800a176:	f3bf 8f6f 	isb	sy
 800a17a:	f3bf 8f4f 	dsb	sy
 800a17e:	623b      	str	r3, [r7, #32]
}
 800a180:	bf00      	nop
 800a182:	e7fe      	b.n	800a182 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a184:	68bb      	ldr	r3, [r7, #8]
 800a186:	2b00      	cmp	r3, #0
 800a188:	d103      	bne.n	800a192 <xQueueReceiveFromISR+0x3a>
 800a18a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a18c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d101      	bne.n	800a196 <xQueueReceiveFromISR+0x3e>
 800a192:	2301      	movs	r3, #1
 800a194:	e000      	b.n	800a198 <xQueueReceiveFromISR+0x40>
 800a196:	2300      	movs	r3, #0
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d10a      	bne.n	800a1b2 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800a19c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1a0:	f383 8811 	msr	BASEPRI, r3
 800a1a4:	f3bf 8f6f 	isb	sy
 800a1a8:	f3bf 8f4f 	dsb	sy
 800a1ac:	61fb      	str	r3, [r7, #28]
}
 800a1ae:	bf00      	nop
 800a1b0:	e7fe      	b.n	800a1b0 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a1b2:	f001 f8b3 	bl	800b31c <vPortValidateInterruptPriority>
	__asm volatile
 800a1b6:	f3ef 8211 	mrs	r2, BASEPRI
 800a1ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1be:	f383 8811 	msr	BASEPRI, r3
 800a1c2:	f3bf 8f6f 	isb	sy
 800a1c6:	f3bf 8f4f 	dsb	sy
 800a1ca:	61ba      	str	r2, [r7, #24]
 800a1cc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a1ce:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a1d0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a1d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1d6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a1d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d02f      	beq.n	800a23e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800a1de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a1e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a1e8:	68b9      	ldr	r1, [r7, #8]
 800a1ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a1ec:	f000 f89e 	bl	800a32c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a1f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1f2:	1e5a      	subs	r2, r3, #1
 800a1f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1f6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800a1f8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a1fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a200:	d112      	bne.n	800a228 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a204:	691b      	ldr	r3, [r3, #16]
 800a206:	2b00      	cmp	r3, #0
 800a208:	d016      	beq.n	800a238 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a20a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a20c:	3310      	adds	r3, #16
 800a20e:	4618      	mov	r0, r3
 800a210:	f000 fd0a 	bl	800ac28 <xTaskRemoveFromEventList>
 800a214:	4603      	mov	r3, r0
 800a216:	2b00      	cmp	r3, #0
 800a218:	d00e      	beq.n	800a238 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d00b      	beq.n	800a238 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	2201      	movs	r2, #1
 800a224:	601a      	str	r2, [r3, #0]
 800a226:	e007      	b.n	800a238 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a228:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a22c:	3301      	adds	r3, #1
 800a22e:	b2db      	uxtb	r3, r3
 800a230:	b25a      	sxtb	r2, r3
 800a232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a234:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800a238:	2301      	movs	r3, #1
 800a23a:	637b      	str	r3, [r7, #52]	; 0x34
 800a23c:	e001      	b.n	800a242 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800a23e:	2300      	movs	r3, #0
 800a240:	637b      	str	r3, [r7, #52]	; 0x34
 800a242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a244:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a246:	693b      	ldr	r3, [r7, #16]
 800a248:	f383 8811 	msr	BASEPRI, r3
}
 800a24c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a24e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a250:	4618      	mov	r0, r3
 800a252:	3738      	adds	r7, #56	; 0x38
 800a254:	46bd      	mov	sp, r7
 800a256:	bd80      	pop	{r7, pc}

0800a258 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a258:	b580      	push	{r7, lr}
 800a25a:	b086      	sub	sp, #24
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	60f8      	str	r0, [r7, #12]
 800a260:	60b9      	str	r1, [r7, #8]
 800a262:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a264:	2300      	movs	r3, #0
 800a266:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a26c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a272:	2b00      	cmp	r3, #0
 800a274:	d10d      	bne.n	800a292 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d14d      	bne.n	800a31a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	689b      	ldr	r3, [r3, #8]
 800a282:	4618      	mov	r0, r3
 800a284:	f000 fe34 	bl	800aef0 <xTaskPriorityDisinherit>
 800a288:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	2200      	movs	r2, #0
 800a28e:	609a      	str	r2, [r3, #8]
 800a290:	e043      	b.n	800a31a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	2b00      	cmp	r3, #0
 800a296:	d119      	bne.n	800a2cc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	6858      	ldr	r0, [r3, #4]
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2a0:	461a      	mov	r2, r3
 800a2a2:	68b9      	ldr	r1, [r7, #8]
 800a2a4:	f001 fdaa 	bl	800bdfc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	685a      	ldr	r2, [r3, #4]
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2b0:	441a      	add	r2, r3
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	685a      	ldr	r2, [r3, #4]
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	689b      	ldr	r3, [r3, #8]
 800a2be:	429a      	cmp	r2, r3
 800a2c0:	d32b      	bcc.n	800a31a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	681a      	ldr	r2, [r3, #0]
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	605a      	str	r2, [r3, #4]
 800a2ca:	e026      	b.n	800a31a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	68d8      	ldr	r0, [r3, #12]
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2d4:	461a      	mov	r2, r3
 800a2d6:	68b9      	ldr	r1, [r7, #8]
 800a2d8:	f001 fd90 	bl	800bdfc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	68da      	ldr	r2, [r3, #12]
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2e4:	425b      	negs	r3, r3
 800a2e6:	441a      	add	r2, r3
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	68da      	ldr	r2, [r3, #12]
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	429a      	cmp	r2, r3
 800a2f6:	d207      	bcs.n	800a308 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	689a      	ldr	r2, [r3, #8]
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a300:	425b      	negs	r3, r3
 800a302:	441a      	add	r2, r3
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	2b02      	cmp	r3, #2
 800a30c:	d105      	bne.n	800a31a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a30e:	693b      	ldr	r3, [r7, #16]
 800a310:	2b00      	cmp	r3, #0
 800a312:	d002      	beq.n	800a31a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a314:	693b      	ldr	r3, [r7, #16]
 800a316:	3b01      	subs	r3, #1
 800a318:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a31a:	693b      	ldr	r3, [r7, #16]
 800a31c:	1c5a      	adds	r2, r3, #1
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a322:	697b      	ldr	r3, [r7, #20]
}
 800a324:	4618      	mov	r0, r3
 800a326:	3718      	adds	r7, #24
 800a328:	46bd      	mov	sp, r7
 800a32a:	bd80      	pop	{r7, pc}

0800a32c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a32c:	b580      	push	{r7, lr}
 800a32e:	b082      	sub	sp, #8
 800a330:	af00      	add	r7, sp, #0
 800a332:	6078      	str	r0, [r7, #4]
 800a334:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d018      	beq.n	800a370 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	68da      	ldr	r2, [r3, #12]
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a346:	441a      	add	r2, r3
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	68da      	ldr	r2, [r3, #12]
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	689b      	ldr	r3, [r3, #8]
 800a354:	429a      	cmp	r2, r3
 800a356:	d303      	bcc.n	800a360 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681a      	ldr	r2, [r3, #0]
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	68d9      	ldr	r1, [r3, #12]
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a368:	461a      	mov	r2, r3
 800a36a:	6838      	ldr	r0, [r7, #0]
 800a36c:	f001 fd46 	bl	800bdfc <memcpy>
	}
}
 800a370:	bf00      	nop
 800a372:	3708      	adds	r7, #8
 800a374:	46bd      	mov	sp, r7
 800a376:	bd80      	pop	{r7, pc}

0800a378 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a378:	b580      	push	{r7, lr}
 800a37a:	b084      	sub	sp, #16
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a380:	f000 ff1a 	bl	800b1b8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a38a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a38c:	e011      	b.n	800a3b2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a392:	2b00      	cmp	r3, #0
 800a394:	d012      	beq.n	800a3bc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	3324      	adds	r3, #36	; 0x24
 800a39a:	4618      	mov	r0, r3
 800a39c:	f000 fc44 	bl	800ac28 <xTaskRemoveFromEventList>
 800a3a0:	4603      	mov	r3, r0
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d001      	beq.n	800a3aa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a3a6:	f000 fd19 	bl	800addc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a3aa:	7bfb      	ldrb	r3, [r7, #15]
 800a3ac:	3b01      	subs	r3, #1
 800a3ae:	b2db      	uxtb	r3, r3
 800a3b0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a3b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	dce9      	bgt.n	800a38e <prvUnlockQueue+0x16>
 800a3ba:	e000      	b.n	800a3be <prvUnlockQueue+0x46>
					break;
 800a3bc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	22ff      	movs	r2, #255	; 0xff
 800a3c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a3c6:	f000 ff27 	bl	800b218 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a3ca:	f000 fef5 	bl	800b1b8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a3d4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a3d6:	e011      	b.n	800a3fc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	691b      	ldr	r3, [r3, #16]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d012      	beq.n	800a406 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	3310      	adds	r3, #16
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	f000 fc1f 	bl	800ac28 <xTaskRemoveFromEventList>
 800a3ea:	4603      	mov	r3, r0
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d001      	beq.n	800a3f4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a3f0:	f000 fcf4 	bl	800addc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a3f4:	7bbb      	ldrb	r3, [r7, #14]
 800a3f6:	3b01      	subs	r3, #1
 800a3f8:	b2db      	uxtb	r3, r3
 800a3fa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a3fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a400:	2b00      	cmp	r3, #0
 800a402:	dce9      	bgt.n	800a3d8 <prvUnlockQueue+0x60>
 800a404:	e000      	b.n	800a408 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a406:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	22ff      	movs	r2, #255	; 0xff
 800a40c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a410:	f000 ff02 	bl	800b218 <vPortExitCritical>
}
 800a414:	bf00      	nop
 800a416:	3710      	adds	r7, #16
 800a418:	46bd      	mov	sp, r7
 800a41a:	bd80      	pop	{r7, pc}

0800a41c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b084      	sub	sp, #16
 800a420:	af00      	add	r7, sp, #0
 800a422:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a424:	f000 fec8 	bl	800b1b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d102      	bne.n	800a436 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a430:	2301      	movs	r3, #1
 800a432:	60fb      	str	r3, [r7, #12]
 800a434:	e001      	b.n	800a43a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a436:	2300      	movs	r3, #0
 800a438:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a43a:	f000 feed 	bl	800b218 <vPortExitCritical>

	return xReturn;
 800a43e:	68fb      	ldr	r3, [r7, #12]
}
 800a440:	4618      	mov	r0, r3
 800a442:	3710      	adds	r7, #16
 800a444:	46bd      	mov	sp, r7
 800a446:	bd80      	pop	{r7, pc}

0800a448 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a448:	b580      	push	{r7, lr}
 800a44a:	b084      	sub	sp, #16
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a450:	f000 feb2 	bl	800b1b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a45c:	429a      	cmp	r2, r3
 800a45e:	d102      	bne.n	800a466 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a460:	2301      	movs	r3, #1
 800a462:	60fb      	str	r3, [r7, #12]
 800a464:	e001      	b.n	800a46a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a466:	2300      	movs	r3, #0
 800a468:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a46a:	f000 fed5 	bl	800b218 <vPortExitCritical>

	return xReturn;
 800a46e:	68fb      	ldr	r3, [r7, #12]
}
 800a470:	4618      	mov	r0, r3
 800a472:	3710      	adds	r7, #16
 800a474:	46bd      	mov	sp, r7
 800a476:	bd80      	pop	{r7, pc}

0800a478 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a478:	b580      	push	{r7, lr}
 800a47a:	b08e      	sub	sp, #56	; 0x38
 800a47c:	af04      	add	r7, sp, #16
 800a47e:	60f8      	str	r0, [r7, #12]
 800a480:	60b9      	str	r1, [r7, #8]
 800a482:	607a      	str	r2, [r7, #4]
 800a484:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a486:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d10a      	bne.n	800a4a2 <xTaskCreateStatic+0x2a>
	__asm volatile
 800a48c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a490:	f383 8811 	msr	BASEPRI, r3
 800a494:	f3bf 8f6f 	isb	sy
 800a498:	f3bf 8f4f 	dsb	sy
 800a49c:	623b      	str	r3, [r7, #32]
}
 800a49e:	bf00      	nop
 800a4a0:	e7fe      	b.n	800a4a0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a4a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d10a      	bne.n	800a4be <xTaskCreateStatic+0x46>
	__asm volatile
 800a4a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4ac:	f383 8811 	msr	BASEPRI, r3
 800a4b0:	f3bf 8f6f 	isb	sy
 800a4b4:	f3bf 8f4f 	dsb	sy
 800a4b8:	61fb      	str	r3, [r7, #28]
}
 800a4ba:	bf00      	nop
 800a4bc:	e7fe      	b.n	800a4bc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a4be:	2358      	movs	r3, #88	; 0x58
 800a4c0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a4c2:	693b      	ldr	r3, [r7, #16]
 800a4c4:	2b58      	cmp	r3, #88	; 0x58
 800a4c6:	d00a      	beq.n	800a4de <xTaskCreateStatic+0x66>
	__asm volatile
 800a4c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4cc:	f383 8811 	msr	BASEPRI, r3
 800a4d0:	f3bf 8f6f 	isb	sy
 800a4d4:	f3bf 8f4f 	dsb	sy
 800a4d8:	61bb      	str	r3, [r7, #24]
}
 800a4da:	bf00      	nop
 800a4dc:	e7fe      	b.n	800a4dc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a4de:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a4e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d01e      	beq.n	800a524 <xTaskCreateStatic+0xac>
 800a4e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d01b      	beq.n	800a524 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a4ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4ee:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a4f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a4f4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a4f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4f8:	2202      	movs	r2, #2
 800a4fa:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a4fe:	2300      	movs	r3, #0
 800a500:	9303      	str	r3, [sp, #12]
 800a502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a504:	9302      	str	r3, [sp, #8]
 800a506:	f107 0314 	add.w	r3, r7, #20
 800a50a:	9301      	str	r3, [sp, #4]
 800a50c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a50e:	9300      	str	r3, [sp, #0]
 800a510:	683b      	ldr	r3, [r7, #0]
 800a512:	687a      	ldr	r2, [r7, #4]
 800a514:	68b9      	ldr	r1, [r7, #8]
 800a516:	68f8      	ldr	r0, [r7, #12]
 800a518:	f000 f850 	bl	800a5bc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a51c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a51e:	f000 f8df 	bl	800a6e0 <prvAddNewTaskToReadyList>
 800a522:	e001      	b.n	800a528 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800a524:	2300      	movs	r3, #0
 800a526:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a528:	697b      	ldr	r3, [r7, #20]
	}
 800a52a:	4618      	mov	r0, r3
 800a52c:	3728      	adds	r7, #40	; 0x28
 800a52e:	46bd      	mov	sp, r7
 800a530:	bd80      	pop	{r7, pc}

0800a532 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a532:	b580      	push	{r7, lr}
 800a534:	b08c      	sub	sp, #48	; 0x30
 800a536:	af04      	add	r7, sp, #16
 800a538:	60f8      	str	r0, [r7, #12]
 800a53a:	60b9      	str	r1, [r7, #8]
 800a53c:	603b      	str	r3, [r7, #0]
 800a53e:	4613      	mov	r3, r2
 800a540:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a542:	88fb      	ldrh	r3, [r7, #6]
 800a544:	009b      	lsls	r3, r3, #2
 800a546:	4618      	mov	r0, r3
 800a548:	f000 ff28 	bl	800b39c <pvPortMalloc>
 800a54c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a54e:	697b      	ldr	r3, [r7, #20]
 800a550:	2b00      	cmp	r3, #0
 800a552:	d00e      	beq.n	800a572 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a554:	2058      	movs	r0, #88	; 0x58
 800a556:	f000 ff21 	bl	800b39c <pvPortMalloc>
 800a55a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a55c:	69fb      	ldr	r3, [r7, #28]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d003      	beq.n	800a56a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a562:	69fb      	ldr	r3, [r7, #28]
 800a564:	697a      	ldr	r2, [r7, #20]
 800a566:	631a      	str	r2, [r3, #48]	; 0x30
 800a568:	e005      	b.n	800a576 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a56a:	6978      	ldr	r0, [r7, #20]
 800a56c:	f000 ffe6 	bl	800b53c <vPortFree>
 800a570:	e001      	b.n	800a576 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a572:	2300      	movs	r3, #0
 800a574:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a576:	69fb      	ldr	r3, [r7, #28]
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d017      	beq.n	800a5ac <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a57c:	69fb      	ldr	r3, [r7, #28]
 800a57e:	2200      	movs	r2, #0
 800a580:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a584:	88fa      	ldrh	r2, [r7, #6]
 800a586:	2300      	movs	r3, #0
 800a588:	9303      	str	r3, [sp, #12]
 800a58a:	69fb      	ldr	r3, [r7, #28]
 800a58c:	9302      	str	r3, [sp, #8]
 800a58e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a590:	9301      	str	r3, [sp, #4]
 800a592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a594:	9300      	str	r3, [sp, #0]
 800a596:	683b      	ldr	r3, [r7, #0]
 800a598:	68b9      	ldr	r1, [r7, #8]
 800a59a:	68f8      	ldr	r0, [r7, #12]
 800a59c:	f000 f80e 	bl	800a5bc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a5a0:	69f8      	ldr	r0, [r7, #28]
 800a5a2:	f000 f89d 	bl	800a6e0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a5a6:	2301      	movs	r3, #1
 800a5a8:	61bb      	str	r3, [r7, #24]
 800a5aa:	e002      	b.n	800a5b2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a5ac:	f04f 33ff 	mov.w	r3, #4294967295
 800a5b0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a5b2:	69bb      	ldr	r3, [r7, #24]
	}
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	3720      	adds	r7, #32
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	bd80      	pop	{r7, pc}

0800a5bc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a5bc:	b580      	push	{r7, lr}
 800a5be:	b088      	sub	sp, #32
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	60f8      	str	r0, [r7, #12]
 800a5c4:	60b9      	str	r1, [r7, #8]
 800a5c6:	607a      	str	r2, [r7, #4]
 800a5c8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a5ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5cc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	009b      	lsls	r3, r3, #2
 800a5d2:	461a      	mov	r2, r3
 800a5d4:	21a5      	movs	r1, #165	; 0xa5
 800a5d6:	f001 fc1f 	bl	800be18 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a5da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a5e4:	3b01      	subs	r3, #1
 800a5e6:	009b      	lsls	r3, r3, #2
 800a5e8:	4413      	add	r3, r2
 800a5ea:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a5ec:	69bb      	ldr	r3, [r7, #24]
 800a5ee:	f023 0307 	bic.w	r3, r3, #7
 800a5f2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a5f4:	69bb      	ldr	r3, [r7, #24]
 800a5f6:	f003 0307 	and.w	r3, r3, #7
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d00a      	beq.n	800a614 <prvInitialiseNewTask+0x58>
	__asm volatile
 800a5fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a602:	f383 8811 	msr	BASEPRI, r3
 800a606:	f3bf 8f6f 	isb	sy
 800a60a:	f3bf 8f4f 	dsb	sy
 800a60e:	617b      	str	r3, [r7, #20]
}
 800a610:	bf00      	nop
 800a612:	e7fe      	b.n	800a612 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a614:	68bb      	ldr	r3, [r7, #8]
 800a616:	2b00      	cmp	r3, #0
 800a618:	d01f      	beq.n	800a65a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a61a:	2300      	movs	r3, #0
 800a61c:	61fb      	str	r3, [r7, #28]
 800a61e:	e012      	b.n	800a646 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a620:	68ba      	ldr	r2, [r7, #8]
 800a622:	69fb      	ldr	r3, [r7, #28]
 800a624:	4413      	add	r3, r2
 800a626:	7819      	ldrb	r1, [r3, #0]
 800a628:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a62a:	69fb      	ldr	r3, [r7, #28]
 800a62c:	4413      	add	r3, r2
 800a62e:	3334      	adds	r3, #52	; 0x34
 800a630:	460a      	mov	r2, r1
 800a632:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a634:	68ba      	ldr	r2, [r7, #8]
 800a636:	69fb      	ldr	r3, [r7, #28]
 800a638:	4413      	add	r3, r2
 800a63a:	781b      	ldrb	r3, [r3, #0]
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d006      	beq.n	800a64e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a640:	69fb      	ldr	r3, [r7, #28]
 800a642:	3301      	adds	r3, #1
 800a644:	61fb      	str	r3, [r7, #28]
 800a646:	69fb      	ldr	r3, [r7, #28]
 800a648:	2b0f      	cmp	r3, #15
 800a64a:	d9e9      	bls.n	800a620 <prvInitialiseNewTask+0x64>
 800a64c:	e000      	b.n	800a650 <prvInitialiseNewTask+0x94>
			{
				break;
 800a64e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a652:	2200      	movs	r2, #0
 800a654:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a658:	e003      	b.n	800a662 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a65a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a65c:	2200      	movs	r2, #0
 800a65e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a664:	2b06      	cmp	r3, #6
 800a666:	d901      	bls.n	800a66c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a668:	2306      	movs	r3, #6
 800a66a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a66c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a66e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a670:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a674:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a676:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800a678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a67a:	2200      	movs	r2, #0
 800a67c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a67e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a680:	3304      	adds	r3, #4
 800a682:	4618      	mov	r0, r3
 800a684:	f7ff f920 	bl	80098c8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a68a:	3318      	adds	r3, #24
 800a68c:	4618      	mov	r0, r3
 800a68e:	f7ff f91b 	bl	80098c8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a694:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a696:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a69a:	f1c3 0207 	rsb	r2, r3, #7
 800a69e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6a0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a6a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a6a6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800a6a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6aa:	2200      	movs	r2, #0
 800a6ac:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a6ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6b0:	2200      	movs	r2, #0
 800a6b2:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a6b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6b6:	2200      	movs	r2, #0
 800a6b8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a6bc:	683a      	ldr	r2, [r7, #0]
 800a6be:	68f9      	ldr	r1, [r7, #12]
 800a6c0:	69b8      	ldr	r0, [r7, #24]
 800a6c2:	f000 fd01 	bl	800b0c8 <pxPortInitialiseStack>
 800a6c6:	4602      	mov	r2, r0
 800a6c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6ca:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a6cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d002      	beq.n	800a6d8 <prvInitialiseNewTask+0x11c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a6d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a6d6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a6d8:	bf00      	nop
 800a6da:	3720      	adds	r7, #32
 800a6dc:	46bd      	mov	sp, r7
 800a6de:	bd80      	pop	{r7, pc}

0800a6e0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a6e0:	b580      	push	{r7, lr}
 800a6e2:	b082      	sub	sp, #8
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a6e8:	f000 fd66 	bl	800b1b8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a6ec:	4b2a      	ldr	r3, [pc, #168]	; (800a798 <prvAddNewTaskToReadyList+0xb8>)
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	3301      	adds	r3, #1
 800a6f2:	4a29      	ldr	r2, [pc, #164]	; (800a798 <prvAddNewTaskToReadyList+0xb8>)
 800a6f4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a6f6:	4b29      	ldr	r3, [pc, #164]	; (800a79c <prvAddNewTaskToReadyList+0xbc>)
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d109      	bne.n	800a712 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a6fe:	4a27      	ldr	r2, [pc, #156]	; (800a79c <prvAddNewTaskToReadyList+0xbc>)
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a704:	4b24      	ldr	r3, [pc, #144]	; (800a798 <prvAddNewTaskToReadyList+0xb8>)
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	2b01      	cmp	r3, #1
 800a70a:	d110      	bne.n	800a72e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a70c:	f000 fb72 	bl	800adf4 <prvInitialiseTaskLists>
 800a710:	e00d      	b.n	800a72e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a712:	4b23      	ldr	r3, [pc, #140]	; (800a7a0 <prvAddNewTaskToReadyList+0xc0>)
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	2b00      	cmp	r3, #0
 800a718:	d109      	bne.n	800a72e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a71a:	4b20      	ldr	r3, [pc, #128]	; (800a79c <prvAddNewTaskToReadyList+0xbc>)
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a724:	429a      	cmp	r2, r3
 800a726:	d802      	bhi.n	800a72e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a728:	4a1c      	ldr	r2, [pc, #112]	; (800a79c <prvAddNewTaskToReadyList+0xbc>)
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a72e:	4b1d      	ldr	r3, [pc, #116]	; (800a7a4 <prvAddNewTaskToReadyList+0xc4>)
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	3301      	adds	r3, #1
 800a734:	4a1b      	ldr	r2, [pc, #108]	; (800a7a4 <prvAddNewTaskToReadyList+0xc4>)
 800a736:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a73c:	2201      	movs	r2, #1
 800a73e:	409a      	lsls	r2, r3
 800a740:	4b19      	ldr	r3, [pc, #100]	; (800a7a8 <prvAddNewTaskToReadyList+0xc8>)
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	4313      	orrs	r3, r2
 800a746:	4a18      	ldr	r2, [pc, #96]	; (800a7a8 <prvAddNewTaskToReadyList+0xc8>)
 800a748:	6013      	str	r3, [r2, #0]
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a74e:	4613      	mov	r3, r2
 800a750:	009b      	lsls	r3, r3, #2
 800a752:	4413      	add	r3, r2
 800a754:	009b      	lsls	r3, r3, #2
 800a756:	4a15      	ldr	r2, [pc, #84]	; (800a7ac <prvAddNewTaskToReadyList+0xcc>)
 800a758:	441a      	add	r2, r3
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	3304      	adds	r3, #4
 800a75e:	4619      	mov	r1, r3
 800a760:	4610      	mov	r0, r2
 800a762:	f7ff f8be 	bl	80098e2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a766:	f000 fd57 	bl	800b218 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a76a:	4b0d      	ldr	r3, [pc, #52]	; (800a7a0 <prvAddNewTaskToReadyList+0xc0>)
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d00e      	beq.n	800a790 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a772:	4b0a      	ldr	r3, [pc, #40]	; (800a79c <prvAddNewTaskToReadyList+0xbc>)
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a77c:	429a      	cmp	r2, r3
 800a77e:	d207      	bcs.n	800a790 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a780:	4b0b      	ldr	r3, [pc, #44]	; (800a7b0 <prvAddNewTaskToReadyList+0xd0>)
 800a782:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a786:	601a      	str	r2, [r3, #0]
 800a788:	f3bf 8f4f 	dsb	sy
 800a78c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a790:	bf00      	nop
 800a792:	3708      	adds	r7, #8
 800a794:	46bd      	mov	sp, r7
 800a796:	bd80      	pop	{r7, pc}
 800a798:	20000460 	.word	0x20000460
 800a79c:	20000364 	.word	0x20000364
 800a7a0:	2000046c 	.word	0x2000046c
 800a7a4:	2000047c 	.word	0x2000047c
 800a7a8:	20000468 	.word	0x20000468
 800a7ac:	20000368 	.word	0x20000368
 800a7b0:	e000ed04 	.word	0xe000ed04

0800a7b4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a7b4:	b580      	push	{r7, lr}
 800a7b6:	b084      	sub	sp, #16
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a7bc:	2300      	movs	r3, #0
 800a7be:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d017      	beq.n	800a7f6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a7c6:	4b13      	ldr	r3, [pc, #76]	; (800a814 <vTaskDelay+0x60>)
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d00a      	beq.n	800a7e4 <vTaskDelay+0x30>
	__asm volatile
 800a7ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7d2:	f383 8811 	msr	BASEPRI, r3
 800a7d6:	f3bf 8f6f 	isb	sy
 800a7da:	f3bf 8f4f 	dsb	sy
 800a7de:	60bb      	str	r3, [r7, #8]
}
 800a7e0:	bf00      	nop
 800a7e2:	e7fe      	b.n	800a7e2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a7e4:	f000 f81a 	bl	800a81c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a7e8:	2100      	movs	r1, #0
 800a7ea:	6878      	ldr	r0, [r7, #4]
 800a7ec:	f000 fc06 	bl	800affc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a7f0:	f000 f822 	bl	800a838 <xTaskResumeAll>
 800a7f4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d107      	bne.n	800a80c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800a7fc:	4b06      	ldr	r3, [pc, #24]	; (800a818 <vTaskDelay+0x64>)
 800a7fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a802:	601a      	str	r2, [r3, #0]
 800a804:	f3bf 8f4f 	dsb	sy
 800a808:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a80c:	bf00      	nop
 800a80e:	3710      	adds	r7, #16
 800a810:	46bd      	mov	sp, r7
 800a812:	bd80      	pop	{r7, pc}
 800a814:	20000484 	.word	0x20000484
 800a818:	e000ed04 	.word	0xe000ed04

0800a81c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a81c:	b480      	push	{r7}
 800a81e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a820:	4b04      	ldr	r3, [pc, #16]	; (800a834 <vTaskSuspendAll+0x18>)
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	3301      	adds	r3, #1
 800a826:	4a03      	ldr	r2, [pc, #12]	; (800a834 <vTaskSuspendAll+0x18>)
 800a828:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a82a:	bf00      	nop
 800a82c:	46bd      	mov	sp, r7
 800a82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a832:	4770      	bx	lr
 800a834:	20000484 	.word	0x20000484

0800a838 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a838:	b580      	push	{r7, lr}
 800a83a:	b084      	sub	sp, #16
 800a83c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a83e:	2300      	movs	r3, #0
 800a840:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a842:	2300      	movs	r3, #0
 800a844:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a846:	4b41      	ldr	r3, [pc, #260]	; (800a94c <xTaskResumeAll+0x114>)
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d10a      	bne.n	800a864 <xTaskResumeAll+0x2c>
	__asm volatile
 800a84e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a852:	f383 8811 	msr	BASEPRI, r3
 800a856:	f3bf 8f6f 	isb	sy
 800a85a:	f3bf 8f4f 	dsb	sy
 800a85e:	603b      	str	r3, [r7, #0]
}
 800a860:	bf00      	nop
 800a862:	e7fe      	b.n	800a862 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a864:	f000 fca8 	bl	800b1b8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a868:	4b38      	ldr	r3, [pc, #224]	; (800a94c <xTaskResumeAll+0x114>)
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	3b01      	subs	r3, #1
 800a86e:	4a37      	ldr	r2, [pc, #220]	; (800a94c <xTaskResumeAll+0x114>)
 800a870:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a872:	4b36      	ldr	r3, [pc, #216]	; (800a94c <xTaskResumeAll+0x114>)
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	2b00      	cmp	r3, #0
 800a878:	d161      	bne.n	800a93e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a87a:	4b35      	ldr	r3, [pc, #212]	; (800a950 <xTaskResumeAll+0x118>)
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d05d      	beq.n	800a93e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a882:	e02e      	b.n	800a8e2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a884:	4b33      	ldr	r3, [pc, #204]	; (800a954 <xTaskResumeAll+0x11c>)
 800a886:	68db      	ldr	r3, [r3, #12]
 800a888:	68db      	ldr	r3, [r3, #12]
 800a88a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	3318      	adds	r3, #24
 800a890:	4618      	mov	r0, r3
 800a892:	f7ff f883 	bl	800999c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	3304      	adds	r3, #4
 800a89a:	4618      	mov	r0, r3
 800a89c:	f7ff f87e 	bl	800999c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8a4:	2201      	movs	r2, #1
 800a8a6:	409a      	lsls	r2, r3
 800a8a8:	4b2b      	ldr	r3, [pc, #172]	; (800a958 <xTaskResumeAll+0x120>)
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	4313      	orrs	r3, r2
 800a8ae:	4a2a      	ldr	r2, [pc, #168]	; (800a958 <xTaskResumeAll+0x120>)
 800a8b0:	6013      	str	r3, [r2, #0]
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8b6:	4613      	mov	r3, r2
 800a8b8:	009b      	lsls	r3, r3, #2
 800a8ba:	4413      	add	r3, r2
 800a8bc:	009b      	lsls	r3, r3, #2
 800a8be:	4a27      	ldr	r2, [pc, #156]	; (800a95c <xTaskResumeAll+0x124>)
 800a8c0:	441a      	add	r2, r3
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	3304      	adds	r3, #4
 800a8c6:	4619      	mov	r1, r3
 800a8c8:	4610      	mov	r0, r2
 800a8ca:	f7ff f80a 	bl	80098e2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8d2:	4b23      	ldr	r3, [pc, #140]	; (800a960 <xTaskResumeAll+0x128>)
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8d8:	429a      	cmp	r2, r3
 800a8da:	d302      	bcc.n	800a8e2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800a8dc:	4b21      	ldr	r3, [pc, #132]	; (800a964 <xTaskResumeAll+0x12c>)
 800a8de:	2201      	movs	r2, #1
 800a8e0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a8e2:	4b1c      	ldr	r3, [pc, #112]	; (800a954 <xTaskResumeAll+0x11c>)
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d1cc      	bne.n	800a884 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d001      	beq.n	800a8f4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a8f0:	f000 fac0 	bl	800ae74 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a8f4:	4b1c      	ldr	r3, [pc, #112]	; (800a968 <xTaskResumeAll+0x130>)
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d010      	beq.n	800a922 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a900:	f000 f836 	bl	800a970 <xTaskIncrementTick>
 800a904:	4603      	mov	r3, r0
 800a906:	2b00      	cmp	r3, #0
 800a908:	d002      	beq.n	800a910 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800a90a:	4b16      	ldr	r3, [pc, #88]	; (800a964 <xTaskResumeAll+0x12c>)
 800a90c:	2201      	movs	r2, #1
 800a90e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	3b01      	subs	r3, #1
 800a914:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d1f1      	bne.n	800a900 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800a91c:	4b12      	ldr	r3, [pc, #72]	; (800a968 <xTaskResumeAll+0x130>)
 800a91e:	2200      	movs	r2, #0
 800a920:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a922:	4b10      	ldr	r3, [pc, #64]	; (800a964 <xTaskResumeAll+0x12c>)
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	2b00      	cmp	r3, #0
 800a928:	d009      	beq.n	800a93e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a92a:	2301      	movs	r3, #1
 800a92c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a92e:	4b0f      	ldr	r3, [pc, #60]	; (800a96c <xTaskResumeAll+0x134>)
 800a930:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a934:	601a      	str	r2, [r3, #0]
 800a936:	f3bf 8f4f 	dsb	sy
 800a93a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a93e:	f000 fc6b 	bl	800b218 <vPortExitCritical>

	return xAlreadyYielded;
 800a942:	68bb      	ldr	r3, [r7, #8]
}
 800a944:	4618      	mov	r0, r3
 800a946:	3710      	adds	r7, #16
 800a948:	46bd      	mov	sp, r7
 800a94a:	bd80      	pop	{r7, pc}
 800a94c:	20000484 	.word	0x20000484
 800a950:	20000460 	.word	0x20000460
 800a954:	20000424 	.word	0x20000424
 800a958:	20000468 	.word	0x20000468
 800a95c:	20000368 	.word	0x20000368
 800a960:	20000364 	.word	0x20000364
 800a964:	20000474 	.word	0x20000474
 800a968:	20000470 	.word	0x20000470
 800a96c:	e000ed04 	.word	0xe000ed04

0800a970 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a970:	b580      	push	{r7, lr}
 800a972:	b086      	sub	sp, #24
 800a974:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a976:	2300      	movs	r3, #0
 800a978:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a97a:	4b4e      	ldr	r3, [pc, #312]	; (800aab4 <xTaskIncrementTick+0x144>)
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	2b00      	cmp	r3, #0
 800a980:	f040 808e 	bne.w	800aaa0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a984:	4b4c      	ldr	r3, [pc, #304]	; (800aab8 <xTaskIncrementTick+0x148>)
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	3301      	adds	r3, #1
 800a98a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a98c:	4a4a      	ldr	r2, [pc, #296]	; (800aab8 <xTaskIncrementTick+0x148>)
 800a98e:	693b      	ldr	r3, [r7, #16]
 800a990:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a992:	693b      	ldr	r3, [r7, #16]
 800a994:	2b00      	cmp	r3, #0
 800a996:	d120      	bne.n	800a9da <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a998:	4b48      	ldr	r3, [pc, #288]	; (800aabc <xTaskIncrementTick+0x14c>)
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d00a      	beq.n	800a9b8 <xTaskIncrementTick+0x48>
	__asm volatile
 800a9a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9a6:	f383 8811 	msr	BASEPRI, r3
 800a9aa:	f3bf 8f6f 	isb	sy
 800a9ae:	f3bf 8f4f 	dsb	sy
 800a9b2:	603b      	str	r3, [r7, #0]
}
 800a9b4:	bf00      	nop
 800a9b6:	e7fe      	b.n	800a9b6 <xTaskIncrementTick+0x46>
 800a9b8:	4b40      	ldr	r3, [pc, #256]	; (800aabc <xTaskIncrementTick+0x14c>)
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	60fb      	str	r3, [r7, #12]
 800a9be:	4b40      	ldr	r3, [pc, #256]	; (800aac0 <xTaskIncrementTick+0x150>)
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	4a3e      	ldr	r2, [pc, #248]	; (800aabc <xTaskIncrementTick+0x14c>)
 800a9c4:	6013      	str	r3, [r2, #0]
 800a9c6:	4a3e      	ldr	r2, [pc, #248]	; (800aac0 <xTaskIncrementTick+0x150>)
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	6013      	str	r3, [r2, #0]
 800a9cc:	4b3d      	ldr	r3, [pc, #244]	; (800aac4 <xTaskIncrementTick+0x154>)
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	3301      	adds	r3, #1
 800a9d2:	4a3c      	ldr	r2, [pc, #240]	; (800aac4 <xTaskIncrementTick+0x154>)
 800a9d4:	6013      	str	r3, [r2, #0]
 800a9d6:	f000 fa4d 	bl	800ae74 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a9da:	4b3b      	ldr	r3, [pc, #236]	; (800aac8 <xTaskIncrementTick+0x158>)
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	693a      	ldr	r2, [r7, #16]
 800a9e0:	429a      	cmp	r2, r3
 800a9e2:	d348      	bcc.n	800aa76 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a9e4:	4b35      	ldr	r3, [pc, #212]	; (800aabc <xTaskIncrementTick+0x14c>)
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d104      	bne.n	800a9f8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a9ee:	4b36      	ldr	r3, [pc, #216]	; (800aac8 <xTaskIncrementTick+0x158>)
 800a9f0:	f04f 32ff 	mov.w	r2, #4294967295
 800a9f4:	601a      	str	r2, [r3, #0]
					break;
 800a9f6:	e03e      	b.n	800aa76 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a9f8:	4b30      	ldr	r3, [pc, #192]	; (800aabc <xTaskIncrementTick+0x14c>)
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	68db      	ldr	r3, [r3, #12]
 800a9fe:	68db      	ldr	r3, [r3, #12]
 800aa00:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800aa02:	68bb      	ldr	r3, [r7, #8]
 800aa04:	685b      	ldr	r3, [r3, #4]
 800aa06:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800aa08:	693a      	ldr	r2, [r7, #16]
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	429a      	cmp	r2, r3
 800aa0e:	d203      	bcs.n	800aa18 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800aa10:	4a2d      	ldr	r2, [pc, #180]	; (800aac8 <xTaskIncrementTick+0x158>)
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800aa16:	e02e      	b.n	800aa76 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aa18:	68bb      	ldr	r3, [r7, #8]
 800aa1a:	3304      	adds	r3, #4
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	f7fe ffbd 	bl	800999c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800aa22:	68bb      	ldr	r3, [r7, #8]
 800aa24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d004      	beq.n	800aa34 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800aa2a:	68bb      	ldr	r3, [r7, #8]
 800aa2c:	3318      	adds	r3, #24
 800aa2e:	4618      	mov	r0, r3
 800aa30:	f7fe ffb4 	bl	800999c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800aa34:	68bb      	ldr	r3, [r7, #8]
 800aa36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa38:	2201      	movs	r2, #1
 800aa3a:	409a      	lsls	r2, r3
 800aa3c:	4b23      	ldr	r3, [pc, #140]	; (800aacc <xTaskIncrementTick+0x15c>)
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	4313      	orrs	r3, r2
 800aa42:	4a22      	ldr	r2, [pc, #136]	; (800aacc <xTaskIncrementTick+0x15c>)
 800aa44:	6013      	str	r3, [r2, #0]
 800aa46:	68bb      	ldr	r3, [r7, #8]
 800aa48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa4a:	4613      	mov	r3, r2
 800aa4c:	009b      	lsls	r3, r3, #2
 800aa4e:	4413      	add	r3, r2
 800aa50:	009b      	lsls	r3, r3, #2
 800aa52:	4a1f      	ldr	r2, [pc, #124]	; (800aad0 <xTaskIncrementTick+0x160>)
 800aa54:	441a      	add	r2, r3
 800aa56:	68bb      	ldr	r3, [r7, #8]
 800aa58:	3304      	adds	r3, #4
 800aa5a:	4619      	mov	r1, r3
 800aa5c:	4610      	mov	r0, r2
 800aa5e:	f7fe ff40 	bl	80098e2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800aa62:	68bb      	ldr	r3, [r7, #8]
 800aa64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa66:	4b1b      	ldr	r3, [pc, #108]	; (800aad4 <xTaskIncrementTick+0x164>)
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa6c:	429a      	cmp	r2, r3
 800aa6e:	d3b9      	bcc.n	800a9e4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800aa70:	2301      	movs	r3, #1
 800aa72:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aa74:	e7b6      	b.n	800a9e4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800aa76:	4b17      	ldr	r3, [pc, #92]	; (800aad4 <xTaskIncrementTick+0x164>)
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa7c:	4914      	ldr	r1, [pc, #80]	; (800aad0 <xTaskIncrementTick+0x160>)
 800aa7e:	4613      	mov	r3, r2
 800aa80:	009b      	lsls	r3, r3, #2
 800aa82:	4413      	add	r3, r2
 800aa84:	009b      	lsls	r3, r3, #2
 800aa86:	440b      	add	r3, r1
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	2b01      	cmp	r3, #1
 800aa8c:	d901      	bls.n	800aa92 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800aa8e:	2301      	movs	r3, #1
 800aa90:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800aa92:	4b11      	ldr	r3, [pc, #68]	; (800aad8 <xTaskIncrementTick+0x168>)
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d007      	beq.n	800aaaa <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800aa9a:	2301      	movs	r3, #1
 800aa9c:	617b      	str	r3, [r7, #20]
 800aa9e:	e004      	b.n	800aaaa <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800aaa0:	4b0e      	ldr	r3, [pc, #56]	; (800aadc <xTaskIncrementTick+0x16c>)
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	3301      	adds	r3, #1
 800aaa6:	4a0d      	ldr	r2, [pc, #52]	; (800aadc <xTaskIncrementTick+0x16c>)
 800aaa8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800aaaa:	697b      	ldr	r3, [r7, #20]
}
 800aaac:	4618      	mov	r0, r3
 800aaae:	3718      	adds	r7, #24
 800aab0:	46bd      	mov	sp, r7
 800aab2:	bd80      	pop	{r7, pc}
 800aab4:	20000484 	.word	0x20000484
 800aab8:	20000464 	.word	0x20000464
 800aabc:	2000041c 	.word	0x2000041c
 800aac0:	20000420 	.word	0x20000420
 800aac4:	20000478 	.word	0x20000478
 800aac8:	20000480 	.word	0x20000480
 800aacc:	20000468 	.word	0x20000468
 800aad0:	20000368 	.word	0x20000368
 800aad4:	20000364 	.word	0x20000364
 800aad8:	20000474 	.word	0x20000474
 800aadc:	20000470 	.word	0x20000470

0800aae0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800aae0:	b580      	push	{r7, lr}
 800aae2:	b088      	sub	sp, #32
 800aae4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800aae6:	4b39      	ldr	r3, [pc, #228]	; (800abcc <vTaskSwitchContext+0xec>)
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d003      	beq.n	800aaf6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800aaee:	4b38      	ldr	r3, [pc, #224]	; (800abd0 <vTaskSwitchContext+0xf0>)
 800aaf0:	2201      	movs	r2, #1
 800aaf2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800aaf4:	e066      	b.n	800abc4 <vTaskSwitchContext+0xe4>
		xYieldPending = pdFALSE;
 800aaf6:	4b36      	ldr	r3, [pc, #216]	; (800abd0 <vTaskSwitchContext+0xf0>)
 800aaf8:	2200      	movs	r2, #0
 800aafa:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800aafc:	4b35      	ldr	r3, [pc, #212]	; (800abd4 <vTaskSwitchContext+0xf4>)
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab02:	61fb      	str	r3, [r7, #28]
 800ab04:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800ab08:	61bb      	str	r3, [r7, #24]
 800ab0a:	69fb      	ldr	r3, [r7, #28]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	69ba      	ldr	r2, [r7, #24]
 800ab10:	429a      	cmp	r2, r3
 800ab12:	d111      	bne.n	800ab38 <vTaskSwitchContext+0x58>
 800ab14:	69fb      	ldr	r3, [r7, #28]
 800ab16:	3304      	adds	r3, #4
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	69ba      	ldr	r2, [r7, #24]
 800ab1c:	429a      	cmp	r2, r3
 800ab1e:	d10b      	bne.n	800ab38 <vTaskSwitchContext+0x58>
 800ab20:	69fb      	ldr	r3, [r7, #28]
 800ab22:	3308      	adds	r3, #8
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	69ba      	ldr	r2, [r7, #24]
 800ab28:	429a      	cmp	r2, r3
 800ab2a:	d105      	bne.n	800ab38 <vTaskSwitchContext+0x58>
 800ab2c:	69fb      	ldr	r3, [r7, #28]
 800ab2e:	330c      	adds	r3, #12
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	69ba      	ldr	r2, [r7, #24]
 800ab34:	429a      	cmp	r2, r3
 800ab36:	d008      	beq.n	800ab4a <vTaskSwitchContext+0x6a>
 800ab38:	4b26      	ldr	r3, [pc, #152]	; (800abd4 <vTaskSwitchContext+0xf4>)
 800ab3a:	681a      	ldr	r2, [r3, #0]
 800ab3c:	4b25      	ldr	r3, [pc, #148]	; (800abd4 <vTaskSwitchContext+0xf4>)
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	3334      	adds	r3, #52	; 0x34
 800ab42:	4619      	mov	r1, r3
 800ab44:	4610      	mov	r0, r2
 800ab46:	f7f5 fcd5 	bl	80004f4 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ab4a:	4b23      	ldr	r3, [pc, #140]	; (800abd8 <vTaskSwitchContext+0xf8>)
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	fab3 f383 	clz	r3, r3
 800ab56:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800ab58:	7afb      	ldrb	r3, [r7, #11]
 800ab5a:	f1c3 031f 	rsb	r3, r3, #31
 800ab5e:	617b      	str	r3, [r7, #20]
 800ab60:	491e      	ldr	r1, [pc, #120]	; (800abdc <vTaskSwitchContext+0xfc>)
 800ab62:	697a      	ldr	r2, [r7, #20]
 800ab64:	4613      	mov	r3, r2
 800ab66:	009b      	lsls	r3, r3, #2
 800ab68:	4413      	add	r3, r2
 800ab6a:	009b      	lsls	r3, r3, #2
 800ab6c:	440b      	add	r3, r1
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d10a      	bne.n	800ab8a <vTaskSwitchContext+0xaa>
	__asm volatile
 800ab74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab78:	f383 8811 	msr	BASEPRI, r3
 800ab7c:	f3bf 8f6f 	isb	sy
 800ab80:	f3bf 8f4f 	dsb	sy
 800ab84:	607b      	str	r3, [r7, #4]
}
 800ab86:	bf00      	nop
 800ab88:	e7fe      	b.n	800ab88 <vTaskSwitchContext+0xa8>
 800ab8a:	697a      	ldr	r2, [r7, #20]
 800ab8c:	4613      	mov	r3, r2
 800ab8e:	009b      	lsls	r3, r3, #2
 800ab90:	4413      	add	r3, r2
 800ab92:	009b      	lsls	r3, r3, #2
 800ab94:	4a11      	ldr	r2, [pc, #68]	; (800abdc <vTaskSwitchContext+0xfc>)
 800ab96:	4413      	add	r3, r2
 800ab98:	613b      	str	r3, [r7, #16]
 800ab9a:	693b      	ldr	r3, [r7, #16]
 800ab9c:	685b      	ldr	r3, [r3, #4]
 800ab9e:	685a      	ldr	r2, [r3, #4]
 800aba0:	693b      	ldr	r3, [r7, #16]
 800aba2:	605a      	str	r2, [r3, #4]
 800aba4:	693b      	ldr	r3, [r7, #16]
 800aba6:	685a      	ldr	r2, [r3, #4]
 800aba8:	693b      	ldr	r3, [r7, #16]
 800abaa:	3308      	adds	r3, #8
 800abac:	429a      	cmp	r2, r3
 800abae:	d104      	bne.n	800abba <vTaskSwitchContext+0xda>
 800abb0:	693b      	ldr	r3, [r7, #16]
 800abb2:	685b      	ldr	r3, [r3, #4]
 800abb4:	685a      	ldr	r2, [r3, #4]
 800abb6:	693b      	ldr	r3, [r7, #16]
 800abb8:	605a      	str	r2, [r3, #4]
 800abba:	693b      	ldr	r3, [r7, #16]
 800abbc:	685b      	ldr	r3, [r3, #4]
 800abbe:	68db      	ldr	r3, [r3, #12]
 800abc0:	4a04      	ldr	r2, [pc, #16]	; (800abd4 <vTaskSwitchContext+0xf4>)
 800abc2:	6013      	str	r3, [r2, #0]
}
 800abc4:	bf00      	nop
 800abc6:	3720      	adds	r7, #32
 800abc8:	46bd      	mov	sp, r7
 800abca:	bd80      	pop	{r7, pc}
 800abcc:	20000484 	.word	0x20000484
 800abd0:	20000474 	.word	0x20000474
 800abd4:	20000364 	.word	0x20000364
 800abd8:	20000468 	.word	0x20000468
 800abdc:	20000368 	.word	0x20000368

0800abe0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800abe0:	b580      	push	{r7, lr}
 800abe2:	b084      	sub	sp, #16
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	6078      	str	r0, [r7, #4]
 800abe8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	2b00      	cmp	r3, #0
 800abee:	d10a      	bne.n	800ac06 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800abf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abf4:	f383 8811 	msr	BASEPRI, r3
 800abf8:	f3bf 8f6f 	isb	sy
 800abfc:	f3bf 8f4f 	dsb	sy
 800ac00:	60fb      	str	r3, [r7, #12]
}
 800ac02:	bf00      	nop
 800ac04:	e7fe      	b.n	800ac04 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ac06:	4b07      	ldr	r3, [pc, #28]	; (800ac24 <vTaskPlaceOnEventList+0x44>)
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	3318      	adds	r3, #24
 800ac0c:	4619      	mov	r1, r3
 800ac0e:	6878      	ldr	r0, [r7, #4]
 800ac10:	f7fe fe8b 	bl	800992a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ac14:	2101      	movs	r1, #1
 800ac16:	6838      	ldr	r0, [r7, #0]
 800ac18:	f000 f9f0 	bl	800affc <prvAddCurrentTaskToDelayedList>
}
 800ac1c:	bf00      	nop
 800ac1e:	3710      	adds	r7, #16
 800ac20:	46bd      	mov	sp, r7
 800ac22:	bd80      	pop	{r7, pc}
 800ac24:	20000364 	.word	0x20000364

0800ac28 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ac28:	b580      	push	{r7, lr}
 800ac2a:	b086      	sub	sp, #24
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	68db      	ldr	r3, [r3, #12]
 800ac34:	68db      	ldr	r3, [r3, #12]
 800ac36:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ac38:	693b      	ldr	r3, [r7, #16]
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d10a      	bne.n	800ac54 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800ac3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac42:	f383 8811 	msr	BASEPRI, r3
 800ac46:	f3bf 8f6f 	isb	sy
 800ac4a:	f3bf 8f4f 	dsb	sy
 800ac4e:	60fb      	str	r3, [r7, #12]
}
 800ac50:	bf00      	nop
 800ac52:	e7fe      	b.n	800ac52 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ac54:	693b      	ldr	r3, [r7, #16]
 800ac56:	3318      	adds	r3, #24
 800ac58:	4618      	mov	r0, r3
 800ac5a:	f7fe fe9f 	bl	800999c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ac5e:	4b1d      	ldr	r3, [pc, #116]	; (800acd4 <xTaskRemoveFromEventList+0xac>)
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d11c      	bne.n	800aca0 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ac66:	693b      	ldr	r3, [r7, #16]
 800ac68:	3304      	adds	r3, #4
 800ac6a:	4618      	mov	r0, r3
 800ac6c:	f7fe fe96 	bl	800999c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ac70:	693b      	ldr	r3, [r7, #16]
 800ac72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac74:	2201      	movs	r2, #1
 800ac76:	409a      	lsls	r2, r3
 800ac78:	4b17      	ldr	r3, [pc, #92]	; (800acd8 <xTaskRemoveFromEventList+0xb0>)
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	4313      	orrs	r3, r2
 800ac7e:	4a16      	ldr	r2, [pc, #88]	; (800acd8 <xTaskRemoveFromEventList+0xb0>)
 800ac80:	6013      	str	r3, [r2, #0]
 800ac82:	693b      	ldr	r3, [r7, #16]
 800ac84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac86:	4613      	mov	r3, r2
 800ac88:	009b      	lsls	r3, r3, #2
 800ac8a:	4413      	add	r3, r2
 800ac8c:	009b      	lsls	r3, r3, #2
 800ac8e:	4a13      	ldr	r2, [pc, #76]	; (800acdc <xTaskRemoveFromEventList+0xb4>)
 800ac90:	441a      	add	r2, r3
 800ac92:	693b      	ldr	r3, [r7, #16]
 800ac94:	3304      	adds	r3, #4
 800ac96:	4619      	mov	r1, r3
 800ac98:	4610      	mov	r0, r2
 800ac9a:	f7fe fe22 	bl	80098e2 <vListInsertEnd>
 800ac9e:	e005      	b.n	800acac <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800aca0:	693b      	ldr	r3, [r7, #16]
 800aca2:	3318      	adds	r3, #24
 800aca4:	4619      	mov	r1, r3
 800aca6:	480e      	ldr	r0, [pc, #56]	; (800ace0 <xTaskRemoveFromEventList+0xb8>)
 800aca8:	f7fe fe1b 	bl	80098e2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800acac:	693b      	ldr	r3, [r7, #16]
 800acae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acb0:	4b0c      	ldr	r3, [pc, #48]	; (800ace4 <xTaskRemoveFromEventList+0xbc>)
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acb6:	429a      	cmp	r2, r3
 800acb8:	d905      	bls.n	800acc6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800acba:	2301      	movs	r3, #1
 800acbc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800acbe:	4b0a      	ldr	r3, [pc, #40]	; (800ace8 <xTaskRemoveFromEventList+0xc0>)
 800acc0:	2201      	movs	r2, #1
 800acc2:	601a      	str	r2, [r3, #0]
 800acc4:	e001      	b.n	800acca <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800acc6:	2300      	movs	r3, #0
 800acc8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800acca:	697b      	ldr	r3, [r7, #20]
}
 800accc:	4618      	mov	r0, r3
 800acce:	3718      	adds	r7, #24
 800acd0:	46bd      	mov	sp, r7
 800acd2:	bd80      	pop	{r7, pc}
 800acd4:	20000484 	.word	0x20000484
 800acd8:	20000468 	.word	0x20000468
 800acdc:	20000368 	.word	0x20000368
 800ace0:	20000424 	.word	0x20000424
 800ace4:	20000364 	.word	0x20000364
 800ace8:	20000474 	.word	0x20000474

0800acec <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800acec:	b480      	push	{r7}
 800acee:	b083      	sub	sp, #12
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800acf4:	4b06      	ldr	r3, [pc, #24]	; (800ad10 <vTaskInternalSetTimeOutState+0x24>)
 800acf6:	681a      	ldr	r2, [r3, #0]
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800acfc:	4b05      	ldr	r3, [pc, #20]	; (800ad14 <vTaskInternalSetTimeOutState+0x28>)
 800acfe:	681a      	ldr	r2, [r3, #0]
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	605a      	str	r2, [r3, #4]
}
 800ad04:	bf00      	nop
 800ad06:	370c      	adds	r7, #12
 800ad08:	46bd      	mov	sp, r7
 800ad0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad0e:	4770      	bx	lr
 800ad10:	20000478 	.word	0x20000478
 800ad14:	20000464 	.word	0x20000464

0800ad18 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ad18:	b580      	push	{r7, lr}
 800ad1a:	b088      	sub	sp, #32
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	6078      	str	r0, [r7, #4]
 800ad20:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d10a      	bne.n	800ad3e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800ad28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad2c:	f383 8811 	msr	BASEPRI, r3
 800ad30:	f3bf 8f6f 	isb	sy
 800ad34:	f3bf 8f4f 	dsb	sy
 800ad38:	613b      	str	r3, [r7, #16]
}
 800ad3a:	bf00      	nop
 800ad3c:	e7fe      	b.n	800ad3c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ad3e:	683b      	ldr	r3, [r7, #0]
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d10a      	bne.n	800ad5a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800ad44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad48:	f383 8811 	msr	BASEPRI, r3
 800ad4c:	f3bf 8f6f 	isb	sy
 800ad50:	f3bf 8f4f 	dsb	sy
 800ad54:	60fb      	str	r3, [r7, #12]
}
 800ad56:	bf00      	nop
 800ad58:	e7fe      	b.n	800ad58 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800ad5a:	f000 fa2d 	bl	800b1b8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ad5e:	4b1d      	ldr	r3, [pc, #116]	; (800add4 <xTaskCheckForTimeOut+0xbc>)
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	685b      	ldr	r3, [r3, #4]
 800ad68:	69ba      	ldr	r2, [r7, #24]
 800ad6a:	1ad3      	subs	r3, r2, r3
 800ad6c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ad6e:	683b      	ldr	r3, [r7, #0]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad76:	d102      	bne.n	800ad7e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ad78:	2300      	movs	r3, #0
 800ad7a:	61fb      	str	r3, [r7, #28]
 800ad7c:	e023      	b.n	800adc6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	681a      	ldr	r2, [r3, #0]
 800ad82:	4b15      	ldr	r3, [pc, #84]	; (800add8 <xTaskCheckForTimeOut+0xc0>)
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	429a      	cmp	r2, r3
 800ad88:	d007      	beq.n	800ad9a <xTaskCheckForTimeOut+0x82>
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	685b      	ldr	r3, [r3, #4]
 800ad8e:	69ba      	ldr	r2, [r7, #24]
 800ad90:	429a      	cmp	r2, r3
 800ad92:	d302      	bcc.n	800ad9a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ad94:	2301      	movs	r3, #1
 800ad96:	61fb      	str	r3, [r7, #28]
 800ad98:	e015      	b.n	800adc6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ad9a:	683b      	ldr	r3, [r7, #0]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	697a      	ldr	r2, [r7, #20]
 800ada0:	429a      	cmp	r2, r3
 800ada2:	d20b      	bcs.n	800adbc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ada4:	683b      	ldr	r3, [r7, #0]
 800ada6:	681a      	ldr	r2, [r3, #0]
 800ada8:	697b      	ldr	r3, [r7, #20]
 800adaa:	1ad2      	subs	r2, r2, r3
 800adac:	683b      	ldr	r3, [r7, #0]
 800adae:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800adb0:	6878      	ldr	r0, [r7, #4]
 800adb2:	f7ff ff9b 	bl	800acec <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800adb6:	2300      	movs	r3, #0
 800adb8:	61fb      	str	r3, [r7, #28]
 800adba:	e004      	b.n	800adc6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800adbc:	683b      	ldr	r3, [r7, #0]
 800adbe:	2200      	movs	r2, #0
 800adc0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800adc2:	2301      	movs	r3, #1
 800adc4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800adc6:	f000 fa27 	bl	800b218 <vPortExitCritical>

	return xReturn;
 800adca:	69fb      	ldr	r3, [r7, #28]
}
 800adcc:	4618      	mov	r0, r3
 800adce:	3720      	adds	r7, #32
 800add0:	46bd      	mov	sp, r7
 800add2:	bd80      	pop	{r7, pc}
 800add4:	20000464 	.word	0x20000464
 800add8:	20000478 	.word	0x20000478

0800addc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800addc:	b480      	push	{r7}
 800adde:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ade0:	4b03      	ldr	r3, [pc, #12]	; (800adf0 <vTaskMissedYield+0x14>)
 800ade2:	2201      	movs	r2, #1
 800ade4:	601a      	str	r2, [r3, #0]
}
 800ade6:	bf00      	nop
 800ade8:	46bd      	mov	sp, r7
 800adea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adee:	4770      	bx	lr
 800adf0:	20000474 	.word	0x20000474

0800adf4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800adf4:	b580      	push	{r7, lr}
 800adf6:	b082      	sub	sp, #8
 800adf8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800adfa:	2300      	movs	r3, #0
 800adfc:	607b      	str	r3, [r7, #4]
 800adfe:	e00c      	b.n	800ae1a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ae00:	687a      	ldr	r2, [r7, #4]
 800ae02:	4613      	mov	r3, r2
 800ae04:	009b      	lsls	r3, r3, #2
 800ae06:	4413      	add	r3, r2
 800ae08:	009b      	lsls	r3, r3, #2
 800ae0a:	4a12      	ldr	r2, [pc, #72]	; (800ae54 <prvInitialiseTaskLists+0x60>)
 800ae0c:	4413      	add	r3, r2
 800ae0e:	4618      	mov	r0, r3
 800ae10:	f7fe fd3a 	bl	8009888 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	3301      	adds	r3, #1
 800ae18:	607b      	str	r3, [r7, #4]
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	2b06      	cmp	r3, #6
 800ae1e:	d9ef      	bls.n	800ae00 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ae20:	480d      	ldr	r0, [pc, #52]	; (800ae58 <prvInitialiseTaskLists+0x64>)
 800ae22:	f7fe fd31 	bl	8009888 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ae26:	480d      	ldr	r0, [pc, #52]	; (800ae5c <prvInitialiseTaskLists+0x68>)
 800ae28:	f7fe fd2e 	bl	8009888 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ae2c:	480c      	ldr	r0, [pc, #48]	; (800ae60 <prvInitialiseTaskLists+0x6c>)
 800ae2e:	f7fe fd2b 	bl	8009888 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ae32:	480c      	ldr	r0, [pc, #48]	; (800ae64 <prvInitialiseTaskLists+0x70>)
 800ae34:	f7fe fd28 	bl	8009888 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ae38:	480b      	ldr	r0, [pc, #44]	; (800ae68 <prvInitialiseTaskLists+0x74>)
 800ae3a:	f7fe fd25 	bl	8009888 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ae3e:	4b0b      	ldr	r3, [pc, #44]	; (800ae6c <prvInitialiseTaskLists+0x78>)
 800ae40:	4a05      	ldr	r2, [pc, #20]	; (800ae58 <prvInitialiseTaskLists+0x64>)
 800ae42:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ae44:	4b0a      	ldr	r3, [pc, #40]	; (800ae70 <prvInitialiseTaskLists+0x7c>)
 800ae46:	4a05      	ldr	r2, [pc, #20]	; (800ae5c <prvInitialiseTaskLists+0x68>)
 800ae48:	601a      	str	r2, [r3, #0]
}
 800ae4a:	bf00      	nop
 800ae4c:	3708      	adds	r7, #8
 800ae4e:	46bd      	mov	sp, r7
 800ae50:	bd80      	pop	{r7, pc}
 800ae52:	bf00      	nop
 800ae54:	20000368 	.word	0x20000368
 800ae58:	200003f4 	.word	0x200003f4
 800ae5c:	20000408 	.word	0x20000408
 800ae60:	20000424 	.word	0x20000424
 800ae64:	20000438 	.word	0x20000438
 800ae68:	2000044c 	.word	0x2000044c
 800ae6c:	2000041c 	.word	0x2000041c
 800ae70:	20000420 	.word	0x20000420

0800ae74 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ae74:	b480      	push	{r7}
 800ae76:	b083      	sub	sp, #12
 800ae78:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ae7a:	4b0c      	ldr	r3, [pc, #48]	; (800aeac <prvResetNextTaskUnblockTime+0x38>)
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d104      	bne.n	800ae8e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ae84:	4b0a      	ldr	r3, [pc, #40]	; (800aeb0 <prvResetNextTaskUnblockTime+0x3c>)
 800ae86:	f04f 32ff 	mov.w	r2, #4294967295
 800ae8a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ae8c:	e008      	b.n	800aea0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ae8e:	4b07      	ldr	r3, [pc, #28]	; (800aeac <prvResetNextTaskUnblockTime+0x38>)
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	68db      	ldr	r3, [r3, #12]
 800ae94:	68db      	ldr	r3, [r3, #12]
 800ae96:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	685b      	ldr	r3, [r3, #4]
 800ae9c:	4a04      	ldr	r2, [pc, #16]	; (800aeb0 <prvResetNextTaskUnblockTime+0x3c>)
 800ae9e:	6013      	str	r3, [r2, #0]
}
 800aea0:	bf00      	nop
 800aea2:	370c      	adds	r7, #12
 800aea4:	46bd      	mov	sp, r7
 800aea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeaa:	4770      	bx	lr
 800aeac:	2000041c 	.word	0x2000041c
 800aeb0:	20000480 	.word	0x20000480

0800aeb4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800aeb4:	b480      	push	{r7}
 800aeb6:	b083      	sub	sp, #12
 800aeb8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800aeba:	4b0b      	ldr	r3, [pc, #44]	; (800aee8 <xTaskGetSchedulerState+0x34>)
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d102      	bne.n	800aec8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800aec2:	2301      	movs	r3, #1
 800aec4:	607b      	str	r3, [r7, #4]
 800aec6:	e008      	b.n	800aeda <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aec8:	4b08      	ldr	r3, [pc, #32]	; (800aeec <xTaskGetSchedulerState+0x38>)
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d102      	bne.n	800aed6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800aed0:	2302      	movs	r3, #2
 800aed2:	607b      	str	r3, [r7, #4]
 800aed4:	e001      	b.n	800aeda <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800aed6:	2300      	movs	r3, #0
 800aed8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800aeda:	687b      	ldr	r3, [r7, #4]
	}
 800aedc:	4618      	mov	r0, r3
 800aede:	370c      	adds	r7, #12
 800aee0:	46bd      	mov	sp, r7
 800aee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee6:	4770      	bx	lr
 800aee8:	2000046c 	.word	0x2000046c
 800aeec:	20000484 	.word	0x20000484

0800aef0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800aef0:	b580      	push	{r7, lr}
 800aef2:	b086      	sub	sp, #24
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800aefc:	2300      	movs	r3, #0
 800aefe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	2b00      	cmp	r3, #0
 800af04:	d06e      	beq.n	800afe4 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800af06:	4b3a      	ldr	r3, [pc, #232]	; (800aff0 <xTaskPriorityDisinherit+0x100>)
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	693a      	ldr	r2, [r7, #16]
 800af0c:	429a      	cmp	r2, r3
 800af0e:	d00a      	beq.n	800af26 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800af10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af14:	f383 8811 	msr	BASEPRI, r3
 800af18:	f3bf 8f6f 	isb	sy
 800af1c:	f3bf 8f4f 	dsb	sy
 800af20:	60fb      	str	r3, [r7, #12]
}
 800af22:	bf00      	nop
 800af24:	e7fe      	b.n	800af24 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800af26:	693b      	ldr	r3, [r7, #16]
 800af28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d10a      	bne.n	800af44 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800af2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af32:	f383 8811 	msr	BASEPRI, r3
 800af36:	f3bf 8f6f 	isb	sy
 800af3a:	f3bf 8f4f 	dsb	sy
 800af3e:	60bb      	str	r3, [r7, #8]
}
 800af40:	bf00      	nop
 800af42:	e7fe      	b.n	800af42 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800af44:	693b      	ldr	r3, [r7, #16]
 800af46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800af48:	1e5a      	subs	r2, r3, #1
 800af4a:	693b      	ldr	r3, [r7, #16]
 800af4c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800af4e:	693b      	ldr	r3, [r7, #16]
 800af50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af52:	693b      	ldr	r3, [r7, #16]
 800af54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af56:	429a      	cmp	r2, r3
 800af58:	d044      	beq.n	800afe4 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800af5a:	693b      	ldr	r3, [r7, #16]
 800af5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d140      	bne.n	800afe4 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800af62:	693b      	ldr	r3, [r7, #16]
 800af64:	3304      	adds	r3, #4
 800af66:	4618      	mov	r0, r3
 800af68:	f7fe fd18 	bl	800999c <uxListRemove>
 800af6c:	4603      	mov	r3, r0
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d115      	bne.n	800af9e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800af72:	693b      	ldr	r3, [r7, #16]
 800af74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af76:	491f      	ldr	r1, [pc, #124]	; (800aff4 <xTaskPriorityDisinherit+0x104>)
 800af78:	4613      	mov	r3, r2
 800af7a:	009b      	lsls	r3, r3, #2
 800af7c:	4413      	add	r3, r2
 800af7e:	009b      	lsls	r3, r3, #2
 800af80:	440b      	add	r3, r1
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	2b00      	cmp	r3, #0
 800af86:	d10a      	bne.n	800af9e <xTaskPriorityDisinherit+0xae>
 800af88:	693b      	ldr	r3, [r7, #16]
 800af8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af8c:	2201      	movs	r2, #1
 800af8e:	fa02 f303 	lsl.w	r3, r2, r3
 800af92:	43da      	mvns	r2, r3
 800af94:	4b18      	ldr	r3, [pc, #96]	; (800aff8 <xTaskPriorityDisinherit+0x108>)
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	4013      	ands	r3, r2
 800af9a:	4a17      	ldr	r2, [pc, #92]	; (800aff8 <xTaskPriorityDisinherit+0x108>)
 800af9c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800af9e:	693b      	ldr	r3, [r7, #16]
 800afa0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800afa2:	693b      	ldr	r3, [r7, #16]
 800afa4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800afa6:	693b      	ldr	r3, [r7, #16]
 800afa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afaa:	f1c3 0207 	rsb	r2, r3, #7
 800afae:	693b      	ldr	r3, [r7, #16]
 800afb0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800afb2:	693b      	ldr	r3, [r7, #16]
 800afb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afb6:	2201      	movs	r2, #1
 800afb8:	409a      	lsls	r2, r3
 800afba:	4b0f      	ldr	r3, [pc, #60]	; (800aff8 <xTaskPriorityDisinherit+0x108>)
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	4313      	orrs	r3, r2
 800afc0:	4a0d      	ldr	r2, [pc, #52]	; (800aff8 <xTaskPriorityDisinherit+0x108>)
 800afc2:	6013      	str	r3, [r2, #0]
 800afc4:	693b      	ldr	r3, [r7, #16]
 800afc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afc8:	4613      	mov	r3, r2
 800afca:	009b      	lsls	r3, r3, #2
 800afcc:	4413      	add	r3, r2
 800afce:	009b      	lsls	r3, r3, #2
 800afd0:	4a08      	ldr	r2, [pc, #32]	; (800aff4 <xTaskPriorityDisinherit+0x104>)
 800afd2:	441a      	add	r2, r3
 800afd4:	693b      	ldr	r3, [r7, #16]
 800afd6:	3304      	adds	r3, #4
 800afd8:	4619      	mov	r1, r3
 800afda:	4610      	mov	r0, r2
 800afdc:	f7fe fc81 	bl	80098e2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800afe0:	2301      	movs	r3, #1
 800afe2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800afe4:	697b      	ldr	r3, [r7, #20]
	}
 800afe6:	4618      	mov	r0, r3
 800afe8:	3718      	adds	r7, #24
 800afea:	46bd      	mov	sp, r7
 800afec:	bd80      	pop	{r7, pc}
 800afee:	bf00      	nop
 800aff0:	20000364 	.word	0x20000364
 800aff4:	20000368 	.word	0x20000368
 800aff8:	20000468 	.word	0x20000468

0800affc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800affc:	b580      	push	{r7, lr}
 800affe:	b084      	sub	sp, #16
 800b000:	af00      	add	r7, sp, #0
 800b002:	6078      	str	r0, [r7, #4]
 800b004:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b006:	4b29      	ldr	r3, [pc, #164]	; (800b0ac <prvAddCurrentTaskToDelayedList+0xb0>)
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b00c:	4b28      	ldr	r3, [pc, #160]	; (800b0b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	3304      	adds	r3, #4
 800b012:	4618      	mov	r0, r3
 800b014:	f7fe fcc2 	bl	800999c <uxListRemove>
 800b018:	4603      	mov	r3, r0
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d10b      	bne.n	800b036 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800b01e:	4b24      	ldr	r3, [pc, #144]	; (800b0b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b024:	2201      	movs	r2, #1
 800b026:	fa02 f303 	lsl.w	r3, r2, r3
 800b02a:	43da      	mvns	r2, r3
 800b02c:	4b21      	ldr	r3, [pc, #132]	; (800b0b4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	4013      	ands	r3, r2
 800b032:	4a20      	ldr	r2, [pc, #128]	; (800b0b4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b034:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b03c:	d10a      	bne.n	800b054 <prvAddCurrentTaskToDelayedList+0x58>
 800b03e:	683b      	ldr	r3, [r7, #0]
 800b040:	2b00      	cmp	r3, #0
 800b042:	d007      	beq.n	800b054 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b044:	4b1a      	ldr	r3, [pc, #104]	; (800b0b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	3304      	adds	r3, #4
 800b04a:	4619      	mov	r1, r3
 800b04c:	481a      	ldr	r0, [pc, #104]	; (800b0b8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800b04e:	f7fe fc48 	bl	80098e2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b052:	e026      	b.n	800b0a2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b054:	68fa      	ldr	r2, [r7, #12]
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	4413      	add	r3, r2
 800b05a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b05c:	4b14      	ldr	r3, [pc, #80]	; (800b0b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	68ba      	ldr	r2, [r7, #8]
 800b062:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b064:	68ba      	ldr	r2, [r7, #8]
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	429a      	cmp	r2, r3
 800b06a:	d209      	bcs.n	800b080 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b06c:	4b13      	ldr	r3, [pc, #76]	; (800b0bc <prvAddCurrentTaskToDelayedList+0xc0>)
 800b06e:	681a      	ldr	r2, [r3, #0]
 800b070:	4b0f      	ldr	r3, [pc, #60]	; (800b0b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	3304      	adds	r3, #4
 800b076:	4619      	mov	r1, r3
 800b078:	4610      	mov	r0, r2
 800b07a:	f7fe fc56 	bl	800992a <vListInsert>
}
 800b07e:	e010      	b.n	800b0a2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b080:	4b0f      	ldr	r3, [pc, #60]	; (800b0c0 <prvAddCurrentTaskToDelayedList+0xc4>)
 800b082:	681a      	ldr	r2, [r3, #0]
 800b084:	4b0a      	ldr	r3, [pc, #40]	; (800b0b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	3304      	adds	r3, #4
 800b08a:	4619      	mov	r1, r3
 800b08c:	4610      	mov	r0, r2
 800b08e:	f7fe fc4c 	bl	800992a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b092:	4b0c      	ldr	r3, [pc, #48]	; (800b0c4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	68ba      	ldr	r2, [r7, #8]
 800b098:	429a      	cmp	r2, r3
 800b09a:	d202      	bcs.n	800b0a2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800b09c:	4a09      	ldr	r2, [pc, #36]	; (800b0c4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b09e:	68bb      	ldr	r3, [r7, #8]
 800b0a0:	6013      	str	r3, [r2, #0]
}
 800b0a2:	bf00      	nop
 800b0a4:	3710      	adds	r7, #16
 800b0a6:	46bd      	mov	sp, r7
 800b0a8:	bd80      	pop	{r7, pc}
 800b0aa:	bf00      	nop
 800b0ac:	20000464 	.word	0x20000464
 800b0b0:	20000364 	.word	0x20000364
 800b0b4:	20000468 	.word	0x20000468
 800b0b8:	2000044c 	.word	0x2000044c
 800b0bc:	20000420 	.word	0x20000420
 800b0c0:	2000041c 	.word	0x2000041c
 800b0c4:	20000480 	.word	0x20000480

0800b0c8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b0c8:	b480      	push	{r7}
 800b0ca:	b085      	sub	sp, #20
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	60f8      	str	r0, [r7, #12]
 800b0d0:	60b9      	str	r1, [r7, #8]
 800b0d2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	3b04      	subs	r3, #4
 800b0d8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b0e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	3b04      	subs	r3, #4
 800b0e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b0e8:	68bb      	ldr	r3, [r7, #8]
 800b0ea:	f023 0201 	bic.w	r2, r3, #1
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	3b04      	subs	r3, #4
 800b0f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b0f8:	4a0c      	ldr	r2, [pc, #48]	; (800b12c <pxPortInitialiseStack+0x64>)
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	3b14      	subs	r3, #20
 800b102:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b104:	687a      	ldr	r2, [r7, #4]
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	3b04      	subs	r3, #4
 800b10e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	f06f 0202 	mvn.w	r2, #2
 800b116:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	3b20      	subs	r3, #32
 800b11c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b11e:	68fb      	ldr	r3, [r7, #12]
}
 800b120:	4618      	mov	r0, r3
 800b122:	3714      	adds	r7, #20
 800b124:	46bd      	mov	sp, r7
 800b126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b12a:	4770      	bx	lr
 800b12c:	0800b131 	.word	0x0800b131

0800b130 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b130:	b480      	push	{r7}
 800b132:	b085      	sub	sp, #20
 800b134:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b136:	2300      	movs	r3, #0
 800b138:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b13a:	4b12      	ldr	r3, [pc, #72]	; (800b184 <prvTaskExitError+0x54>)
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b142:	d00a      	beq.n	800b15a <prvTaskExitError+0x2a>
	__asm volatile
 800b144:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b148:	f383 8811 	msr	BASEPRI, r3
 800b14c:	f3bf 8f6f 	isb	sy
 800b150:	f3bf 8f4f 	dsb	sy
 800b154:	60fb      	str	r3, [r7, #12]
}
 800b156:	bf00      	nop
 800b158:	e7fe      	b.n	800b158 <prvTaskExitError+0x28>
	__asm volatile
 800b15a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b15e:	f383 8811 	msr	BASEPRI, r3
 800b162:	f3bf 8f6f 	isb	sy
 800b166:	f3bf 8f4f 	dsb	sy
 800b16a:	60bb      	str	r3, [r7, #8]
}
 800b16c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b16e:	bf00      	nop
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	2b00      	cmp	r3, #0
 800b174:	d0fc      	beq.n	800b170 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b176:	bf00      	nop
 800b178:	bf00      	nop
 800b17a:	3714      	adds	r7, #20
 800b17c:	46bd      	mov	sp, r7
 800b17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b182:	4770      	bx	lr
 800b184:	2000002c 	.word	0x2000002c
	...

0800b190 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b190:	4b07      	ldr	r3, [pc, #28]	; (800b1b0 <pxCurrentTCBConst2>)
 800b192:	6819      	ldr	r1, [r3, #0]
 800b194:	6808      	ldr	r0, [r1, #0]
 800b196:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b19a:	f380 8809 	msr	PSP, r0
 800b19e:	f3bf 8f6f 	isb	sy
 800b1a2:	f04f 0000 	mov.w	r0, #0
 800b1a6:	f380 8811 	msr	BASEPRI, r0
 800b1aa:	4770      	bx	lr
 800b1ac:	f3af 8000 	nop.w

0800b1b0 <pxCurrentTCBConst2>:
 800b1b0:	20000364 	.word	0x20000364
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b1b4:	bf00      	nop
 800b1b6:	bf00      	nop

0800b1b8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b1b8:	b480      	push	{r7}
 800b1ba:	b083      	sub	sp, #12
 800b1bc:	af00      	add	r7, sp, #0
	__asm volatile
 800b1be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1c2:	f383 8811 	msr	BASEPRI, r3
 800b1c6:	f3bf 8f6f 	isb	sy
 800b1ca:	f3bf 8f4f 	dsb	sy
 800b1ce:	607b      	str	r3, [r7, #4]
}
 800b1d0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b1d2:	4b0f      	ldr	r3, [pc, #60]	; (800b210 <vPortEnterCritical+0x58>)
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	3301      	adds	r3, #1
 800b1d8:	4a0d      	ldr	r2, [pc, #52]	; (800b210 <vPortEnterCritical+0x58>)
 800b1da:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b1dc:	4b0c      	ldr	r3, [pc, #48]	; (800b210 <vPortEnterCritical+0x58>)
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	2b01      	cmp	r3, #1
 800b1e2:	d10f      	bne.n	800b204 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b1e4:	4b0b      	ldr	r3, [pc, #44]	; (800b214 <vPortEnterCritical+0x5c>)
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	b2db      	uxtb	r3, r3
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d00a      	beq.n	800b204 <vPortEnterCritical+0x4c>
	__asm volatile
 800b1ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1f2:	f383 8811 	msr	BASEPRI, r3
 800b1f6:	f3bf 8f6f 	isb	sy
 800b1fa:	f3bf 8f4f 	dsb	sy
 800b1fe:	603b      	str	r3, [r7, #0]
}
 800b200:	bf00      	nop
 800b202:	e7fe      	b.n	800b202 <vPortEnterCritical+0x4a>
	}
}
 800b204:	bf00      	nop
 800b206:	370c      	adds	r7, #12
 800b208:	46bd      	mov	sp, r7
 800b20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b20e:	4770      	bx	lr
 800b210:	2000002c 	.word	0x2000002c
 800b214:	e000ed04 	.word	0xe000ed04

0800b218 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b218:	b480      	push	{r7}
 800b21a:	b083      	sub	sp, #12
 800b21c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b21e:	4b12      	ldr	r3, [pc, #72]	; (800b268 <vPortExitCritical+0x50>)
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	2b00      	cmp	r3, #0
 800b224:	d10a      	bne.n	800b23c <vPortExitCritical+0x24>
	__asm volatile
 800b226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b22a:	f383 8811 	msr	BASEPRI, r3
 800b22e:	f3bf 8f6f 	isb	sy
 800b232:	f3bf 8f4f 	dsb	sy
 800b236:	607b      	str	r3, [r7, #4]
}
 800b238:	bf00      	nop
 800b23a:	e7fe      	b.n	800b23a <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b23c:	4b0a      	ldr	r3, [pc, #40]	; (800b268 <vPortExitCritical+0x50>)
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	3b01      	subs	r3, #1
 800b242:	4a09      	ldr	r2, [pc, #36]	; (800b268 <vPortExitCritical+0x50>)
 800b244:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b246:	4b08      	ldr	r3, [pc, #32]	; (800b268 <vPortExitCritical+0x50>)
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d105      	bne.n	800b25a <vPortExitCritical+0x42>
 800b24e:	2300      	movs	r3, #0
 800b250:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b252:	683b      	ldr	r3, [r7, #0]
 800b254:	f383 8811 	msr	BASEPRI, r3
}
 800b258:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b25a:	bf00      	nop
 800b25c:	370c      	adds	r7, #12
 800b25e:	46bd      	mov	sp, r7
 800b260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b264:	4770      	bx	lr
 800b266:	bf00      	nop
 800b268:	2000002c 	.word	0x2000002c
 800b26c:	00000000 	.word	0x00000000

0800b270 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b270:	f3ef 8009 	mrs	r0, PSP
 800b274:	f3bf 8f6f 	isb	sy
 800b278:	4b15      	ldr	r3, [pc, #84]	; (800b2d0 <pxCurrentTCBConst>)
 800b27a:	681a      	ldr	r2, [r3, #0]
 800b27c:	f01e 0f10 	tst.w	lr, #16
 800b280:	bf08      	it	eq
 800b282:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b286:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b28a:	6010      	str	r0, [r2, #0]
 800b28c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b290:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b294:	f380 8811 	msr	BASEPRI, r0
 800b298:	f3bf 8f4f 	dsb	sy
 800b29c:	f3bf 8f6f 	isb	sy
 800b2a0:	f7ff fc1e 	bl	800aae0 <vTaskSwitchContext>
 800b2a4:	f04f 0000 	mov.w	r0, #0
 800b2a8:	f380 8811 	msr	BASEPRI, r0
 800b2ac:	bc09      	pop	{r0, r3}
 800b2ae:	6819      	ldr	r1, [r3, #0]
 800b2b0:	6808      	ldr	r0, [r1, #0]
 800b2b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2b6:	f01e 0f10 	tst.w	lr, #16
 800b2ba:	bf08      	it	eq
 800b2bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b2c0:	f380 8809 	msr	PSP, r0
 800b2c4:	f3bf 8f6f 	isb	sy
 800b2c8:	4770      	bx	lr
 800b2ca:	bf00      	nop
 800b2cc:	f3af 8000 	nop.w

0800b2d0 <pxCurrentTCBConst>:
 800b2d0:	20000364 	.word	0x20000364
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b2d4:	bf00      	nop
 800b2d6:	bf00      	nop

0800b2d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b2d8:	b580      	push	{r7, lr}
 800b2da:	b082      	sub	sp, #8
 800b2dc:	af00      	add	r7, sp, #0
	__asm volatile
 800b2de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2e2:	f383 8811 	msr	BASEPRI, r3
 800b2e6:	f3bf 8f6f 	isb	sy
 800b2ea:	f3bf 8f4f 	dsb	sy
 800b2ee:	607b      	str	r3, [r7, #4]
}
 800b2f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b2f2:	f7ff fb3d 	bl	800a970 <xTaskIncrementTick>
 800b2f6:	4603      	mov	r3, r0
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d003      	beq.n	800b304 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b2fc:	4b06      	ldr	r3, [pc, #24]	; (800b318 <SysTick_Handler+0x40>)
 800b2fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b302:	601a      	str	r2, [r3, #0]
 800b304:	2300      	movs	r3, #0
 800b306:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b308:	683b      	ldr	r3, [r7, #0]
 800b30a:	f383 8811 	msr	BASEPRI, r3
}
 800b30e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b310:	bf00      	nop
 800b312:	3708      	adds	r7, #8
 800b314:	46bd      	mov	sp, r7
 800b316:	bd80      	pop	{r7, pc}
 800b318:	e000ed04 	.word	0xe000ed04

0800b31c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b31c:	b480      	push	{r7}
 800b31e:	b085      	sub	sp, #20
 800b320:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b322:	f3ef 8305 	mrs	r3, IPSR
 800b326:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	2b0f      	cmp	r3, #15
 800b32c:	d914      	bls.n	800b358 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b32e:	4a17      	ldr	r2, [pc, #92]	; (800b38c <vPortValidateInterruptPriority+0x70>)
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	4413      	add	r3, r2
 800b334:	781b      	ldrb	r3, [r3, #0]
 800b336:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b338:	4b15      	ldr	r3, [pc, #84]	; (800b390 <vPortValidateInterruptPriority+0x74>)
 800b33a:	781b      	ldrb	r3, [r3, #0]
 800b33c:	7afa      	ldrb	r2, [r7, #11]
 800b33e:	429a      	cmp	r2, r3
 800b340:	d20a      	bcs.n	800b358 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b342:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b346:	f383 8811 	msr	BASEPRI, r3
 800b34a:	f3bf 8f6f 	isb	sy
 800b34e:	f3bf 8f4f 	dsb	sy
 800b352:	607b      	str	r3, [r7, #4]
}
 800b354:	bf00      	nop
 800b356:	e7fe      	b.n	800b356 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b358:	4b0e      	ldr	r3, [pc, #56]	; (800b394 <vPortValidateInterruptPriority+0x78>)
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b360:	4b0d      	ldr	r3, [pc, #52]	; (800b398 <vPortValidateInterruptPriority+0x7c>)
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	429a      	cmp	r2, r3
 800b366:	d90a      	bls.n	800b37e <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b36c:	f383 8811 	msr	BASEPRI, r3
 800b370:	f3bf 8f6f 	isb	sy
 800b374:	f3bf 8f4f 	dsb	sy
 800b378:	603b      	str	r3, [r7, #0]
}
 800b37a:	bf00      	nop
 800b37c:	e7fe      	b.n	800b37c <vPortValidateInterruptPriority+0x60>
	}
 800b37e:	bf00      	nop
 800b380:	3714      	adds	r7, #20
 800b382:	46bd      	mov	sp, r7
 800b384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b388:	4770      	bx	lr
 800b38a:	bf00      	nop
 800b38c:	e000e3f0 	.word	0xe000e3f0
 800b390:	20000488 	.word	0x20000488
 800b394:	e000ed0c 	.word	0xe000ed0c
 800b398:	2000048c 	.word	0x2000048c

0800b39c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b39c:	b580      	push	{r7, lr}
 800b39e:	b08a      	sub	sp, #40	; 0x28
 800b3a0:	af00      	add	r7, sp, #0
 800b3a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b3a4:	2300      	movs	r3, #0
 800b3a6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b3a8:	f7ff fa38 	bl	800a81c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b3ac:	4b5d      	ldr	r3, [pc, #372]	; (800b524 <pvPortMalloc+0x188>)
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d101      	bne.n	800b3b8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b3b4:	f000 f924 	bl	800b600 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b3b8:	4b5b      	ldr	r3, [pc, #364]	; (800b528 <pvPortMalloc+0x18c>)
 800b3ba:	681a      	ldr	r2, [r3, #0]
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	4013      	ands	r3, r2
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	f040 8093 	bne.w	800b4ec <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d01d      	beq.n	800b408 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b3cc:	2208      	movs	r2, #8
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	4413      	add	r3, r2
 800b3d2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	f003 0307 	and.w	r3, r3, #7
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d014      	beq.n	800b408 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	f023 0307 	bic.w	r3, r3, #7
 800b3e4:	3308      	adds	r3, #8
 800b3e6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	f003 0307 	and.w	r3, r3, #7
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d00a      	beq.n	800b408 <pvPortMalloc+0x6c>
	__asm volatile
 800b3f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3f6:	f383 8811 	msr	BASEPRI, r3
 800b3fa:	f3bf 8f6f 	isb	sy
 800b3fe:	f3bf 8f4f 	dsb	sy
 800b402:	617b      	str	r3, [r7, #20]
}
 800b404:	bf00      	nop
 800b406:	e7fe      	b.n	800b406 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d06e      	beq.n	800b4ec <pvPortMalloc+0x150>
 800b40e:	4b47      	ldr	r3, [pc, #284]	; (800b52c <pvPortMalloc+0x190>)
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	687a      	ldr	r2, [r7, #4]
 800b414:	429a      	cmp	r2, r3
 800b416:	d869      	bhi.n	800b4ec <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b418:	4b45      	ldr	r3, [pc, #276]	; (800b530 <pvPortMalloc+0x194>)
 800b41a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b41c:	4b44      	ldr	r3, [pc, #272]	; (800b530 <pvPortMalloc+0x194>)
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b422:	e004      	b.n	800b42e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b426:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b42e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b430:	685b      	ldr	r3, [r3, #4]
 800b432:	687a      	ldr	r2, [r7, #4]
 800b434:	429a      	cmp	r2, r3
 800b436:	d903      	bls.n	800b440 <pvPortMalloc+0xa4>
 800b438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d1f1      	bne.n	800b424 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b440:	4b38      	ldr	r3, [pc, #224]	; (800b524 <pvPortMalloc+0x188>)
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b446:	429a      	cmp	r2, r3
 800b448:	d050      	beq.n	800b4ec <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b44a:	6a3b      	ldr	r3, [r7, #32]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	2208      	movs	r2, #8
 800b450:	4413      	add	r3, r2
 800b452:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b456:	681a      	ldr	r2, [r3, #0]
 800b458:	6a3b      	ldr	r3, [r7, #32]
 800b45a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b45c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b45e:	685a      	ldr	r2, [r3, #4]
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	1ad2      	subs	r2, r2, r3
 800b464:	2308      	movs	r3, #8
 800b466:	005b      	lsls	r3, r3, #1
 800b468:	429a      	cmp	r2, r3
 800b46a:	d91f      	bls.n	800b4ac <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b46c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	4413      	add	r3, r2
 800b472:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b474:	69bb      	ldr	r3, [r7, #24]
 800b476:	f003 0307 	and.w	r3, r3, #7
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d00a      	beq.n	800b494 <pvPortMalloc+0xf8>
	__asm volatile
 800b47e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b482:	f383 8811 	msr	BASEPRI, r3
 800b486:	f3bf 8f6f 	isb	sy
 800b48a:	f3bf 8f4f 	dsb	sy
 800b48e:	613b      	str	r3, [r7, #16]
}
 800b490:	bf00      	nop
 800b492:	e7fe      	b.n	800b492 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b496:	685a      	ldr	r2, [r3, #4]
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	1ad2      	subs	r2, r2, r3
 800b49c:	69bb      	ldr	r3, [r7, #24]
 800b49e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b4a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4a2:	687a      	ldr	r2, [r7, #4]
 800b4a4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b4a6:	69b8      	ldr	r0, [r7, #24]
 800b4a8:	f000 f90c 	bl	800b6c4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b4ac:	4b1f      	ldr	r3, [pc, #124]	; (800b52c <pvPortMalloc+0x190>)
 800b4ae:	681a      	ldr	r2, [r3, #0]
 800b4b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4b2:	685b      	ldr	r3, [r3, #4]
 800b4b4:	1ad3      	subs	r3, r2, r3
 800b4b6:	4a1d      	ldr	r2, [pc, #116]	; (800b52c <pvPortMalloc+0x190>)
 800b4b8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b4ba:	4b1c      	ldr	r3, [pc, #112]	; (800b52c <pvPortMalloc+0x190>)
 800b4bc:	681a      	ldr	r2, [r3, #0]
 800b4be:	4b1d      	ldr	r3, [pc, #116]	; (800b534 <pvPortMalloc+0x198>)
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	429a      	cmp	r2, r3
 800b4c4:	d203      	bcs.n	800b4ce <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b4c6:	4b19      	ldr	r3, [pc, #100]	; (800b52c <pvPortMalloc+0x190>)
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	4a1a      	ldr	r2, [pc, #104]	; (800b534 <pvPortMalloc+0x198>)
 800b4cc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b4ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4d0:	685a      	ldr	r2, [r3, #4]
 800b4d2:	4b15      	ldr	r3, [pc, #84]	; (800b528 <pvPortMalloc+0x18c>)
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	431a      	orrs	r2, r3
 800b4d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4da:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b4dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4de:	2200      	movs	r2, #0
 800b4e0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b4e2:	4b15      	ldr	r3, [pc, #84]	; (800b538 <pvPortMalloc+0x19c>)
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	3301      	adds	r3, #1
 800b4e8:	4a13      	ldr	r2, [pc, #76]	; (800b538 <pvPortMalloc+0x19c>)
 800b4ea:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b4ec:	f7ff f9a4 	bl	800a838 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800b4f0:	69fb      	ldr	r3, [r7, #28]
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d101      	bne.n	800b4fa <pvPortMalloc+0x15e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800b4f6:	f7f5 f808 	bl	800050a <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b4fa:	69fb      	ldr	r3, [r7, #28]
 800b4fc:	f003 0307 	and.w	r3, r3, #7
 800b500:	2b00      	cmp	r3, #0
 800b502:	d00a      	beq.n	800b51a <pvPortMalloc+0x17e>
	__asm volatile
 800b504:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b508:	f383 8811 	msr	BASEPRI, r3
 800b50c:	f3bf 8f6f 	isb	sy
 800b510:	f3bf 8f4f 	dsb	sy
 800b514:	60fb      	str	r3, [r7, #12]
}
 800b516:	bf00      	nop
 800b518:	e7fe      	b.n	800b518 <pvPortMalloc+0x17c>
	return pvReturn;
 800b51a:	69fb      	ldr	r3, [r7, #28]
}
 800b51c:	4618      	mov	r0, r3
 800b51e:	3728      	adds	r7, #40	; 0x28
 800b520:	46bd      	mov	sp, r7
 800b522:	bd80      	pop	{r7, pc}
 800b524:	20008498 	.word	0x20008498
 800b528:	200084ac 	.word	0x200084ac
 800b52c:	2000849c 	.word	0x2000849c
 800b530:	20008490 	.word	0x20008490
 800b534:	200084a0 	.word	0x200084a0
 800b538:	200084a4 	.word	0x200084a4

0800b53c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b53c:	b580      	push	{r7, lr}
 800b53e:	b086      	sub	sp, #24
 800b540:	af00      	add	r7, sp, #0
 800b542:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d04d      	beq.n	800b5ea <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b54e:	2308      	movs	r3, #8
 800b550:	425b      	negs	r3, r3
 800b552:	697a      	ldr	r2, [r7, #20]
 800b554:	4413      	add	r3, r2
 800b556:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b558:	697b      	ldr	r3, [r7, #20]
 800b55a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b55c:	693b      	ldr	r3, [r7, #16]
 800b55e:	685a      	ldr	r2, [r3, #4]
 800b560:	4b24      	ldr	r3, [pc, #144]	; (800b5f4 <vPortFree+0xb8>)
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	4013      	ands	r3, r2
 800b566:	2b00      	cmp	r3, #0
 800b568:	d10a      	bne.n	800b580 <vPortFree+0x44>
	__asm volatile
 800b56a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b56e:	f383 8811 	msr	BASEPRI, r3
 800b572:	f3bf 8f6f 	isb	sy
 800b576:	f3bf 8f4f 	dsb	sy
 800b57a:	60fb      	str	r3, [r7, #12]
}
 800b57c:	bf00      	nop
 800b57e:	e7fe      	b.n	800b57e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b580:	693b      	ldr	r3, [r7, #16]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	2b00      	cmp	r3, #0
 800b586:	d00a      	beq.n	800b59e <vPortFree+0x62>
	__asm volatile
 800b588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b58c:	f383 8811 	msr	BASEPRI, r3
 800b590:	f3bf 8f6f 	isb	sy
 800b594:	f3bf 8f4f 	dsb	sy
 800b598:	60bb      	str	r3, [r7, #8]
}
 800b59a:	bf00      	nop
 800b59c:	e7fe      	b.n	800b59c <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b59e:	693b      	ldr	r3, [r7, #16]
 800b5a0:	685a      	ldr	r2, [r3, #4]
 800b5a2:	4b14      	ldr	r3, [pc, #80]	; (800b5f4 <vPortFree+0xb8>)
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	4013      	ands	r3, r2
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d01e      	beq.n	800b5ea <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b5ac:	693b      	ldr	r3, [r7, #16]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d11a      	bne.n	800b5ea <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b5b4:	693b      	ldr	r3, [r7, #16]
 800b5b6:	685a      	ldr	r2, [r3, #4]
 800b5b8:	4b0e      	ldr	r3, [pc, #56]	; (800b5f4 <vPortFree+0xb8>)
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	43db      	mvns	r3, r3
 800b5be:	401a      	ands	r2, r3
 800b5c0:	693b      	ldr	r3, [r7, #16]
 800b5c2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b5c4:	f7ff f92a 	bl	800a81c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b5c8:	693b      	ldr	r3, [r7, #16]
 800b5ca:	685a      	ldr	r2, [r3, #4]
 800b5cc:	4b0a      	ldr	r3, [pc, #40]	; (800b5f8 <vPortFree+0xbc>)
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	4413      	add	r3, r2
 800b5d2:	4a09      	ldr	r2, [pc, #36]	; (800b5f8 <vPortFree+0xbc>)
 800b5d4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b5d6:	6938      	ldr	r0, [r7, #16]
 800b5d8:	f000 f874 	bl	800b6c4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b5dc:	4b07      	ldr	r3, [pc, #28]	; (800b5fc <vPortFree+0xc0>)
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	3301      	adds	r3, #1
 800b5e2:	4a06      	ldr	r2, [pc, #24]	; (800b5fc <vPortFree+0xc0>)
 800b5e4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b5e6:	f7ff f927 	bl	800a838 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b5ea:	bf00      	nop
 800b5ec:	3718      	adds	r7, #24
 800b5ee:	46bd      	mov	sp, r7
 800b5f0:	bd80      	pop	{r7, pc}
 800b5f2:	bf00      	nop
 800b5f4:	200084ac 	.word	0x200084ac
 800b5f8:	2000849c 	.word	0x2000849c
 800b5fc:	200084a8 	.word	0x200084a8

0800b600 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b600:	b480      	push	{r7}
 800b602:	b085      	sub	sp, #20
 800b604:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b606:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b60a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b60c:	4b27      	ldr	r3, [pc, #156]	; (800b6ac <prvHeapInit+0xac>)
 800b60e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	f003 0307 	and.w	r3, r3, #7
 800b616:	2b00      	cmp	r3, #0
 800b618:	d00c      	beq.n	800b634 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	3307      	adds	r3, #7
 800b61e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	f023 0307 	bic.w	r3, r3, #7
 800b626:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b628:	68ba      	ldr	r2, [r7, #8]
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	1ad3      	subs	r3, r2, r3
 800b62e:	4a1f      	ldr	r2, [pc, #124]	; (800b6ac <prvHeapInit+0xac>)
 800b630:	4413      	add	r3, r2
 800b632:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b638:	4a1d      	ldr	r2, [pc, #116]	; (800b6b0 <prvHeapInit+0xb0>)
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b63e:	4b1c      	ldr	r3, [pc, #112]	; (800b6b0 <prvHeapInit+0xb0>)
 800b640:	2200      	movs	r2, #0
 800b642:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	68ba      	ldr	r2, [r7, #8]
 800b648:	4413      	add	r3, r2
 800b64a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b64c:	2208      	movs	r2, #8
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	1a9b      	subs	r3, r3, r2
 800b652:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	f023 0307 	bic.w	r3, r3, #7
 800b65a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	4a15      	ldr	r2, [pc, #84]	; (800b6b4 <prvHeapInit+0xb4>)
 800b660:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b662:	4b14      	ldr	r3, [pc, #80]	; (800b6b4 <prvHeapInit+0xb4>)
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	2200      	movs	r2, #0
 800b668:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b66a:	4b12      	ldr	r3, [pc, #72]	; (800b6b4 <prvHeapInit+0xb4>)
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	2200      	movs	r2, #0
 800b670:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b676:	683b      	ldr	r3, [r7, #0]
 800b678:	68fa      	ldr	r2, [r7, #12]
 800b67a:	1ad2      	subs	r2, r2, r3
 800b67c:	683b      	ldr	r3, [r7, #0]
 800b67e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b680:	4b0c      	ldr	r3, [pc, #48]	; (800b6b4 <prvHeapInit+0xb4>)
 800b682:	681a      	ldr	r2, [r3, #0]
 800b684:	683b      	ldr	r3, [r7, #0]
 800b686:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b688:	683b      	ldr	r3, [r7, #0]
 800b68a:	685b      	ldr	r3, [r3, #4]
 800b68c:	4a0a      	ldr	r2, [pc, #40]	; (800b6b8 <prvHeapInit+0xb8>)
 800b68e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b690:	683b      	ldr	r3, [r7, #0]
 800b692:	685b      	ldr	r3, [r3, #4]
 800b694:	4a09      	ldr	r2, [pc, #36]	; (800b6bc <prvHeapInit+0xbc>)
 800b696:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b698:	4b09      	ldr	r3, [pc, #36]	; (800b6c0 <prvHeapInit+0xc0>)
 800b69a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b69e:	601a      	str	r2, [r3, #0]
}
 800b6a0:	bf00      	nop
 800b6a2:	3714      	adds	r7, #20
 800b6a4:	46bd      	mov	sp, r7
 800b6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6aa:	4770      	bx	lr
 800b6ac:	20000490 	.word	0x20000490
 800b6b0:	20008490 	.word	0x20008490
 800b6b4:	20008498 	.word	0x20008498
 800b6b8:	200084a0 	.word	0x200084a0
 800b6bc:	2000849c 	.word	0x2000849c
 800b6c0:	200084ac 	.word	0x200084ac

0800b6c4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b6c4:	b480      	push	{r7}
 800b6c6:	b085      	sub	sp, #20
 800b6c8:	af00      	add	r7, sp, #0
 800b6ca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b6cc:	4b28      	ldr	r3, [pc, #160]	; (800b770 <prvInsertBlockIntoFreeList+0xac>)
 800b6ce:	60fb      	str	r3, [r7, #12]
 800b6d0:	e002      	b.n	800b6d8 <prvInsertBlockIntoFreeList+0x14>
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	60fb      	str	r3, [r7, #12]
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	687a      	ldr	r2, [r7, #4]
 800b6de:	429a      	cmp	r2, r3
 800b6e0:	d8f7      	bhi.n	800b6d2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	685b      	ldr	r3, [r3, #4]
 800b6ea:	68ba      	ldr	r2, [r7, #8]
 800b6ec:	4413      	add	r3, r2
 800b6ee:	687a      	ldr	r2, [r7, #4]
 800b6f0:	429a      	cmp	r2, r3
 800b6f2:	d108      	bne.n	800b706 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	685a      	ldr	r2, [r3, #4]
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	685b      	ldr	r3, [r3, #4]
 800b6fc:	441a      	add	r2, r3
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	685b      	ldr	r3, [r3, #4]
 800b70e:	68ba      	ldr	r2, [r7, #8]
 800b710:	441a      	add	r2, r3
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	429a      	cmp	r2, r3
 800b718:	d118      	bne.n	800b74c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	681a      	ldr	r2, [r3, #0]
 800b71e:	4b15      	ldr	r3, [pc, #84]	; (800b774 <prvInsertBlockIntoFreeList+0xb0>)
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	429a      	cmp	r2, r3
 800b724:	d00d      	beq.n	800b742 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	685a      	ldr	r2, [r3, #4]
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	685b      	ldr	r3, [r3, #4]
 800b730:	441a      	add	r2, r3
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	681a      	ldr	r2, [r3, #0]
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	601a      	str	r2, [r3, #0]
 800b740:	e008      	b.n	800b754 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b742:	4b0c      	ldr	r3, [pc, #48]	; (800b774 <prvInsertBlockIntoFreeList+0xb0>)
 800b744:	681a      	ldr	r2, [r3, #0]
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	601a      	str	r2, [r3, #0]
 800b74a:	e003      	b.n	800b754 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	681a      	ldr	r2, [r3, #0]
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b754:	68fa      	ldr	r2, [r7, #12]
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	429a      	cmp	r2, r3
 800b75a:	d002      	beq.n	800b762 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	687a      	ldr	r2, [r7, #4]
 800b760:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b762:	bf00      	nop
 800b764:	3714      	adds	r7, #20
 800b766:	46bd      	mov	sp, r7
 800b768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b76c:	4770      	bx	lr
 800b76e:	bf00      	nop
 800b770:	20008490 	.word	0x20008490
 800b774:	20008498 	.word	0x20008498

0800b778 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800b778:	b580      	push	{r7, lr}
 800b77a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 800b77c:	2200      	movs	r2, #0
 800b77e:	490e      	ldr	r1, [pc, #56]	; (800b7b8 <MX_USB_HOST_Init+0x40>)
 800b780:	480e      	ldr	r0, [pc, #56]	; (800b7bc <MX_USB_HOST_Init+0x44>)
 800b782:	f7fc f897 	bl	80078b4 <USBH_Init>
 800b786:	4603      	mov	r3, r0
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d001      	beq.n	800b790 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800b78c:	f7f5 faa6 	bl	8000cdc <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_CDC_CLASS) != USBH_OK)
 800b790:	490b      	ldr	r1, [pc, #44]	; (800b7c0 <MX_USB_HOST_Init+0x48>)
 800b792:	480a      	ldr	r0, [pc, #40]	; (800b7bc <MX_USB_HOST_Init+0x44>)
 800b794:	f7fc f944 	bl	8007a20 <USBH_RegisterClass>
 800b798:	4603      	mov	r3, r0
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d001      	beq.n	800b7a2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800b79e:	f7f5 fa9d 	bl	8000cdc <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 800b7a2:	4806      	ldr	r0, [pc, #24]	; (800b7bc <MX_USB_HOST_Init+0x44>)
 800b7a4:	f7fc f9c8 	bl	8007b38 <USBH_Start>
 800b7a8:	4603      	mov	r3, r0
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d001      	beq.n	800b7b2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800b7ae:	f7f5 fa95 	bl	8000cdc <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800b7b2:	bf00      	nop
 800b7b4:	bd80      	pop	{r7, pc}
 800b7b6:	bf00      	nop
 800b7b8:	0800b7c5 	.word	0x0800b7c5
 800b7bc:	200084b0 	.word	0x200084b0
 800b7c0:	2000000c 	.word	0x2000000c

0800b7c4 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800b7c4:	b480      	push	{r7}
 800b7c6:	b083      	sub	sp, #12
 800b7c8:	af00      	add	r7, sp, #0
 800b7ca:	6078      	str	r0, [r7, #4]
 800b7cc:	460b      	mov	r3, r1
 800b7ce:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800b7d0:	78fb      	ldrb	r3, [r7, #3]
 800b7d2:	3b01      	subs	r3, #1
 800b7d4:	2b04      	cmp	r3, #4
 800b7d6:	d819      	bhi.n	800b80c <USBH_UserProcess+0x48>
 800b7d8:	a201      	add	r2, pc, #4	; (adr r2, 800b7e0 <USBH_UserProcess+0x1c>)
 800b7da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7de:	bf00      	nop
 800b7e0:	0800b80d 	.word	0x0800b80d
 800b7e4:	0800b7fd 	.word	0x0800b7fd
 800b7e8:	0800b80d 	.word	0x0800b80d
 800b7ec:	0800b805 	.word	0x0800b805
 800b7f0:	0800b7f5 	.word	0x0800b7f5
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800b7f4:	4b09      	ldr	r3, [pc, #36]	; (800b81c <USBH_UserProcess+0x58>)
 800b7f6:	2203      	movs	r2, #3
 800b7f8:	701a      	strb	r2, [r3, #0]
  break;
 800b7fa:	e008      	b.n	800b80e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800b7fc:	4b07      	ldr	r3, [pc, #28]	; (800b81c <USBH_UserProcess+0x58>)
 800b7fe:	2202      	movs	r2, #2
 800b800:	701a      	strb	r2, [r3, #0]
  break;
 800b802:	e004      	b.n	800b80e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800b804:	4b05      	ldr	r3, [pc, #20]	; (800b81c <USBH_UserProcess+0x58>)
 800b806:	2201      	movs	r2, #1
 800b808:	701a      	strb	r2, [r3, #0]
  break;
 800b80a:	e000      	b.n	800b80e <USBH_UserProcess+0x4a>

  default:
  break;
 800b80c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800b80e:	bf00      	nop
 800b810:	370c      	adds	r7, #12
 800b812:	46bd      	mov	sp, r7
 800b814:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b818:	4770      	bx	lr
 800b81a:	bf00      	nop
 800b81c:	20008894 	.word	0x20008894

0800b820 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800b820:	b580      	push	{r7, lr}
 800b822:	b08a      	sub	sp, #40	; 0x28
 800b824:	af00      	add	r7, sp, #0
 800b826:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b828:	f107 0314 	add.w	r3, r7, #20
 800b82c:	2200      	movs	r2, #0
 800b82e:	601a      	str	r2, [r3, #0]
 800b830:	605a      	str	r2, [r3, #4]
 800b832:	609a      	str	r2, [r3, #8]
 800b834:	60da      	str	r2, [r3, #12]
 800b836:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	4a24      	ldr	r2, [pc, #144]	; (800b8d0 <HAL_HCD_MspInit+0xb0>)
 800b83e:	4293      	cmp	r3, r2
 800b840:	d141      	bne.n	800b8c6 <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b842:	2300      	movs	r3, #0
 800b844:	613b      	str	r3, [r7, #16]
 800b846:	4b23      	ldr	r3, [pc, #140]	; (800b8d4 <HAL_HCD_MspInit+0xb4>)
 800b848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b84a:	4a22      	ldr	r2, [pc, #136]	; (800b8d4 <HAL_HCD_MspInit+0xb4>)
 800b84c:	f043 0302 	orr.w	r3, r3, #2
 800b850:	6313      	str	r3, [r2, #48]	; 0x30
 800b852:	4b20      	ldr	r3, [pc, #128]	; (800b8d4 <HAL_HCD_MspInit+0xb4>)
 800b854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b856:	f003 0302 	and.w	r3, r3, #2
 800b85a:	613b      	str	r3, [r7, #16]
 800b85c:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 800b85e:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 800b862:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b864:	2302      	movs	r3, #2
 800b866:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b868:	2300      	movs	r3, #0
 800b86a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b86c:	2300      	movs	r3, #0
 800b86e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800b870:	230c      	movs	r3, #12
 800b872:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b874:	f107 0314 	add.w	r3, r7, #20
 800b878:	4619      	mov	r1, r3
 800b87a:	4817      	ldr	r0, [pc, #92]	; (800b8d8 <HAL_HCD_MspInit+0xb8>)
 800b87c:	f7f6 fa0e 	bl	8001c9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 800b880:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b884:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b886:	2300      	movs	r3, #0
 800b888:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b88a:	2300      	movs	r3, #0
 800b88c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 800b88e:	f107 0314 	add.w	r3, r7, #20
 800b892:	4619      	mov	r1, r3
 800b894:	4810      	ldr	r0, [pc, #64]	; (800b8d8 <HAL_HCD_MspInit+0xb8>)
 800b896:	f7f6 fa01 	bl	8001c9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800b89a:	2300      	movs	r3, #0
 800b89c:	60fb      	str	r3, [r7, #12]
 800b89e:	4b0d      	ldr	r3, [pc, #52]	; (800b8d4 <HAL_HCD_MspInit+0xb4>)
 800b8a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8a2:	4a0c      	ldr	r2, [pc, #48]	; (800b8d4 <HAL_HCD_MspInit+0xb4>)
 800b8a4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b8a8:	6313      	str	r3, [r2, #48]	; 0x30
 800b8aa:	4b0a      	ldr	r3, [pc, #40]	; (800b8d4 <HAL_HCD_MspInit+0xb4>)
 800b8ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b8b2:	60fb      	str	r3, [r7, #12]
 800b8b4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 800b8b6:	2200      	movs	r2, #0
 800b8b8:	2105      	movs	r1, #5
 800b8ba:	204d      	movs	r0, #77	; 0x4d
 800b8bc:	f7f5 ffbc 	bl	8001838 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800b8c0:	204d      	movs	r0, #77	; 0x4d
 800b8c2:	f7f5 ffd5 	bl	8001870 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800b8c6:	bf00      	nop
 800b8c8:	3728      	adds	r7, #40	; 0x28
 800b8ca:	46bd      	mov	sp, r7
 800b8cc:	bd80      	pop	{r7, pc}
 800b8ce:	bf00      	nop
 800b8d0:	40040000 	.word	0x40040000
 800b8d4:	40023800 	.word	0x40023800
 800b8d8:	40020400 	.word	0x40020400

0800b8dc <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800b8dc:	b580      	push	{r7, lr}
 800b8de:	b082      	sub	sp, #8
 800b8e0:	af00      	add	r7, sp, #0
 800b8e2:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b8ea:	4618      	mov	r0, r3
 800b8ec:	f7fc fddb 	bl	80084a6 <USBH_LL_IncTimer>
}
 800b8f0:	bf00      	nop
 800b8f2:	3708      	adds	r7, #8
 800b8f4:	46bd      	mov	sp, r7
 800b8f6:	bd80      	pop	{r7, pc}

0800b8f8 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b8f8:	b580      	push	{r7, lr}
 800b8fa:	b082      	sub	sp, #8
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b906:	4618      	mov	r0, r3
 800b908:	f7fc fe1f 	bl	800854a <USBH_LL_Connect>
}
 800b90c:	bf00      	nop
 800b90e:	3708      	adds	r7, #8
 800b910:	46bd      	mov	sp, r7
 800b912:	bd80      	pop	{r7, pc}

0800b914 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b914:	b580      	push	{r7, lr}
 800b916:	b082      	sub	sp, #8
 800b918:	af00      	add	r7, sp, #0
 800b91a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b922:	4618      	mov	r0, r3
 800b924:	f7fc fe34 	bl	8008590 <USBH_LL_Disconnect>
}
 800b928:	bf00      	nop
 800b92a:	3708      	adds	r7, #8
 800b92c:	46bd      	mov	sp, r7
 800b92e:	bd80      	pop	{r7, pc}

0800b930 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800b930:	b580      	push	{r7, lr}
 800b932:	b082      	sub	sp, #8
 800b934:	af00      	add	r7, sp, #0
 800b936:	6078      	str	r0, [r7, #4]
 800b938:	460b      	mov	r3, r1
 800b93a:	70fb      	strb	r3, [r7, #3]
 800b93c:	4613      	mov	r3, r2
 800b93e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b946:	4618      	mov	r0, r3
 800b948:	f7fc fe69 	bl	800861e <USBH_LL_NotifyURBChange>
#endif
}
 800b94c:	bf00      	nop
 800b94e:	3708      	adds	r7, #8
 800b950:	46bd      	mov	sp, r7
 800b952:	bd80      	pop	{r7, pc}

0800b954 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b954:	b580      	push	{r7, lr}
 800b956:	b082      	sub	sp, #8
 800b958:	af00      	add	r7, sp, #0
 800b95a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b962:	4618      	mov	r0, r3
 800b964:	f7fc fdc9 	bl	80084fa <USBH_LL_PortEnabled>
}
 800b968:	bf00      	nop
 800b96a:	3708      	adds	r7, #8
 800b96c:	46bd      	mov	sp, r7
 800b96e:	bd80      	pop	{r7, pc}

0800b970 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b970:	b580      	push	{r7, lr}
 800b972:	b082      	sub	sp, #8
 800b974:	af00      	add	r7, sp, #0
 800b976:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b97e:	4618      	mov	r0, r3
 800b980:	f7fc fdd5 	bl	800852e <USBH_LL_PortDisabled>
}
 800b984:	bf00      	nop
 800b986:	3708      	adds	r7, #8
 800b988:	46bd      	mov	sp, r7
 800b98a:	bd80      	pop	{r7, pc}

0800b98c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800b98c:	b580      	push	{r7, lr}
 800b98e:	b082      	sub	sp, #8
 800b990:	af00      	add	r7, sp, #0
 800b992:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d132      	bne.n	800ba04 <USBH_LL_Init+0x78>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 800b99e:	4a1c      	ldr	r2, [pc, #112]	; (800ba10 <USBH_LL_Init+0x84>)
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_HS;
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	4a19      	ldr	r2, [pc, #100]	; (800ba10 <USBH_LL_Init+0x84>)
 800b9aa:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800b9ae:	4b18      	ldr	r3, [pc, #96]	; (800ba10 <USBH_LL_Init+0x84>)
 800b9b0:	4a18      	ldr	r2, [pc, #96]	; (800ba14 <USBH_LL_Init+0x88>)
 800b9b2:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 800b9b4:	4b16      	ldr	r3, [pc, #88]	; (800ba10 <USBH_LL_Init+0x84>)
 800b9b6:	220c      	movs	r2, #12
 800b9b8:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 800b9ba:	4b15      	ldr	r3, [pc, #84]	; (800ba10 <USBH_LL_Init+0x84>)
 800b9bc:	2201      	movs	r2, #1
 800b9be:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800b9c0:	4b13      	ldr	r3, [pc, #76]	; (800ba10 <USBH_LL_Init+0x84>)
 800b9c2:	2200      	movs	r2, #0
 800b9c4:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800b9c6:	4b12      	ldr	r3, [pc, #72]	; (800ba10 <USBH_LL_Init+0x84>)
 800b9c8:	2202      	movs	r2, #2
 800b9ca:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800b9cc:	4b10      	ldr	r3, [pc, #64]	; (800ba10 <USBH_LL_Init+0x84>)
 800b9ce:	2200      	movs	r2, #0
 800b9d0:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800b9d2:	4b0f      	ldr	r3, [pc, #60]	; (800ba10 <USBH_LL_Init+0x84>)
 800b9d4:	2200      	movs	r2, #0
 800b9d6:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800b9d8:	4b0d      	ldr	r3, [pc, #52]	; (800ba10 <USBH_LL_Init+0x84>)
 800b9da:	2200      	movs	r2, #0
 800b9dc:	62da      	str	r2, [r3, #44]	; 0x2c
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800b9de:	4b0c      	ldr	r3, [pc, #48]	; (800ba10 <USBH_LL_Init+0x84>)
 800b9e0:	2200      	movs	r2, #0
 800b9e2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 800b9e4:	480a      	ldr	r0, [pc, #40]	; (800ba10 <USBH_LL_Init+0x84>)
 800b9e6:	f7f6 fb36 	bl	8002056 <HAL_HCD_Init>
 800b9ea:	4603      	mov	r3, r0
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d001      	beq.n	800b9f4 <USBH_LL_Init+0x68>
  {
    Error_Handler( );
 800b9f0:	f7f5 f974 	bl	8000cdc <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 800b9f4:	4806      	ldr	r0, [pc, #24]	; (800ba10 <USBH_LL_Init+0x84>)
 800b9f6:	f7f6 ff1a 	bl	800282e <HAL_HCD_GetCurrentFrame>
 800b9fa:	4603      	mov	r3, r0
 800b9fc:	4619      	mov	r1, r3
 800b9fe:	6878      	ldr	r0, [r7, #4]
 800ba00:	f7fc fd42 	bl	8008488 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800ba04:	2300      	movs	r3, #0
}
 800ba06:	4618      	mov	r0, r3
 800ba08:	3708      	adds	r7, #8
 800ba0a:	46bd      	mov	sp, r7
 800ba0c:	bd80      	pop	{r7, pc}
 800ba0e:	bf00      	nop
 800ba10:	20008898 	.word	0x20008898
 800ba14:	40040000 	.word	0x40040000

0800ba18 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800ba18:	b580      	push	{r7, lr}
 800ba1a:	b084      	sub	sp, #16
 800ba1c:	af00      	add	r7, sp, #0
 800ba1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba20:	2300      	movs	r3, #0
 800ba22:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ba24:	2300      	movs	r3, #0
 800ba26:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ba2e:	4618      	mov	r0, r3
 800ba30:	f7f6 fe87 	bl	8002742 <HAL_HCD_Start>
 800ba34:	4603      	mov	r3, r0
 800ba36:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ba38:	7bfb      	ldrb	r3, [r7, #15]
 800ba3a:	4618      	mov	r0, r3
 800ba3c:	f000 f95c 	bl	800bcf8 <USBH_Get_USB_Status>
 800ba40:	4603      	mov	r3, r0
 800ba42:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ba44:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba46:	4618      	mov	r0, r3
 800ba48:	3710      	adds	r7, #16
 800ba4a:	46bd      	mov	sp, r7
 800ba4c:	bd80      	pop	{r7, pc}

0800ba4e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800ba4e:	b580      	push	{r7, lr}
 800ba50:	b084      	sub	sp, #16
 800ba52:	af00      	add	r7, sp, #0
 800ba54:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba56:	2300      	movs	r3, #0
 800ba58:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ba5a:	2300      	movs	r3, #0
 800ba5c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ba64:	4618      	mov	r0, r3
 800ba66:	f7f6 fe8f 	bl	8002788 <HAL_HCD_Stop>
 800ba6a:	4603      	mov	r3, r0
 800ba6c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ba6e:	7bfb      	ldrb	r3, [r7, #15]
 800ba70:	4618      	mov	r0, r3
 800ba72:	f000 f941 	bl	800bcf8 <USBH_Get_USB_Status>
 800ba76:	4603      	mov	r3, r0
 800ba78:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ba7a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba7c:	4618      	mov	r0, r3
 800ba7e:	3710      	adds	r7, #16
 800ba80:	46bd      	mov	sp, r7
 800ba82:	bd80      	pop	{r7, pc}

0800ba84 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800ba84:	b580      	push	{r7, lr}
 800ba86:	b084      	sub	sp, #16
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800ba8c:	2301      	movs	r3, #1
 800ba8e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ba96:	4618      	mov	r0, r3
 800ba98:	f7f6 fed7 	bl	800284a <HAL_HCD_GetCurrentSpeed>
 800ba9c:	4603      	mov	r3, r0
 800ba9e:	2b02      	cmp	r3, #2
 800baa0:	d00c      	beq.n	800babc <USBH_LL_GetSpeed+0x38>
 800baa2:	2b02      	cmp	r3, #2
 800baa4:	d80d      	bhi.n	800bac2 <USBH_LL_GetSpeed+0x3e>
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d002      	beq.n	800bab0 <USBH_LL_GetSpeed+0x2c>
 800baaa:	2b01      	cmp	r3, #1
 800baac:	d003      	beq.n	800bab6 <USBH_LL_GetSpeed+0x32>
 800baae:	e008      	b.n	800bac2 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800bab0:	2300      	movs	r3, #0
 800bab2:	73fb      	strb	r3, [r7, #15]
    break;
 800bab4:	e008      	b.n	800bac8 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800bab6:	2301      	movs	r3, #1
 800bab8:	73fb      	strb	r3, [r7, #15]
    break;
 800baba:	e005      	b.n	800bac8 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800babc:	2302      	movs	r3, #2
 800babe:	73fb      	strb	r3, [r7, #15]
    break;
 800bac0:	e002      	b.n	800bac8 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800bac2:	2301      	movs	r3, #1
 800bac4:	73fb      	strb	r3, [r7, #15]
    break;
 800bac6:	bf00      	nop
  }
  return  speed;
 800bac8:	7bfb      	ldrb	r3, [r7, #15]
}
 800baca:	4618      	mov	r0, r3
 800bacc:	3710      	adds	r7, #16
 800bace:	46bd      	mov	sp, r7
 800bad0:	bd80      	pop	{r7, pc}

0800bad2 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800bad2:	b580      	push	{r7, lr}
 800bad4:	b084      	sub	sp, #16
 800bad6:	af00      	add	r7, sp, #0
 800bad8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bada:	2300      	movs	r3, #0
 800badc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bade:	2300      	movs	r3, #0
 800bae0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bae8:	4618      	mov	r0, r3
 800baea:	f7f6 fe6a 	bl	80027c2 <HAL_HCD_ResetPort>
 800baee:	4603      	mov	r3, r0
 800baf0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800baf2:	7bfb      	ldrb	r3, [r7, #15]
 800baf4:	4618      	mov	r0, r3
 800baf6:	f000 f8ff 	bl	800bcf8 <USBH_Get_USB_Status>
 800bafa:	4603      	mov	r3, r0
 800bafc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bafe:	7bbb      	ldrb	r3, [r7, #14]
}
 800bb00:	4618      	mov	r0, r3
 800bb02:	3710      	adds	r7, #16
 800bb04:	46bd      	mov	sp, r7
 800bb06:	bd80      	pop	{r7, pc}

0800bb08 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800bb08:	b580      	push	{r7, lr}
 800bb0a:	b082      	sub	sp, #8
 800bb0c:	af00      	add	r7, sp, #0
 800bb0e:	6078      	str	r0, [r7, #4]
 800bb10:	460b      	mov	r3, r1
 800bb12:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bb1a:	78fa      	ldrb	r2, [r7, #3]
 800bb1c:	4611      	mov	r1, r2
 800bb1e:	4618      	mov	r0, r3
 800bb20:	f7f6 fe71 	bl	8002806 <HAL_HCD_HC_GetXferCount>
 800bb24:	4603      	mov	r3, r0
}
 800bb26:	4618      	mov	r0, r3
 800bb28:	3708      	adds	r7, #8
 800bb2a:	46bd      	mov	sp, r7
 800bb2c:	bd80      	pop	{r7, pc}

0800bb2e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800bb2e:	b590      	push	{r4, r7, lr}
 800bb30:	b089      	sub	sp, #36	; 0x24
 800bb32:	af04      	add	r7, sp, #16
 800bb34:	6078      	str	r0, [r7, #4]
 800bb36:	4608      	mov	r0, r1
 800bb38:	4611      	mov	r1, r2
 800bb3a:	461a      	mov	r2, r3
 800bb3c:	4603      	mov	r3, r0
 800bb3e:	70fb      	strb	r3, [r7, #3]
 800bb40:	460b      	mov	r3, r1
 800bb42:	70bb      	strb	r3, [r7, #2]
 800bb44:	4613      	mov	r3, r2
 800bb46:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb48:	2300      	movs	r3, #0
 800bb4a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bb4c:	2300      	movs	r3, #0
 800bb4e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800bb56:	787c      	ldrb	r4, [r7, #1]
 800bb58:	78ba      	ldrb	r2, [r7, #2]
 800bb5a:	78f9      	ldrb	r1, [r7, #3]
 800bb5c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800bb5e:	9302      	str	r3, [sp, #8]
 800bb60:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800bb64:	9301      	str	r3, [sp, #4]
 800bb66:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bb6a:	9300      	str	r3, [sp, #0]
 800bb6c:	4623      	mov	r3, r4
 800bb6e:	f7f6 fad4 	bl	800211a <HAL_HCD_HC_Init>
 800bb72:	4603      	mov	r3, r0
 800bb74:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800bb76:	7bfb      	ldrb	r3, [r7, #15]
 800bb78:	4618      	mov	r0, r3
 800bb7a:	f000 f8bd 	bl	800bcf8 <USBH_Get_USB_Status>
 800bb7e:	4603      	mov	r3, r0
 800bb80:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bb82:	7bbb      	ldrb	r3, [r7, #14]
}
 800bb84:	4618      	mov	r0, r3
 800bb86:	3714      	adds	r7, #20
 800bb88:	46bd      	mov	sp, r7
 800bb8a:	bd90      	pop	{r4, r7, pc}

0800bb8c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800bb8c:	b580      	push	{r7, lr}
 800bb8e:	b084      	sub	sp, #16
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	6078      	str	r0, [r7, #4]
 800bb94:	460b      	mov	r3, r1
 800bb96:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb98:	2300      	movs	r3, #0
 800bb9a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bb9c:	2300      	movs	r3, #0
 800bb9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bba6:	78fa      	ldrb	r2, [r7, #3]
 800bba8:	4611      	mov	r1, r2
 800bbaa:	4618      	mov	r0, r3
 800bbac:	f7f6 fb44 	bl	8002238 <HAL_HCD_HC_Halt>
 800bbb0:	4603      	mov	r3, r0
 800bbb2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800bbb4:	7bfb      	ldrb	r3, [r7, #15]
 800bbb6:	4618      	mov	r0, r3
 800bbb8:	f000 f89e 	bl	800bcf8 <USBH_Get_USB_Status>
 800bbbc:	4603      	mov	r3, r0
 800bbbe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bbc0:	7bbb      	ldrb	r3, [r7, #14]
}
 800bbc2:	4618      	mov	r0, r3
 800bbc4:	3710      	adds	r7, #16
 800bbc6:	46bd      	mov	sp, r7
 800bbc8:	bd80      	pop	{r7, pc}

0800bbca <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800bbca:	b590      	push	{r4, r7, lr}
 800bbcc:	b089      	sub	sp, #36	; 0x24
 800bbce:	af04      	add	r7, sp, #16
 800bbd0:	6078      	str	r0, [r7, #4]
 800bbd2:	4608      	mov	r0, r1
 800bbd4:	4611      	mov	r1, r2
 800bbd6:	461a      	mov	r2, r3
 800bbd8:	4603      	mov	r3, r0
 800bbda:	70fb      	strb	r3, [r7, #3]
 800bbdc:	460b      	mov	r3, r1
 800bbde:	70bb      	strb	r3, [r7, #2]
 800bbe0:	4613      	mov	r3, r2
 800bbe2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bbe4:	2300      	movs	r3, #0
 800bbe6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bbe8:	2300      	movs	r3, #0
 800bbea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800bbf2:	787c      	ldrb	r4, [r7, #1]
 800bbf4:	78ba      	ldrb	r2, [r7, #2]
 800bbf6:	78f9      	ldrb	r1, [r7, #3]
 800bbf8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800bbfc:	9303      	str	r3, [sp, #12]
 800bbfe:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800bc00:	9302      	str	r3, [sp, #8]
 800bc02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc04:	9301      	str	r3, [sp, #4]
 800bc06:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bc0a:	9300      	str	r3, [sp, #0]
 800bc0c:	4623      	mov	r3, r4
 800bc0e:	f7f6 fb37 	bl	8002280 <HAL_HCD_HC_SubmitRequest>
 800bc12:	4603      	mov	r3, r0
 800bc14:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800bc16:	7bfb      	ldrb	r3, [r7, #15]
 800bc18:	4618      	mov	r0, r3
 800bc1a:	f000 f86d 	bl	800bcf8 <USBH_Get_USB_Status>
 800bc1e:	4603      	mov	r3, r0
 800bc20:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bc22:	7bbb      	ldrb	r3, [r7, #14]
}
 800bc24:	4618      	mov	r0, r3
 800bc26:	3714      	adds	r7, #20
 800bc28:	46bd      	mov	sp, r7
 800bc2a:	bd90      	pop	{r4, r7, pc}

0800bc2c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800bc2c:	b580      	push	{r7, lr}
 800bc2e:	b082      	sub	sp, #8
 800bc30:	af00      	add	r7, sp, #0
 800bc32:	6078      	str	r0, [r7, #4]
 800bc34:	460b      	mov	r3, r1
 800bc36:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bc3e:	78fa      	ldrb	r2, [r7, #3]
 800bc40:	4611      	mov	r1, r2
 800bc42:	4618      	mov	r0, r3
 800bc44:	f7f6 fdcb 	bl	80027de <HAL_HCD_HC_GetURBState>
 800bc48:	4603      	mov	r3, r0
}
 800bc4a:	4618      	mov	r0, r3
 800bc4c:	3708      	adds	r7, #8
 800bc4e:	46bd      	mov	sp, r7
 800bc50:	bd80      	pop	{r7, pc}

0800bc52 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800bc52:	b580      	push	{r7, lr}
 800bc54:	b082      	sub	sp, #8
 800bc56:	af00      	add	r7, sp, #0
 800bc58:	6078      	str	r0, [r7, #4]
 800bc5a:	460b      	mov	r3, r1
 800bc5c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_HS) {
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d103      	bne.n	800bc70 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusHS(state);
 800bc68:	78fb      	ldrb	r3, [r7, #3]
 800bc6a:	4618      	mov	r0, r3
 800bc6c:	f000 f870 	bl	800bd50 <MX_DriverVbusHS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800bc70:	20c8      	movs	r0, #200	; 0xc8
 800bc72:	f7f5 fd05 	bl	8001680 <HAL_Delay>
  return USBH_OK;
 800bc76:	2300      	movs	r3, #0
}
 800bc78:	4618      	mov	r0, r3
 800bc7a:	3708      	adds	r7, #8
 800bc7c:	46bd      	mov	sp, r7
 800bc7e:	bd80      	pop	{r7, pc}

0800bc80 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800bc80:	b480      	push	{r7}
 800bc82:	b085      	sub	sp, #20
 800bc84:	af00      	add	r7, sp, #0
 800bc86:	6078      	str	r0, [r7, #4]
 800bc88:	460b      	mov	r3, r1
 800bc8a:	70fb      	strb	r3, [r7, #3]
 800bc8c:	4613      	mov	r3, r2
 800bc8e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bc96:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800bc98:	78fb      	ldrb	r3, [r7, #3]
 800bc9a:	68fa      	ldr	r2, [r7, #12]
 800bc9c:	212c      	movs	r1, #44	; 0x2c
 800bc9e:	fb01 f303 	mul.w	r3, r1, r3
 800bca2:	4413      	add	r3, r2
 800bca4:	333b      	adds	r3, #59	; 0x3b
 800bca6:	781b      	ldrb	r3, [r3, #0]
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d009      	beq.n	800bcc0 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800bcac:	78fb      	ldrb	r3, [r7, #3]
 800bcae:	68fa      	ldr	r2, [r7, #12]
 800bcb0:	212c      	movs	r1, #44	; 0x2c
 800bcb2:	fb01 f303 	mul.w	r3, r1, r3
 800bcb6:	4413      	add	r3, r2
 800bcb8:	3354      	adds	r3, #84	; 0x54
 800bcba:	78ba      	ldrb	r2, [r7, #2]
 800bcbc:	701a      	strb	r2, [r3, #0]
 800bcbe:	e008      	b.n	800bcd2 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800bcc0:	78fb      	ldrb	r3, [r7, #3]
 800bcc2:	68fa      	ldr	r2, [r7, #12]
 800bcc4:	212c      	movs	r1, #44	; 0x2c
 800bcc6:	fb01 f303 	mul.w	r3, r1, r3
 800bcca:	4413      	add	r3, r2
 800bccc:	3355      	adds	r3, #85	; 0x55
 800bcce:	78ba      	ldrb	r2, [r7, #2]
 800bcd0:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800bcd2:	2300      	movs	r3, #0
}
 800bcd4:	4618      	mov	r0, r3
 800bcd6:	3714      	adds	r7, #20
 800bcd8:	46bd      	mov	sp, r7
 800bcda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcde:	4770      	bx	lr

0800bce0 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800bce0:	b580      	push	{r7, lr}
 800bce2:	b082      	sub	sp, #8
 800bce4:	af00      	add	r7, sp, #0
 800bce6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800bce8:	6878      	ldr	r0, [r7, #4]
 800bcea:	f7f5 fcc9 	bl	8001680 <HAL_Delay>
}
 800bcee:	bf00      	nop
 800bcf0:	3708      	adds	r7, #8
 800bcf2:	46bd      	mov	sp, r7
 800bcf4:	bd80      	pop	{r7, pc}
	...

0800bcf8 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bcf8:	b480      	push	{r7}
 800bcfa:	b085      	sub	sp, #20
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	4603      	mov	r3, r0
 800bd00:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bd02:	2300      	movs	r3, #0
 800bd04:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bd06:	79fb      	ldrb	r3, [r7, #7]
 800bd08:	2b03      	cmp	r3, #3
 800bd0a:	d817      	bhi.n	800bd3c <USBH_Get_USB_Status+0x44>
 800bd0c:	a201      	add	r2, pc, #4	; (adr r2, 800bd14 <USBH_Get_USB_Status+0x1c>)
 800bd0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd12:	bf00      	nop
 800bd14:	0800bd25 	.word	0x0800bd25
 800bd18:	0800bd2b 	.word	0x0800bd2b
 800bd1c:	0800bd31 	.word	0x0800bd31
 800bd20:	0800bd37 	.word	0x0800bd37
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800bd24:	2300      	movs	r3, #0
 800bd26:	73fb      	strb	r3, [r7, #15]
    break;
 800bd28:	e00b      	b.n	800bd42 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800bd2a:	2302      	movs	r3, #2
 800bd2c:	73fb      	strb	r3, [r7, #15]
    break;
 800bd2e:	e008      	b.n	800bd42 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800bd30:	2301      	movs	r3, #1
 800bd32:	73fb      	strb	r3, [r7, #15]
    break;
 800bd34:	e005      	b.n	800bd42 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800bd36:	2302      	movs	r3, #2
 800bd38:	73fb      	strb	r3, [r7, #15]
    break;
 800bd3a:	e002      	b.n	800bd42 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800bd3c:	2302      	movs	r3, #2
 800bd3e:	73fb      	strb	r3, [r7, #15]
    break;
 800bd40:	bf00      	nop
  }
  return usb_status;
 800bd42:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd44:	4618      	mov	r0, r3
 800bd46:	3714      	adds	r7, #20
 800bd48:	46bd      	mov	sp, r7
 800bd4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd4e:	4770      	bx	lr

0800bd50 <MX_DriverVbusHS>:
  *          This parameter can be one of the these values:
  *          - 1 : VBUS Active
  *          - 0 : VBUS Inactive
  */
void MX_DriverVbusHS(uint8_t state)
{
 800bd50:	b580      	push	{r7, lr}
 800bd52:	b084      	sub	sp, #16
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	4603      	mov	r3, r0
 800bd58:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800bd5a:	79fb      	ldrb	r3, [r7, #7]
 800bd5c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_HS */
  if(state == 0)
 800bd5e:	79fb      	ldrb	r3, [r7, #7]
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d102      	bne.n	800bd6a <MX_DriverVbusHS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800bd64:	2301      	movs	r3, #1
 800bd66:	73fb      	strb	r3, [r7, #15]
 800bd68:	e001      	b.n	800bd6e <MX_DriverVbusHS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800bd6a:	2300      	movs	r3, #0
 800bd6c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_HS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,(GPIO_PinState)data);
 800bd6e:	7bfb      	ldrb	r3, [r7, #15]
 800bd70:	461a      	mov	r2, r3
 800bd72:	2110      	movs	r1, #16
 800bd74:	4803      	ldr	r0, [pc, #12]	; (800bd84 <MX_DriverVbusHS+0x34>)
 800bd76:	f7f6 f955 	bl	8002024 <HAL_GPIO_WritePin>
}
 800bd7a:	bf00      	nop
 800bd7c:	3710      	adds	r7, #16
 800bd7e:	46bd      	mov	sp, r7
 800bd80:	bd80      	pop	{r7, pc}
 800bd82:	bf00      	nop
 800bd84:	40020800 	.word	0x40020800

0800bd88 <__errno>:
 800bd88:	4b01      	ldr	r3, [pc, #4]	; (800bd90 <__errno+0x8>)
 800bd8a:	6818      	ldr	r0, [r3, #0]
 800bd8c:	4770      	bx	lr
 800bd8e:	bf00      	nop
 800bd90:	20000030 	.word	0x20000030

0800bd94 <__libc_init_array>:
 800bd94:	b570      	push	{r4, r5, r6, lr}
 800bd96:	4d0d      	ldr	r5, [pc, #52]	; (800bdcc <__libc_init_array+0x38>)
 800bd98:	4c0d      	ldr	r4, [pc, #52]	; (800bdd0 <__libc_init_array+0x3c>)
 800bd9a:	1b64      	subs	r4, r4, r5
 800bd9c:	10a4      	asrs	r4, r4, #2
 800bd9e:	2600      	movs	r6, #0
 800bda0:	42a6      	cmp	r6, r4
 800bda2:	d109      	bne.n	800bdb8 <__libc_init_array+0x24>
 800bda4:	4d0b      	ldr	r5, [pc, #44]	; (800bdd4 <__libc_init_array+0x40>)
 800bda6:	4c0c      	ldr	r4, [pc, #48]	; (800bdd8 <__libc_init_array+0x44>)
 800bda8:	f000 f93c 	bl	800c024 <_init>
 800bdac:	1b64      	subs	r4, r4, r5
 800bdae:	10a4      	asrs	r4, r4, #2
 800bdb0:	2600      	movs	r6, #0
 800bdb2:	42a6      	cmp	r6, r4
 800bdb4:	d105      	bne.n	800bdc2 <__libc_init_array+0x2e>
 800bdb6:	bd70      	pop	{r4, r5, r6, pc}
 800bdb8:	f855 3b04 	ldr.w	r3, [r5], #4
 800bdbc:	4798      	blx	r3
 800bdbe:	3601      	adds	r6, #1
 800bdc0:	e7ee      	b.n	800bda0 <__libc_init_array+0xc>
 800bdc2:	f855 3b04 	ldr.w	r3, [r5], #4
 800bdc6:	4798      	blx	r3
 800bdc8:	3601      	adds	r6, #1
 800bdca:	e7f2      	b.n	800bdb2 <__libc_init_array+0x1e>
 800bdcc:	0800c0c0 	.word	0x0800c0c0
 800bdd0:	0800c0c0 	.word	0x0800c0c0
 800bdd4:	0800c0c0 	.word	0x0800c0c0
 800bdd8:	0800c0c4 	.word	0x0800c0c4

0800bddc <malloc>:
 800bddc:	4b02      	ldr	r3, [pc, #8]	; (800bde8 <malloc+0xc>)
 800bdde:	4601      	mov	r1, r0
 800bde0:	6818      	ldr	r0, [r3, #0]
 800bde2:	f000 b88d 	b.w	800bf00 <_malloc_r>
 800bde6:	bf00      	nop
 800bde8:	20000030 	.word	0x20000030

0800bdec <free>:
 800bdec:	4b02      	ldr	r3, [pc, #8]	; (800bdf8 <free+0xc>)
 800bdee:	4601      	mov	r1, r0
 800bdf0:	6818      	ldr	r0, [r3, #0]
 800bdf2:	f000 b819 	b.w	800be28 <_free_r>
 800bdf6:	bf00      	nop
 800bdf8:	20000030 	.word	0x20000030

0800bdfc <memcpy>:
 800bdfc:	440a      	add	r2, r1
 800bdfe:	4291      	cmp	r1, r2
 800be00:	f100 33ff 	add.w	r3, r0, #4294967295
 800be04:	d100      	bne.n	800be08 <memcpy+0xc>
 800be06:	4770      	bx	lr
 800be08:	b510      	push	{r4, lr}
 800be0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800be0e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800be12:	4291      	cmp	r1, r2
 800be14:	d1f9      	bne.n	800be0a <memcpy+0xe>
 800be16:	bd10      	pop	{r4, pc}

0800be18 <memset>:
 800be18:	4402      	add	r2, r0
 800be1a:	4603      	mov	r3, r0
 800be1c:	4293      	cmp	r3, r2
 800be1e:	d100      	bne.n	800be22 <memset+0xa>
 800be20:	4770      	bx	lr
 800be22:	f803 1b01 	strb.w	r1, [r3], #1
 800be26:	e7f9      	b.n	800be1c <memset+0x4>

0800be28 <_free_r>:
 800be28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800be2a:	2900      	cmp	r1, #0
 800be2c:	d044      	beq.n	800beb8 <_free_r+0x90>
 800be2e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800be32:	9001      	str	r0, [sp, #4]
 800be34:	2b00      	cmp	r3, #0
 800be36:	f1a1 0404 	sub.w	r4, r1, #4
 800be3a:	bfb8      	it	lt
 800be3c:	18e4      	addlt	r4, r4, r3
 800be3e:	f000 f8e3 	bl	800c008 <__malloc_lock>
 800be42:	4a1e      	ldr	r2, [pc, #120]	; (800bebc <_free_r+0x94>)
 800be44:	9801      	ldr	r0, [sp, #4]
 800be46:	6813      	ldr	r3, [r2, #0]
 800be48:	b933      	cbnz	r3, 800be58 <_free_r+0x30>
 800be4a:	6063      	str	r3, [r4, #4]
 800be4c:	6014      	str	r4, [r2, #0]
 800be4e:	b003      	add	sp, #12
 800be50:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800be54:	f000 b8de 	b.w	800c014 <__malloc_unlock>
 800be58:	42a3      	cmp	r3, r4
 800be5a:	d908      	bls.n	800be6e <_free_r+0x46>
 800be5c:	6825      	ldr	r5, [r4, #0]
 800be5e:	1961      	adds	r1, r4, r5
 800be60:	428b      	cmp	r3, r1
 800be62:	bf01      	itttt	eq
 800be64:	6819      	ldreq	r1, [r3, #0]
 800be66:	685b      	ldreq	r3, [r3, #4]
 800be68:	1949      	addeq	r1, r1, r5
 800be6a:	6021      	streq	r1, [r4, #0]
 800be6c:	e7ed      	b.n	800be4a <_free_r+0x22>
 800be6e:	461a      	mov	r2, r3
 800be70:	685b      	ldr	r3, [r3, #4]
 800be72:	b10b      	cbz	r3, 800be78 <_free_r+0x50>
 800be74:	42a3      	cmp	r3, r4
 800be76:	d9fa      	bls.n	800be6e <_free_r+0x46>
 800be78:	6811      	ldr	r1, [r2, #0]
 800be7a:	1855      	adds	r5, r2, r1
 800be7c:	42a5      	cmp	r5, r4
 800be7e:	d10b      	bne.n	800be98 <_free_r+0x70>
 800be80:	6824      	ldr	r4, [r4, #0]
 800be82:	4421      	add	r1, r4
 800be84:	1854      	adds	r4, r2, r1
 800be86:	42a3      	cmp	r3, r4
 800be88:	6011      	str	r1, [r2, #0]
 800be8a:	d1e0      	bne.n	800be4e <_free_r+0x26>
 800be8c:	681c      	ldr	r4, [r3, #0]
 800be8e:	685b      	ldr	r3, [r3, #4]
 800be90:	6053      	str	r3, [r2, #4]
 800be92:	4421      	add	r1, r4
 800be94:	6011      	str	r1, [r2, #0]
 800be96:	e7da      	b.n	800be4e <_free_r+0x26>
 800be98:	d902      	bls.n	800bea0 <_free_r+0x78>
 800be9a:	230c      	movs	r3, #12
 800be9c:	6003      	str	r3, [r0, #0]
 800be9e:	e7d6      	b.n	800be4e <_free_r+0x26>
 800bea0:	6825      	ldr	r5, [r4, #0]
 800bea2:	1961      	adds	r1, r4, r5
 800bea4:	428b      	cmp	r3, r1
 800bea6:	bf04      	itt	eq
 800bea8:	6819      	ldreq	r1, [r3, #0]
 800beaa:	685b      	ldreq	r3, [r3, #4]
 800beac:	6063      	str	r3, [r4, #4]
 800beae:	bf04      	itt	eq
 800beb0:	1949      	addeq	r1, r1, r5
 800beb2:	6021      	streq	r1, [r4, #0]
 800beb4:	6054      	str	r4, [r2, #4]
 800beb6:	e7ca      	b.n	800be4e <_free_r+0x26>
 800beb8:	b003      	add	sp, #12
 800beba:	bd30      	pop	{r4, r5, pc}
 800bebc:	20008b9c 	.word	0x20008b9c

0800bec0 <sbrk_aligned>:
 800bec0:	b570      	push	{r4, r5, r6, lr}
 800bec2:	4e0e      	ldr	r6, [pc, #56]	; (800befc <sbrk_aligned+0x3c>)
 800bec4:	460c      	mov	r4, r1
 800bec6:	6831      	ldr	r1, [r6, #0]
 800bec8:	4605      	mov	r5, r0
 800beca:	b911      	cbnz	r1, 800bed2 <sbrk_aligned+0x12>
 800becc:	f000 f88c 	bl	800bfe8 <_sbrk_r>
 800bed0:	6030      	str	r0, [r6, #0]
 800bed2:	4621      	mov	r1, r4
 800bed4:	4628      	mov	r0, r5
 800bed6:	f000 f887 	bl	800bfe8 <_sbrk_r>
 800beda:	1c43      	adds	r3, r0, #1
 800bedc:	d00a      	beq.n	800bef4 <sbrk_aligned+0x34>
 800bede:	1cc4      	adds	r4, r0, #3
 800bee0:	f024 0403 	bic.w	r4, r4, #3
 800bee4:	42a0      	cmp	r0, r4
 800bee6:	d007      	beq.n	800bef8 <sbrk_aligned+0x38>
 800bee8:	1a21      	subs	r1, r4, r0
 800beea:	4628      	mov	r0, r5
 800beec:	f000 f87c 	bl	800bfe8 <_sbrk_r>
 800bef0:	3001      	adds	r0, #1
 800bef2:	d101      	bne.n	800bef8 <sbrk_aligned+0x38>
 800bef4:	f04f 34ff 	mov.w	r4, #4294967295
 800bef8:	4620      	mov	r0, r4
 800befa:	bd70      	pop	{r4, r5, r6, pc}
 800befc:	20008ba0 	.word	0x20008ba0

0800bf00 <_malloc_r>:
 800bf00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf04:	1ccd      	adds	r5, r1, #3
 800bf06:	f025 0503 	bic.w	r5, r5, #3
 800bf0a:	3508      	adds	r5, #8
 800bf0c:	2d0c      	cmp	r5, #12
 800bf0e:	bf38      	it	cc
 800bf10:	250c      	movcc	r5, #12
 800bf12:	2d00      	cmp	r5, #0
 800bf14:	4607      	mov	r7, r0
 800bf16:	db01      	blt.n	800bf1c <_malloc_r+0x1c>
 800bf18:	42a9      	cmp	r1, r5
 800bf1a:	d905      	bls.n	800bf28 <_malloc_r+0x28>
 800bf1c:	230c      	movs	r3, #12
 800bf1e:	603b      	str	r3, [r7, #0]
 800bf20:	2600      	movs	r6, #0
 800bf22:	4630      	mov	r0, r6
 800bf24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf28:	4e2e      	ldr	r6, [pc, #184]	; (800bfe4 <_malloc_r+0xe4>)
 800bf2a:	f000 f86d 	bl	800c008 <__malloc_lock>
 800bf2e:	6833      	ldr	r3, [r6, #0]
 800bf30:	461c      	mov	r4, r3
 800bf32:	bb34      	cbnz	r4, 800bf82 <_malloc_r+0x82>
 800bf34:	4629      	mov	r1, r5
 800bf36:	4638      	mov	r0, r7
 800bf38:	f7ff ffc2 	bl	800bec0 <sbrk_aligned>
 800bf3c:	1c43      	adds	r3, r0, #1
 800bf3e:	4604      	mov	r4, r0
 800bf40:	d14d      	bne.n	800bfde <_malloc_r+0xde>
 800bf42:	6834      	ldr	r4, [r6, #0]
 800bf44:	4626      	mov	r6, r4
 800bf46:	2e00      	cmp	r6, #0
 800bf48:	d140      	bne.n	800bfcc <_malloc_r+0xcc>
 800bf4a:	6823      	ldr	r3, [r4, #0]
 800bf4c:	4631      	mov	r1, r6
 800bf4e:	4638      	mov	r0, r7
 800bf50:	eb04 0803 	add.w	r8, r4, r3
 800bf54:	f000 f848 	bl	800bfe8 <_sbrk_r>
 800bf58:	4580      	cmp	r8, r0
 800bf5a:	d13a      	bne.n	800bfd2 <_malloc_r+0xd2>
 800bf5c:	6821      	ldr	r1, [r4, #0]
 800bf5e:	3503      	adds	r5, #3
 800bf60:	1a6d      	subs	r5, r5, r1
 800bf62:	f025 0503 	bic.w	r5, r5, #3
 800bf66:	3508      	adds	r5, #8
 800bf68:	2d0c      	cmp	r5, #12
 800bf6a:	bf38      	it	cc
 800bf6c:	250c      	movcc	r5, #12
 800bf6e:	4629      	mov	r1, r5
 800bf70:	4638      	mov	r0, r7
 800bf72:	f7ff ffa5 	bl	800bec0 <sbrk_aligned>
 800bf76:	3001      	adds	r0, #1
 800bf78:	d02b      	beq.n	800bfd2 <_malloc_r+0xd2>
 800bf7a:	6823      	ldr	r3, [r4, #0]
 800bf7c:	442b      	add	r3, r5
 800bf7e:	6023      	str	r3, [r4, #0]
 800bf80:	e00e      	b.n	800bfa0 <_malloc_r+0xa0>
 800bf82:	6822      	ldr	r2, [r4, #0]
 800bf84:	1b52      	subs	r2, r2, r5
 800bf86:	d41e      	bmi.n	800bfc6 <_malloc_r+0xc6>
 800bf88:	2a0b      	cmp	r2, #11
 800bf8a:	d916      	bls.n	800bfba <_malloc_r+0xba>
 800bf8c:	1961      	adds	r1, r4, r5
 800bf8e:	42a3      	cmp	r3, r4
 800bf90:	6025      	str	r5, [r4, #0]
 800bf92:	bf18      	it	ne
 800bf94:	6059      	strne	r1, [r3, #4]
 800bf96:	6863      	ldr	r3, [r4, #4]
 800bf98:	bf08      	it	eq
 800bf9a:	6031      	streq	r1, [r6, #0]
 800bf9c:	5162      	str	r2, [r4, r5]
 800bf9e:	604b      	str	r3, [r1, #4]
 800bfa0:	4638      	mov	r0, r7
 800bfa2:	f104 060b 	add.w	r6, r4, #11
 800bfa6:	f000 f835 	bl	800c014 <__malloc_unlock>
 800bfaa:	f026 0607 	bic.w	r6, r6, #7
 800bfae:	1d23      	adds	r3, r4, #4
 800bfb0:	1af2      	subs	r2, r6, r3
 800bfb2:	d0b6      	beq.n	800bf22 <_malloc_r+0x22>
 800bfb4:	1b9b      	subs	r3, r3, r6
 800bfb6:	50a3      	str	r3, [r4, r2]
 800bfb8:	e7b3      	b.n	800bf22 <_malloc_r+0x22>
 800bfba:	6862      	ldr	r2, [r4, #4]
 800bfbc:	42a3      	cmp	r3, r4
 800bfbe:	bf0c      	ite	eq
 800bfc0:	6032      	streq	r2, [r6, #0]
 800bfc2:	605a      	strne	r2, [r3, #4]
 800bfc4:	e7ec      	b.n	800bfa0 <_malloc_r+0xa0>
 800bfc6:	4623      	mov	r3, r4
 800bfc8:	6864      	ldr	r4, [r4, #4]
 800bfca:	e7b2      	b.n	800bf32 <_malloc_r+0x32>
 800bfcc:	4634      	mov	r4, r6
 800bfce:	6876      	ldr	r6, [r6, #4]
 800bfd0:	e7b9      	b.n	800bf46 <_malloc_r+0x46>
 800bfd2:	230c      	movs	r3, #12
 800bfd4:	603b      	str	r3, [r7, #0]
 800bfd6:	4638      	mov	r0, r7
 800bfd8:	f000 f81c 	bl	800c014 <__malloc_unlock>
 800bfdc:	e7a1      	b.n	800bf22 <_malloc_r+0x22>
 800bfde:	6025      	str	r5, [r4, #0]
 800bfe0:	e7de      	b.n	800bfa0 <_malloc_r+0xa0>
 800bfe2:	bf00      	nop
 800bfe4:	20008b9c 	.word	0x20008b9c

0800bfe8 <_sbrk_r>:
 800bfe8:	b538      	push	{r3, r4, r5, lr}
 800bfea:	4d06      	ldr	r5, [pc, #24]	; (800c004 <_sbrk_r+0x1c>)
 800bfec:	2300      	movs	r3, #0
 800bfee:	4604      	mov	r4, r0
 800bff0:	4608      	mov	r0, r1
 800bff2:	602b      	str	r3, [r5, #0]
 800bff4:	f7f5 fa90 	bl	8001518 <_sbrk>
 800bff8:	1c43      	adds	r3, r0, #1
 800bffa:	d102      	bne.n	800c002 <_sbrk_r+0x1a>
 800bffc:	682b      	ldr	r3, [r5, #0]
 800bffe:	b103      	cbz	r3, 800c002 <_sbrk_r+0x1a>
 800c000:	6023      	str	r3, [r4, #0]
 800c002:	bd38      	pop	{r3, r4, r5, pc}
 800c004:	20008ba4 	.word	0x20008ba4

0800c008 <__malloc_lock>:
 800c008:	4801      	ldr	r0, [pc, #4]	; (800c010 <__malloc_lock+0x8>)
 800c00a:	f000 b809 	b.w	800c020 <__retarget_lock_acquire_recursive>
 800c00e:	bf00      	nop
 800c010:	20008ba8 	.word	0x20008ba8

0800c014 <__malloc_unlock>:
 800c014:	4801      	ldr	r0, [pc, #4]	; (800c01c <__malloc_unlock+0x8>)
 800c016:	f000 b804 	b.w	800c022 <__retarget_lock_release_recursive>
 800c01a:	bf00      	nop
 800c01c:	20008ba8 	.word	0x20008ba8

0800c020 <__retarget_lock_acquire_recursive>:
 800c020:	4770      	bx	lr

0800c022 <__retarget_lock_release_recursive>:
 800c022:	4770      	bx	lr

0800c024 <_init>:
 800c024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c026:	bf00      	nop
 800c028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c02a:	bc08      	pop	{r3}
 800c02c:	469e      	mov	lr, r3
 800c02e:	4770      	bx	lr

0800c030 <_fini>:
 800c030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c032:	bf00      	nop
 800c034:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c036:	bc08      	pop	{r3}
 800c038:	469e      	mov	lr, r3
 800c03a:	4770      	bx	lr
